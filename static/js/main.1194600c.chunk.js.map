{"version":3,"sources":["types.ts","resources/weather.csv","util.ts","stores/common.ts","analysis/analysisConstants.ts","orbitController.tsx","resources/daysky.jpg","resources/nightsky.jpg","resources/desert.jpg","resources/desert-night.jpg","resources/grassland.jpg","resources/grassland-night.jpg","views/sky.tsx","views/axes.tsx","assets/compass.obj","fonts/helvetiker_regular.typeface.fnt","views/compass.tsx","views/foundation.tsx","views/sensor.tsx","views/cuboid.tsx","sceneContent.tsx","views/ground.tsx","assets/menu.svg","analysis/sunTools.ts","views/heliodon.tsx","assets/aladdin-logo.png","assets/ifi-logo.png","components/symbols.tsx","mainMenu.tsx","components/maps.tsx","components/spinner.tsx","panels/groundPanel.tsx","panels/heliodonPanel.tsx","constants.ts","helpers.ts","acceptCookie.tsx","views/groundImage.tsx","contextMenu.tsx","components/barGraph.tsx","components/lineGraph.tsx","panels/weatherPanel.tsx","panels/yearlyLightSensorPanel.tsx","panels/dailyLightSensorPanel.tsx","analysis/simulation.tsx","mainToolBar.tsx","team.tsx","about.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["GraphDataType","Theme","ObjectType","Util","Vector3","x","Math","abs","ZERO_TOLERANCE","PI","v","z","y","degrees","radians","sphereCoords","a","cos","sin","set","lng1","lat1","lng2","lat2","toRadians","acos","date","dayOfYear","Date","start","getFullYear","diff","getTime","floor","extend","TextSprite","OrbitControls","enableMapSet","AirMass","useStore","create","devtools","persist","get","api","immerSet","fn","produce","showGroundPanel","showHeliodonPanel","showWeatherPanel","showDailyLightSensorPanel","showYearlyLightSensorPanel","autoRotate","grid","axes","groundImage","groundColor","theme","heliodon","address","latitude","longitude","mapZoom","mapType","mapTilt","mapWeatherStations","toString","weatherData","timesPerHour","yearlyLightSensorData","setYearlyLightSensorData","data","state","dailyLightSensorData","setDailyLightSensorData","worlds","getWorld","name","createNewWorld","elements","e1","type","Foundation","cx","cy","lx","ly","height","id","e2","Cuboid","e3","Sensor","cz","normal","showLabel","light","heatFlux","push","world","ground","albedo","thermalDiffusivity","snowReflectionFactors","Array","fill","panCenter","cameraPosition","enableOrbitController","clickObjectType","getSelectedElement","e","selected","getElementById","selectNone","w","updateElementById","newProps","entries","i","loadWeatherData","Papa","parse","weather","download","complete","results","row","isArray","length","lows","highs","sun","parseFloat","trim","wm","city","country","elevation","lowestTemperatures","highestTemperatures","sunshineHours","getWeather","location","getClosestCity","lat","lng","distance","min","Number","MAX_VALUE","wd","hasOwnProperty","getDistance","OrbitController","enabled","orbitControlsRef","setCommonStore","useThree","camera","domElement","gl","controls","useRef","useEffect","c","current","target","addEventListener","onInteractionEnd","update","removeEventListener","position","useFrame","ref","args","enableRotate","enablePan","enableZoom","enableDamping","maxAzimuthAngle","Infinity","minAzimuthAngle","maxPolarAngle","HALF_PI","minPolarAngle","Sky","night","props","meshRef","texture","useMemo","loader","TextureLoader","load","DesertNightSkyImage","DesertDaySkyImage","GrasslandNightSkyImage","GrasslandDaySkyImage","DefaultNightSkyImage","DefaultDaySkyImage","clickSky","intersections","object","scale","onContextMenu","onClick","map","side","DoubleSide","opacity","color","Axes","lineWidth","endPoint","Line","points","Compass","model","useLoader","OBJLoader","compassObj","font","FontLoader","helvetikerFont","mesh","textGeometryParams","size","textMaterial","MeshBasicMaterial","compassMaterial","unproject","rotation","Euler","material","lineColor","useState","hovered","setHovered","baseRef","resizeHandleLLRef","resizeHandleULRef","resizeHandleLRRef","resizeHandleURRef","handleSize","positionLL","positionUL","positionLR","positionUR","moveHandleLowerRef","moveHandleUpperRef","moveHandleLeftRef","moveHandleRightRef","offset","positionLower","positionUpper","positionLeft","positionRight","selectMe","castShadow","receiveShadow","onPointerOver","onPointerOut","onPointerDown","onPointerUp","onPointerMove","attach","text","fontSize","fontFace","textHeight","handleRef","element","lit","resizeHandleLLTopRef","resizeHandleULTopRef","resizeHandleLRTopRef","resizeHandleURTopRef","resizeHandleLLBotRef","resizeHandleULBotRef","resizeHandleLRBotRef","resizeHandleURBotRef","positionLLTop","positionULTop","positionLRTop","positionURTop","positionLLBot","positionULBot","positionLRBot","positionURBot","moveHandleLowerFaceRef","moveHandleUpperFaceRef","moveHandleLeftFaceRef","moveHandleRightFaceRef","moveHandleTopFaceRef","positionLowerFace","positionUpperFace","positionLeftFace","positionRightFace","positionTopFace","SceneContent","sceneRef","scene","filter","Ground","grabbedElement","setGrabbedElement","planeRef","ray","Raycaster","mouse","Vector2","clientX","window","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","children","p","point","ASHRAE_C","_defs","_path","_path2","_path3","_path4","_path5","_path6","TILT_ANGLE","computeDeclinationAngle","days","TWO_PI","computeHourAngle","getHours","getMinutes","getSunDirection","computeSunLocation","normalize","radius","hourAngle","declinationAngle","cosDec","sinDec","cosLat","sinLat","cosHou","sinHou","altitudeAngle","asin","xAzm","yAzm","azimuthAngle","atan2","coords","sphericalToCartesianZ","calculatePeakRadiation","sunDirection","altitude","airMassType","b","getExtraterrestrialRadiation","pow","zenithAngle","NONE","KASTEN_YOUNG","angleTo","UNIT_VECTOR_POS_Z","r","sqrt","computeAirMass","calculateDiffuseAndReflectedRadiation","month","peakRadiation","result","dot","viewFactorWithSky","viewFactorWithGround","isZero","Heliodon","basePoints","tickPoints","step","counter","angle","theta","width","basePositions","Float32Array","baseNormals","baseColors","j","sunPathPoints","h","getSunPathPointsByDate","d","pointArraySunPaths","dMin","delta","arr","sunPosition","sunbeltGeometry","declinationStep","hourStep","geometry","BufferGeometry","verticesCount","vertices","indices","h2","d2","v1","v2","v3","v4","setFromPoints","setIndex","BufferAttribute","Uint16Array","attachObject","count","array","itemSize","vertexColors","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","index","Color","transparent","clippingPlanes","Plane","UNIT_VECTOR_POS_Y","SphereGeometry","_extends","Object","assign","arguments","source","key","prototype","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgMenu","_ref","svgRef","title","titleId","t","className","viewBox","xmlns","xmlnsXlink","Direction","ForwardRef","SubMenu","Menu","StyledMenuSVG","styled","MenuSVG","MainMenu","collectDailyLightSensorData","collectYearlyLightSensorData","openAboutUs","menu","Item","checked","onChange","overlay","trigger","containerStyle","border","Maps","setLatitude","setLongitude","setZoom","setTilt","setType","zoom","tilt","setMap","bounds","cities","updateFlag","setUpdateFlag","onLoad","useCallback","onUnmount","latLng","mapContainerStyle","mapTypeId","center","onBoundsChanged","getBounds","pos","google","maps","LatLng","contains","loadCities","onCenterChanged","getCenter","onZoomChanged","getZoom","onTiltChanged","getTilt","onMapTypeIdChanged","typeId","getMapTypeId","icon","path","SymbolPath","CIRCLE","strokeColor","strokeWeight","memo","Spin","libraries","Container","div","ColumnWrapper","Header","GroundPanel","setGrid","setGroundImage","setGroundColor","changeLatitude","changeLongitude","changeMapZoom","changeMapTilt","changeMapType","searchBox","curPosition","setCurPosition","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","handle","axis","onDrag","ui","onStart","onStop","style","cursor","direction","padding","align","on","onChangeComplete","colorResult","hex","s","onPlacesChanged","places","getPlaces","formatted_address","placeholder","boxSizing","borderRadius","boxShadow","outline","textOverflow","toFixed","HeliodonPanel","animateSun","setHeliodon","setSunAnimation","changeDate","changeTime","requestRef","previousFrameTime","requestAnimationFrame","animate","cancelAnimationFrame","currentFrameTime","now","day","getDate","setHours","setDate","value","moment","toDate","format","marks","0","90","max","tooltipVisible","defaultValue","PRESET_COLORS","MONTHS","visitIFI","open","AcceptCookie","buttonText","cookieName","background","textAlign","zIndex","buttonStyle","expires","GroundImage","useTexture","StyledMenu","radioStyle","display","paddingLeft","lineHeight","ContextMenu","selectedElement","margin","Group","Default","Desert","Grassland","BarGraph","dataSource","labelX","labelY","unitX","unitY","yMin","yMax","fractionDigits","referenceX","dataSetCount","setDataSetCount","horizontalGridLines","verticalGridLines","legendDataKey","setLegendDataKey","len","getBars","bars","MonthlyTemperatures","SunshineHours","HourlyTemperatures","DaylightData","ClearnessData","DailyRadiationSensorData","YearlyRadiationSensorData","Bar","dataKey","isAnimationActive","userSelect","top","left","ResponsiveContainer","BarChart","onMouseDown","right","bottom","Tooltip","formatter","CartesianGrid","vertical","horizontal","stroke","ReferenceLine","strokeWidth","XAxis","Label","YAxis","domain","dx","Legend","iconType","verticalAlign","onMouseLeave","o","onMouseEnter","SYMBOLS","CircleSymbol","numberOfSymbols","interval","round","SquareSymbol","TriangleSymbol","pointsString","UP","LEFT","RIGHT","DiamondSymbol","StarSymbol","HexagonSymbol","createSymbol","DOWN","LineGraph","curveType","symbolCount","lineCount","setLineCount","symbolSize","getLines","defaultSymbol","lines","symbol","LineChart","WeatherPanel","graphs","rest","responsiveHeight","getData","forEach","g","Month","Low","High","Sunshine","yNames","yUnits","daysIntoYear","YearlyLightSensorPanel","sensorData","Daylight","Clearness","DailyLightSensorPanel","Simulation","dailyLightSensorDataFlag","yearlyLightSensorDataFlag","collectAllDailyLightSensorData","collectAllYearlyLightSensorData","inShadow","time","modelToView","content","components","objects","Map","datum","k","sensor","year","getMonth","cur","SPHERE_MODEL","daylight","clearness","resultArr","Radiation","midMonth","total","hour","MainToolBar","orbitControls","paddingRight","reset","Team","linePos","top110","top250","marginTop","rel","href","marginRight","About","App","setHourAngle","setDeclinationAngle","sunlightDirection","setSunlightDirection","setAnimateSun","setCity","setDailyLightSensorDataFlag","setYearlyLightSensorDataFlag","aboutUs","setAboutUs","applyEuler","nowString","sunAboveHorizon","console","log","backgroundColor","paddingTop","alt","src","aladdinLogo","ifiLogo","setFullYear","setMonth","shadows","fov","fallback","intensity","shadow-mapSize-height","shadow-mapSize-width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document"],"mappings":"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","file":"static/js/main.1194600c.chunk.js","sourcesContent":["/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {extend, Object3DNode} from \"@react-three/fiber\";\r\nimport TextSprite from \"three-spritetext\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\n// Extend makes these JSX elements (with the first character lower-cased)\r\nextend({TextSprite});\r\nextend({OrbitControls});\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            'textSprite': Object3DNode<TextSprite, typeof TextSprite>;\r\n            'orbitControls': Object3DNode<OrbitControls, typeof OrbitControls>;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface DatumEntry {\r\n    [key: string]: number | undefined | string;\r\n}\r\n\r\nexport enum GraphDataType {\r\n    HourlyTemperatures = 0,\r\n    MonthlyTemperatures = 1,\r\n    SunshineHours = 2,\r\n    DaylightData = 3,\r\n    ClearnessData = 4,\r\n    YearlyRadiationSensorData = 5,\r\n    DailyRadiationSensorData = 6,\r\n}\r\n\r\nexport enum Theme {\r\n    Default = 'Default',\r\n    Desert = 'Desert',\r\n    Grassland = 'Grassland',\r\n}\r\n\r\nexport enum ObjectType {\r\n    Sky = 'Sky',\r\n    Ground = 'Ground',\r\n    Foundation = 'Foundation',\r\n    Sensor = 'Sensor',\r\n    Cuboid = 'Cuboid',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/weather.55ddf5ca.csv\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Vector3} from \"three\";\r\n\r\nexport class Util {\r\n\r\n    static get UNIT_VECTOR_POS_X() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_X() {\r\n        return new Vector3(-1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Y() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Y() {\r\n        return new Vector3(0, -1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Z() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Z() {\r\n        return new Vector3(0, 0, -1);\r\n    }\r\n\r\n    static isZero(x: number) {\r\n        return Math.abs(x) < Util.ZERO_TOLERANCE;\r\n    }\r\n\r\n    static get ZERO_TOLERANCE() {\r\n        return 0.0001;\r\n    }\r\n\r\n    static get HALF_PI() {\r\n        return Math.PI / 2;\r\n    }\r\n\r\n    static get TWO_PI() {\r\n        return Math.PI * 2;\r\n    }\r\n\r\n    // convert the coordinates from the model system to the view system\r\n    static modelToView(v: Vector3) {\r\n        return new Vector3(v.x, v.z, -v.y);\r\n    }\r\n\r\n    // convert the coordinates from the view system to the model system\r\n    static viewToModel(v: Vector3) {\r\n        return new Vector3(v.x, -v.z, v.y);\r\n    }\r\n\r\n    static toRadians(degrees: number) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    static toDegrees(radians: number) {\r\n        return radians * (180 / Math.PI);\r\n    }\r\n\r\n    static sphericalToCartesianZ(sphereCoords: Vector3) {\r\n        let a = sphereCoords.x * Math.cos(sphereCoords.z);\r\n        let x = a * Math.cos(sphereCoords.y);\r\n        let y = a * Math.sin(sphereCoords.y);\r\n        let z = sphereCoords.x * Math.sin(sphereCoords.z);\r\n        sphereCoords.set(x, y, z);\r\n        return sphereCoords;\r\n    }\r\n\r\n    // the spherical law of cosines: https://en.wikipedia.org/wiki/Spherical_law_of_cosines\r\n    static getDistance(lng1: number, lat1: number, lng2: number, lat2: number) {\r\n        lng1 = Util.toRadians(lng1);\r\n        lat1 = Util.toRadians(lat1);\r\n        lng2 = Util.toRadians(lng2);\r\n        lat2 = Util.toRadians(lat2);\r\n        return Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(Math.abs(lng1 - lng2)));\r\n    }\r\n\r\n    static daysIntoYear(date: string) {\r\n        return Util.dayOfYear(new Date(date));\r\n    }\r\n\r\n    static dayOfYear(date: Date) {\r\n        const start = new Date(date.getFullYear(), 0, 0);\r\n        const diff = date.getTime() - start.getTime();\r\n        const oneDay = 1000 * 60 * 60 * 24;\r\n        return Math.floor(diff / oneDay);\r\n    }\r\n\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport create from 'zustand';\r\nimport {devtools, persist} from 'zustand/middleware';\r\nimport produce, {enableMapSet} from 'immer';\r\nimport {WorldModel} from \"../models/worldModel\";\r\nimport {Vector3} from \"three\";\r\nimport {ElementModel} from \"../models/elementModel\";\r\nimport {WeatherModel} from \"../models/weatherModel\";\r\nimport weather from '../resources/weather.csv';\r\nimport Papa from \"papaparse\";\r\nimport {Util} from \"../util\";\r\nimport {DatumEntry, ObjectType} from \"../types\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\nimport {CuboidModel} from \"../models/cuboidModel\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\n\r\nenableMapSet();\r\n\r\nexport interface CommonStoreState {\r\n    set: (fn: (state: CommonStoreState) => void) => void;\r\n    worlds: { [key: string]: WorldModel };\r\n    createNewWorld: () => void;\r\n    getWorld: (name: string) => WorldModel;\r\n\r\n    showGroundPanel: boolean;\r\n    showHeliodonPanel: boolean;\r\n    showWeatherPanel: boolean;\r\n    showDailyLightSensorPanel: boolean;\r\n    showYearlyLightSensorPanel: boolean;\r\n    autoRotate: boolean;\r\n\r\n    grid: boolean;\r\n    axes: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    theme: string;\r\n    heliodon: boolean;\r\n    address: string;\r\n    latitude: number;\r\n    longitude: number;\r\n    mapZoom: number;\r\n    mapType: string;\r\n    mapTilt: number;\r\n    mapWeatherStations: boolean;\r\n    date: string;\r\n\r\n    weatherData: { [key: string]: WeatherModel };\r\n    getWeather: (location: string) => WeatherModel;\r\n    loadWeatherData: () => void;\r\n    getClosestCity: (lat: number, lng: number) => string | null;\r\n\r\n    enableOrbitController: boolean;\r\n    clickObjectType: string | null;\r\n    getSelectedElement: () => ElementModel | null;\r\n    getElementById: (id: string) => ElementModel | null;\r\n    selectNone: () => void;\r\n    updateElementById: (id: string, element: Partial<ElementModel>) => void;\r\n\r\n    timesPerHour: number;\r\n    dailyLightSensorData: DatumEntry[];\r\n    setDailyLightSensorData: (data: DatumEntry[]) => void;\r\n    yearlyLightSensorData: DatumEntry[];\r\n    setYearlyLightSensorData: (data: DatumEntry[]) => void;\r\n\r\n}\r\n\r\nexport const useStore = create<CommonStoreState>(devtools(persist((\r\n    set,\r\n    get,\r\n    api,\r\n) => {\r\n\r\n    const immerSet: CommonStoreState['set'] = fn => set(produce(fn));\r\n\r\n    return {\r\n\r\n        set: immerSet,\r\n\r\n        showGroundPanel: false,\r\n        showHeliodonPanel: false,\r\n        showWeatherPanel: false,\r\n        showDailyLightSensorPanel: false,\r\n        showYearlyLightSensorPanel: false,\r\n        autoRotate: false,\r\n\r\n        grid: false,\r\n        axes: true,\r\n        groundImage: false,\r\n        groundColor: 'forestgreen',\r\n        theme: 'Default',\r\n        heliodon: false,\r\n\r\n        address: 'Natick, MA',\r\n        latitude: 42.2844063,\r\n        longitude: -71.3488548,\r\n        mapZoom: 16,\r\n        mapType: 'roadmap',\r\n        mapTilt: 0,\r\n        mapWeatherStations: false,\r\n        date: new Date(2021, 5, 22, 12).toString(),\r\n        weatherData: {},\r\n\r\n        timesPerHour: 20, // how many times per hour to collect data\r\n\r\n        yearlyLightSensorData: [],\r\n        setYearlyLightSensorData(data) {\r\n            immerSet((state: CommonStoreState) => {\r\n                state.yearlyLightSensorData = [...data];\r\n            });\r\n        },\r\n        dailyLightSensorData: [],\r\n        setDailyLightSensorData(data) {\r\n            immerSet((state: CommonStoreState) => {\r\n                state.dailyLightSensorData = [...data];\r\n            });\r\n        },\r\n\r\n        worlds: {},\r\n        getWorld(name: string) {\r\n            return get().worlds[name];\r\n        },\r\n        createNewWorld() {\r\n            immerSet((state: CommonStoreState) => {\r\n                const elements: ElementModel[] = [];\r\n                const e1 = {\r\n                    type: ObjectType.Foundation,\r\n                    cx: 0,\r\n                    cy: 0,\r\n                    lx: 2,\r\n                    ly: 2,\r\n                    height: 0.1,\r\n                    id: 'f1'\r\n                } as FoundationModel;\r\n                const e2 = {\r\n                    type: ObjectType.Cuboid,\r\n                    cx: 0,\r\n                    cy: 3,\r\n                    lx: 2,\r\n                    ly: 2,\r\n                    height: 4,\r\n                    id: 'c1'\r\n                } as CuboidModel;\r\n                const e3 = {\r\n                    type: ObjectType.Sensor,\r\n                    cx: 2,\r\n                    cy: 5,\r\n                    cz: 0,\r\n                    lx: 0.05,\r\n                    ly: 0.05,\r\n                    normal: [0, 0, 1],\r\n                    height: 0.01,\r\n                    id: 's1',\r\n                    showLabel: false,\r\n                    light: true,\r\n                    heatFlux: false\r\n                } as SensorModel;\r\n                const e4 = {\r\n                    type: ObjectType.Sensor,\r\n                    cx: 0,\r\n                    cy: 5,\r\n                    cz: 0,\r\n                    lx: 0.05,\r\n                    ly: 0.05,\r\n                    normal: [0, 0, 1],\r\n                    height: 0.01,\r\n                    id: 's2',\r\n                    showLabel: false,\r\n                    light: true,\r\n                    heatFlux: false\r\n                } as SensorModel;\r\n                const e5 = {\r\n                    type: ObjectType.Sensor,\r\n                    cx: 0,\r\n                    cy: 6,\r\n                    cz: 0,\r\n                    lx: 0.05,\r\n                    ly: 0.05,\r\n                    normal: [0, 0, 1],\r\n                    height: 0.01,\r\n                    id: 's3',\r\n                    showLabel: false,\r\n                    light: true,\r\n                    heatFlux: false\r\n                } as SensorModel;\r\n                elements.push(e1);\r\n                elements.push(e2);\r\n                elements.push(e3);\r\n                // elements.push(e4);\r\n                // elements.push(e5);\r\n                const ground = {\r\n                    albedo: 0.3,\r\n                    thermalDiffusivity: 0.05,\r\n                    snowReflectionFactors: new Array(12).fill(0)\r\n                };\r\n                const world = {\r\n                    name: 'default',\r\n                    elements: elements,\r\n                    ground: ground,\r\n                    panCenter: new Vector3(0, 0, 0),\r\n                    cameraPosition: new Vector3(0, 0, 5)\r\n                };\r\n                state.worlds[world.name] = world;\r\n            })\r\n        },\r\n\r\n        enableOrbitController: true,\r\n        clickObjectType: null,\r\n        getSelectedElement() {\r\n            const elements = get().worlds['default'].elements;\r\n            for (const e of elements) {\r\n                if (e.selected) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getElementById(id: string) {\r\n            const elements = get().worlds['default'].elements;\r\n            for (const e of elements) {\r\n                if (e.id === id) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        selectNone() {\r\n            immerSet((state: CommonStoreState) => {\r\n                const w = state.worlds['default'];\r\n                if (w) {\r\n                    for (const e of w.elements) {\r\n                        e.selected = false;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        updateElementById(id, newProps) {\r\n            immerSet((state: CommonStoreState) => {\r\n                const w = state.worlds['default'];\r\n                if (w) {\r\n                    for (let [i, e] of w.elements.entries()) {\r\n                        if (e.id === id) {\r\n                            w.elements[i] = {...e, ...newProps};\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        loadWeatherData() {\r\n            const data: WeatherModel[] = [];\r\n            Papa.parse(weather, {\r\n                download: true,\r\n                complete: function (results) {\r\n                    for (const row of results.data) {\r\n                        if (Array.isArray(row) && row.length > 1) {\r\n                            const lows: number[] = [];\r\n                            const highs: number[] = [];\r\n                            const sun: number[] = [];\r\n                            for (let i = 5; i < 29; i++) {\r\n                                if ((i - 5) % 2 === 0) {\r\n                                    lows.push(parseFloat(row[i].trim()));\r\n                                } else {\r\n                                    highs.push(parseFloat(row[i].trim()));\r\n                                }\r\n                            }\r\n                            for (let i = 29; i < 41; i++) {\r\n                                sun.push(parseFloat(row[i].trim()));\r\n                            }\r\n                            const wm = {\r\n                                city: row[0].trim(),\r\n                                country: row[1].trim(),\r\n                                longitude: parseFloat(row[2].trim()),\r\n                                latitude: parseFloat(row[3].trim()),\r\n                                elevation: parseFloat(row[4].trim()),\r\n                                lowestTemperatures: lows,\r\n                                highestTemperatures: highs,\r\n                                sunshineHours: sun\r\n                            } as WeatherModel;\r\n                            data.push(wm);\r\n                        }\r\n                    }\r\n                    immerSet((state: CommonStoreState) => {\r\n                        for (const row of data) {\r\n                            state.weatherData[row.city + ', ' + row.country] = row;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        getWeather(location: string) {\r\n            return get().weatherData[location];\r\n        },\r\n        getClosestCity(lat: number, lng: number) {\r\n            let min: number = Number.MAX_VALUE;\r\n            let city = null;\r\n            let distance: number;\r\n            const wd = get().weatherData;\r\n            for (const name in wd) {\r\n                if (wd.hasOwnProperty(name)) {\r\n                    distance = Util.getDistance(lng, lat, wd[name].longitude, wd[name].latitude);\r\n                    if (distance < min) {\r\n                        min = distance;\r\n                        city = name;\r\n                    }\r\n                }\r\n            }\r\n            return city;\r\n        }\r\n    };\r\n}, {name: 'aladdin-storage'})));\r\n\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\n// in kW, see http://en.wikipedia.org/wiki/Solar_constant\r\nexport const SOLAR_CONSTANT = 1.361;\r\n\r\n// original ASHRAE_C = [0.058, 0.060, 0.071, 0.097, 0.121, 0.134, 0.136, 0.122, 0.092, 0.073, 0.063, 0.057];\r\n// http://www.physics.arizona.edu/~cronin/Solar/References/Irradiance%20Models%20and%20Data/WOC01.pdf\r\n// revised C coefficients found from Iqbal's book\r\nexport const ASHRAE_C = [0.103, 0.104, 0.109, 0.120, 0.130, 0.137, 0.138, 0.134, 0.121, 0.111, 0.106, 0.103];\r\n\r\nexport enum AirMass {\r\n    NONE = 0,\r\n    KASTEN_YOUNG = 1,\r\n    SPHERE_MODEL = 2\r\n}\r\n\r\nexport const MINUTES_OF_DAY = 1440;\r\n\r\n// the daily cycle is 1440 minutes\r\nexport const OMEGA_DAY = Math.PI / 720;\r\n\r\n// the annual cycle is 365 days\r\nexport const OMEGA_YEAR = Math.PI / 182.5;\r\n\r\nexport const YEARLY_LAG_IN_DAYS = 30;\r\n\r\nexport const DAILY_LAG_IN_MINUTES = 120;\r\n\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {useFrame, useThree} from \"@react-three/fiber\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {Util} from \"./util\";\r\nimport {Vector3} from \"three\";\r\n\r\nexport interface OrbitControllerProps {\r\n    enabled?: boolean;\r\n    autoRotate?: boolean;\r\n    panCenter?: Vector3;\r\n    orbitControlsRef?: React.MutableRefObject<OrbitControls | undefined>;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\n// Get a reference to the Three.js Camera, and the canvas html element.\r\n// We need these to setup the OrbitControls class.\r\n// https://threejs.org/docs/#examples/en/controls/OrbitControls\r\nconst OrbitController = ({\r\n                             enabled = true,\r\n                             autoRotate = false,\r\n                             panCenter = new Vector3(),\r\n                             orbitControlsRef,\r\n                         }: OrbitControllerProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const {camera, gl: {domElement}} = useThree();\r\n    // Ref to the controls, so that we can update them on every frame using useFrame\r\n    const controls = useRef<OrbitControls>(null);\r\n\r\n    useEffect(() => {\r\n        const c = controls.current;\r\n        if (c) {\r\n            if (panCenter) {\r\n                c.target.set(panCenter.x, panCenter.y, panCenter.z);\r\n            }\r\n            c.addEventListener('end', onInteractionEnd);\r\n            c.update();\r\n            if (orbitControlsRef) {\r\n                orbitControlsRef.current = c;\r\n            }\r\n        }\r\n        return () => {\r\n            if (c) {\r\n                c.removeEventListener('end', onInteractionEnd);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const onInteractionEnd = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                // FIXME: why can't set function be used?\r\n                w.cameraPosition.x = camera.position.x;\r\n                w.cameraPosition.y = camera.position.y;\r\n                w.cameraPosition.z = camera.position.z;\r\n                if (controls.current) {\r\n                    w.panCenter.x = controls.current.target.x;\r\n                    w.panCenter.y = controls.current.target.y;\r\n                    w.panCenter.z = controls.current.target.z;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    // animation\r\n    useFrame((state) => {\r\n        if (autoRotate) {\r\n            if (controls.current) {\r\n                controls.current.update();\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <orbitControls\r\n            ref={controls}\r\n            args={[camera, domElement]}\r\n            autoRotate={autoRotate}\r\n            enabled={enabled}\r\n            enableRotate={true}\r\n            enablePan={true}\r\n            enableZoom={true}\r\n            enableDamping={true}\r\n            target={panCenter}\r\n            maxAzimuthAngle={Infinity}\r\n            minAzimuthAngle={-Infinity}\r\n            maxPolarAngle={Util.HALF_PI}\r\n            minPolarAngle={0}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default OrbitController;\r\n","export default __webpack_public_path__ + \"static/media/daysky.66925efd.jpg\";","export default __webpack_public_path__ + \"static/media/nightsky.2ee37da6.jpg\";","export default __webpack_public_path__ + \"static/media/desert.e1e10657.jpg\";","export default __webpack_public_path__ + \"static/media/desert-night.6f0f274c.jpg\";","export default __webpack_public_path__ + \"static/media/grassland.d74bba81.jpg\";","export default __webpack_public_path__ + \"static/media/grassland-night.fa2ff11e.jpg\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useRef} from \"react\";\r\nimport DefaultDaySkyImage from \"../resources/daysky.jpg\";\r\nimport DefaultNightSkyImage from \"../resources/nightsky.jpg\";\r\nimport DesertDaySkyImage from \"../resources/desert.jpg\";\r\nimport DesertNightSkyImage from \"../resources/desert-night.jpg\";\r\nimport GrasslandDaySkyImage from \"../resources/grassland.jpg\";\r\nimport GrasslandNightSkyImage from \"../resources/grassland-night.jpg\";\r\nimport {DoubleSide, Mesh, TextureLoader} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {ObjectType} from \"../types\";\r\nimport {ThreeEvent} from \"@react-three/fiber\";\r\n\r\nexport interface SkyProps {\r\n    theme?: string,\r\n    night?: boolean,\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Sky = ({\r\n                 theme = 'Default',\r\n                 night = false,\r\n                 ...props\r\n             }: SkyProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const selectNone = useStore(state => state.selectNone);\r\n    const meshRef = useRef<Mesh>(null!);\r\n    const texture = useMemo(() => {\r\n        const loader = new TextureLoader();\r\n        let texture;\r\n        switch (theme) {\r\n            case 'Desert':\r\n                texture = loader.load(night ? DesertNightSkyImage : DesertDaySkyImage);\r\n                break;\r\n            case 'Grassland':\r\n                texture = loader.load(night ? GrasslandNightSkyImage : GrasslandDaySkyImage);\r\n                break;\r\n            default:\r\n                texture = loader.load(night ? DefaultNightSkyImage : DefaultDaySkyImage);\r\n        }\r\n        return texture;\r\n    }, [theme, night]);\r\n\r\n    const clickSky = (e: ThreeEvent<MouseEvent>) => {\r\n        if (e.intersections.length > 0) {\r\n            const skyClicked = e.intersections[0].object === meshRef.current;\r\n            if (skyClicked) {\r\n                selectNone();\r\n                setCommonStore((state) => {\r\n                    state.clickObjectType = ObjectType.Sky;\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={meshRef}\r\n            name={'Sky'}\r\n            scale={1}\r\n            onContextMenu={(e) => {\r\n                clickSky(e);\r\n            }}\r\n            onClick={(e) => {\r\n                clickSky(e);\r\n            }}\r\n        >\r\n            <sphereGeometry args={[1000, 16, 16, 0, 2 * Math.PI, 0, Math.PI / 2 + 0.01]}/>\r\n            <meshBasicMaterial map={texture}\r\n                               side={DoubleSide}\r\n                               opacity={1}\r\n                               color={'skyblue'}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Sky;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {Vector3} from \"three\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface AxesProps {\r\n    lineWidth?: number,\r\n    endPoint?: number,\r\n}\r\n\r\nconst Axes = ({lineWidth = 1, endPoint = 1000}: AxesProps) => {\r\n    return (\r\n        <mesh name={'Axes'}>\r\n            <Line points={[new Vector3(-endPoint, 0, 0), new Vector3(endPoint, 0, 0)]}\r\n                  color={'red'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, -endPoint, 0), new Vector3(0, endPoint, 0)]}\r\n                  color={'green'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, 0, -endPoint), new Vector3(0, 0, endPoint)]}\r\n                  color={'blue'}\r\n                  lineWidth={lineWidth}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Axes;\r\n","export default __webpack_public_path__ + \"static/media/compass.7ded737e.obj\";","export default __webpack_public_path__ + \"static/media/helvetiker_regular.typeface.9a3651b4.fnt\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {useFrame, useLoader, useThree} from '@react-three/fiber'\r\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\r\nimport {Euler, FontLoader, Mesh, MeshBasicMaterial, TextGeometryParameters, Vector3} from \"three\";\r\nimport compassObj from '../assets/compass.obj';\r\nimport helvetikerFont from '../fonts/helvetiker_regular.typeface.fnt';\r\n\r\nexport interface CompassProps {\r\n    scale?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Compass = ({\r\n                     scale = 0.01,\r\n                     ...props\r\n                 }: CompassProps) => {\r\n    const model = useLoader(OBJLoader, compassObj);\r\n    const font = useLoader(FontLoader, helvetikerFont);\r\n    const mesh = useRef<Mesh>(null!);\r\n    const textGeometryParams = {font: font, height: 0.00, size: 0.005} as TextGeometryParameters;\r\n    const textMaterial = new MeshBasicMaterial({color: 'white'});\r\n    const compassMaterial = new MeshBasicMaterial({color: 'red'});\r\n\r\n    // FIXME: This is not the right way to fix the compass\r\n    const {camera} = useThree();\r\n    useFrame((state) => {\r\n        if (mesh.current) {\r\n            const v = new Vector3(0.88, -0.8, 0.1).unproject(camera);\r\n            mesh.current.position.set(v.x, v.y, v.z);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={mesh}\r\n            name={'Compass'}\r\n            rotation={new Euler(-Math.PI / 2, 0, 0)}\r\n        >\r\n            <mesh position={[-0.001, 0.02, 0]} material={textMaterial}>\r\n                <textGeometry args={['N', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.0015, -0.025, 0]} material={textMaterial}>\r\n                <textGeometry args={['S', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.025, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['W', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[0.02, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['E', textGeometryParams]}/>\r\n            </mesh>\r\n            <primitive object={model} scale={scale} material={compassMaterial}/>\r\n        </mesh>\r\n    );\r\n};\r\n\r\nexport default Compass;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\n\r\nconst Foundation = ({\r\n                        id,\r\n                        cx,\r\n                        cy,\r\n                        lx = 1,\r\n                        ly = 1,\r\n                        height = 0.1,\r\n                        color = 'gray',\r\n                        lineColor = 'black',\r\n                        lineWidth = 0.1,\r\n                        selected = false,\r\n                    }: FoundationModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const [hovered, setHovered] = useState(false);\r\n    const baseRef = useRef();\r\n    const resizeHandleLLRef = useRef();\r\n    const resizeHandleULRef = useRef();\r\n    const resizeHandleLRRef = useRef();\r\n    const resizeHandleURRef = useRef();\r\n    const handleSize = 0.16;\r\n\r\n    const positionLL = new Vector3(cx - lx / 2, height / 2, cy - ly / 2);\r\n    const positionUL = new Vector3(cx - lx / 2, height / 2, cy + ly / 2);\r\n    const positionLR = new Vector3(cx + lx / 2, height / 2, cy - ly / 2);\r\n    const positionUR = new Vector3(cx + lx / 2, height / 2, cy + ly / 2);\r\n\r\n    const moveHandleLowerRef = useRef();\r\n    const moveHandleUpperRef = useRef();\r\n    const moveHandleLeftRef = useRef();\r\n    const moveHandleRightRef = useRef();\r\n\r\n    const offset = 0.2;\r\n    const positionLower = new Vector3(cx, height / 2, cy - ly / 2 - offset);\r\n    const positionUpper = new Vector3(cx, height / 2, cy + ly / 2 + offset);\r\n    const positionLeft = new Vector3(cx - lx / 2 - offset, height / 2, cy);\r\n    const positionRight = new Vector3(cx + lx / 2 + offset, height / 2, cy);\r\n\r\n    const selectMe = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group name={'Foundation Group'}>\r\n\r\n            {/* draw rectangle */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Foundation'}\r\n                 onContextMenu={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             setHovered(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     setHovered(false);\r\n                 }}\r\n                 onPointerDown={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerUp={(e) => {\r\n                 }}\r\n                 onPointerMove={(e) => {\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}>\r\n                <meshStandardMaterial attach=\"material\" color={color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLL.x, height, positionLL.z], [positionLR.x, height, positionLR.z]]}\r\n                      name={'Line LL-LR Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, height, positionLR.z], [positionUR.x, height, positionUR.z]]}\r\n                      name={'Line LR-UR Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, height, positionUR.z], [positionUL.x, height, positionUL.z]]}\r\n                      name={'Line UR-UL Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, height, positionUL.z], [positionLL.x, height, positionLL.z]]}\r\n                      name={'Line UL-LL Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line points={[[positionLL.x, 0, positionLL.z], [positionLR.x, 0, positionLR.z]]}\r\n                      name={'Line LL-LR Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, 0, positionLR.z], [positionUR.x, 0, positionUR.z]]}\r\n                      name={'Line LR-UR Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, 0, positionUR.z], [positionUL.x, 0, positionUL.z]]}\r\n                      name={'Line UR-UL Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, 0, positionUL.z], [positionLL.x, 0, positionLL.z]]}\r\n                      name={'Line UL-LL Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line points={[[positionLL.x, 0, positionLL.z], [positionLL.x, height, positionLL.z]]}\r\n                      name={'Line LL-LL Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, 0, positionLR.z], [positionLR.x, height, positionLR.z]]}\r\n                      name={'Line LR-LR Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, 0, positionUL.z], [positionUL.x, height, positionUL.z]]}\r\n                      name={'Line UL-UL Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, 0, positionUR.z], [positionUR.x, height, positionUR.z]]}\r\n                      name={'Line UR-UR Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n            </>\r\n\r\n            {/* draw handles */}\r\n            {selected &&\r\n            <>\r\n                {/* resize handles */}\r\n                <Box ref={resizeHandleLLRef}\r\n                     args={[handleSize, height * 1.2, handleSize]}\r\n                     name={'Resize Handle LL'}\r\n                     position={positionLL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleULRef}\r\n                     args={[handleSize, height * 1.2, handleSize]}\r\n                     name={'Resize Handle UL'}\r\n                     position={positionUL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleLRRef}\r\n                     args={[handleSize, height * 1.2, handleSize]}\r\n                     name={'Resize Handle LR'}\r\n                     position={positionLR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleURRef}\r\n                     args={[handleSize, height * 1.2, handleSize]}\r\n                     name={'Resize Handle UR'}\r\n                     position={positionUR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n\r\n                {/* move handles */}\r\n                <Sphere ref={moveHandleLowerRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Lower'}\r\n                        position={positionLower}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleUpperRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Upper'}\r\n                        position={positionUpper}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleLeftRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Left'}\r\n                        position={positionLeft}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleRightRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Right'}\r\n                        position={positionRight}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n            </>\r\n            }\r\n\r\n            {hovered &&\r\n            <textSprite\r\n                name={'Label'}\r\n                text={'Foundation'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[1, 0.2, 0.2]}\r\n                position={[cx, height + 0.2, cy]}\r\n            />\r\n            }\r\n\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Foundation;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\n\r\nconst Sensor = ({\r\n                    id,\r\n                    cx,\r\n                    cy,\r\n                    cz,\r\n                    lx = 1,\r\n                    ly = 1,\r\n                    height = 0.1,\r\n                    color = 'white',\r\n                    lineColor = 'black',\r\n                    lineWidth = 0.1,\r\n                    selected = false,\r\n                    showLabel = false,\r\n                    light = true,\r\n                    heatFlux = false,\r\n                }: SensorModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getElementById = useStore(state => state.getElementById);\r\n    const [hovered, setHovered] = useState(false);\r\n    const baseRef = useRef();\r\n    const handleRef = useRef();\r\n\r\n    const position = new Vector3(cx, cz, cy);\r\n    const positionLL = new Vector3(cx - lx / 2, 0, cy - ly / 2);\r\n    const positionUL = new Vector3(cx - lx / 2, 0, cy + ly / 2);\r\n    const positionLR = new Vector3(cx + lx / 2, 0, cy - ly / 2);\r\n    const positionUR = new Vector3(cx + lx / 2, 0, cy + ly / 2);\r\n\r\n    const element = getElementById(id);\r\n\r\n    const selectMe = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group name={'Sensor Group'}>\r\n\r\n            {/* draw rectangle (too small to cast shadow) */}\r\n            <Box receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Sensor'}\r\n                 onPointerDown={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onContextMenu={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             setHovered(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     setHovered(false);\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}\r\n            >\r\n                <meshStandardMaterial attach=\"material\" color={element?.lit ? 'red' : color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLL.x, height, positionLL.z], [positionLR.x, height, positionLR.z]]}\r\n                      name={'Line LL-LR Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, height, positionLR.z], [positionUR.x, height, positionUR.z]]}\r\n                      name={'Line LR-UR Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, height, positionUR.z], [positionUL.x, height, positionUL.z]]}\r\n                      name={'Line UR-UL Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, height, positionUL.z], [positionLL.x, height, positionLL.z]]}\r\n                      name={'Line UL-LL Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line points={[positionLL, positionLR]}\r\n                      name={'Line LL-LR Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionLR, positionUR]}\r\n                      name={'Line LR-UR Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUR, positionUL]}\r\n                      name={'Line UR-UL Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUL, positionLL]}\r\n                      name={'Line UL-LL Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line points={[positionLL, [positionLL.x, height, positionLL.z]]}\r\n                      name={'Line LL-LL Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionLR, [positionLR.x, height, positionLR.z]]}\r\n                      name={'Line LR-LR Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUL, [positionUL.x, height, positionUL.z]]}\r\n                      name={'Line UL-UL Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUR, [positionUR.x, height, positionUR.z]]}\r\n                      name={'Line UR-UR Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n            </>\r\n\r\n            {/* draw handle */}\r\n            {selected &&\r\n            <Sphere\r\n                ref={handleRef}\r\n                args={[0.1, 6, 6]}\r\n                name={'Handle'}\r\n                position={position}>\r\n                <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n            </Sphere>\r\n            }\r\n            {(hovered || showLabel) &&\r\n            <textSprite\r\n                name={'Label'}\r\n                text={'Sensor'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[0.5, 0.2, 0.2]}\r\n                position={[cx, height + 0.2, cy]}\r\n            />\r\n            }\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Sensor;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {CuboidModel} from \"../models/cuboidModel\";\r\n\r\nconst Cuboid = ({\r\n                    id,\r\n                    cx,\r\n                    cy,\r\n                    lx = 1,\r\n                    ly = 1,\r\n                    height = 1,\r\n                    color = 'silver',\r\n                    lineColor = 'black',\r\n                    lineWidth = 0.1,\r\n                    selected = false,\r\n                }: CuboidModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n    const baseRef = useRef();\r\n    const resizeHandleLLTopRef = useRef();\r\n    const resizeHandleULTopRef = useRef();\r\n    const resizeHandleLRTopRef = useRef();\r\n    const resizeHandleURTopRef = useRef();\r\n    const resizeHandleLLBotRef = useRef();\r\n    const resizeHandleULBotRef = useRef();\r\n    const resizeHandleLRBotRef = useRef();\r\n    const resizeHandleURBotRef = useRef();\r\n\r\n    const positionLLTop = new Vector3(cx - lx / 2, height, cy - ly / 2);\r\n    const positionULTop = new Vector3(cx - lx / 2, height, cy + ly / 2);\r\n    const positionLRTop = new Vector3(cx + lx / 2, height, cy - ly / 2);\r\n    const positionURTop = new Vector3(cx + lx / 2, height, cy + ly / 2);\r\n\r\n    const positionLLBot = new Vector3(cx - lx / 2, 0, cy - ly / 2);\r\n    const positionULBot = new Vector3(cx - lx / 2, 0, cy + ly / 2);\r\n    const positionLRBot = new Vector3(cx + lx / 2, 0, cy - ly / 2);\r\n    const positionURBot = new Vector3(cx + lx / 2, 0, cy + ly / 2);\r\n\r\n    const moveHandleLowerFaceRef = useRef();\r\n    const moveHandleUpperFaceRef = useRef();\r\n    const moveHandleLeftFaceRef = useRef();\r\n    const moveHandleRightFaceRef = useRef();\r\n    const moveHandleTopFaceRef = useRef();\r\n\r\n    const offset = 0.1;\r\n    const positionLowerFace = new Vector3(cx, height / 2, cy - ly / 2 - offset);\r\n    const positionUpperFace = new Vector3(cx, height / 2, cy + ly / 2 + offset);\r\n    const positionLeftFace = new Vector3(cx - lx / 2 - offset, height / 2, cy);\r\n    const positionRightFace = new Vector3(cx + lx / 2 + offset, height / 2, cy);\r\n    const positionTopFace = new Vector3(cx, height + offset, cy);\r\n\r\n    const handleSize = 0.16;\r\n\r\n    const selectMe = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group name={'Cuboid Group'}>\r\n\r\n            {/* draw rectangular cuboid */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Cuboid'}\r\n                 onPointerDown={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onContextMenu={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             setHovered(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     setHovered(false);\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}>\r\n                <meshStandardMaterial attach=\"material\" color={color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines top */}\r\n                <Line points={[positionLLTop, positionLRTop]}\r\n                      name={'Line LL-LR Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionLRTop, positionURTop]}\r\n                      name={'Line LR-UR Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionURTop, positionULTop]}\r\n                      name={'Line UR-UL Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionULTop, positionLLTop]}\r\n                      name={'Line UL-LL Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line\r\n                    points={[positionLLBot, positionLRBot]}\r\n                    name={'Line LL-LR Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionLRBot, positionURBot]}\r\n                    name={'Line LR-UR Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionURBot, positionULBot]}\r\n                    name={'Line UR-UL Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionULBot, positionLLBot]}\r\n                    name={'Line UL-LL Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line\r\n                    points={[positionLLTop, positionLLBot]}\r\n                    name={'Line LL-LL Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionLRTop, positionLRBot]}\r\n                    name={'Line LR-LR Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionULTop, positionULBot]}\r\n                    name={'Line UL-UL Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionURTop, positionURBot]}\r\n                    name={'Line UR-UR Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n            </>\r\n\r\n            {/* draw handles */}\r\n            {selected &&\r\n            <>\r\n                {/* resize handles */}\r\n                <Box ref={resizeHandleLLTopRef}\r\n                     name={'Resize Handle LL Top'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionLLTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleULTopRef}\r\n                     name={'Resize Handle UL Top'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionULTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleLRTopRef}\r\n                     name={'Resize Handle LR Top'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionLRTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleURTopRef}\r\n                     name={'Resize Handle UR Top'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionURTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleLLBotRef}\r\n                     name={'Resize Handle LL Bottom'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionLLBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleULBotRef}\r\n                     name={'Resize Handle UL Bottom'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionULBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleLRBotRef}\r\n                     name={'Resize Handle LR Bottom'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionLRBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleURBotRef}\r\n                     name={'Resize Handle UR Bottom'}\r\n                     args={[handleSize, handleSize, handleSize]}\r\n                     position={positionURBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Box>\r\n\r\n                {/* move handles */}\r\n                <Sphere ref={moveHandleLowerFaceRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Lower Face'}\r\n                        position={positionLowerFace}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleUpperFaceRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Upper Face'}\r\n                        position={positionUpperFace}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleLeftFaceRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Left Face'}\r\n                        position={positionLeftFace}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleRightFaceRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Right Face'}\r\n                        position={positionRightFace}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleTopFaceRef}\r\n                        args={[0.1, 6, 6]}\r\n                        name={'Move Handle Top Face'}\r\n                        position={positionTopFace}>\r\n                    <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n                </Sphere>\r\n            </>\r\n            }\r\n\r\n            {hovered &&\r\n            <textSprite\r\n                name={'Label'}\r\n                text={'Box'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[0.4, 0.2, 0.2]}\r\n                position={[cx, height + 0.2, cy]}\r\n            />\r\n            }\r\n\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Cuboid;\r\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React, {useEffect} from 'react';\nimport Foundation from \"./views/foundation\";\nimport Sensor from \"./views/sensor\";\nimport Cuboid from \"./views/cuboid\";\nimport {WorldModel} from \"./models/worldModel\";\nimport {ObjectType} from \"./types\";\nimport {FoundationModel} from \"./models/foundationModel\";\nimport {SensorModel} from \"./models/sensorModel\";\nimport {CuboidModel} from \"./models/cuboidModel\";\nimport {Scene} from \"three\";\nimport {useThree} from \"@react-three/fiber\";\n\nexport interface SceneContentProps {\n    world: WorldModel;\n    sceneRef?: React.MutableRefObject<Scene | undefined>;\n}\n\nconst SceneContent: React.FC<SceneContentProps> = ({world, sceneRef}: SceneContentProps) => {\n\n    const {scene} = useThree();\n\n    useEffect(() => {\n        if (sceneRef) {\n            sceneRef.current = scene;\n        }\n    });\n\n    // const content = scene.children.filter(c => c.name === 'Content');\n    // if (content && content.length > 0) console.log(content[0].children[1].children[0].position)\n\n    return (\n        <group name={'Content'}>\n            {world.elements\n                .filter(e => e.type === ObjectType.Foundation)\n                .map(e => <Foundation key={e.id} {...e as FoundationModel}/>)}\n            {world.elements\n                .filter(e => e.type === ObjectType.Sensor)\n                .map(e => <Sensor key={e.id} {...e as SensorModel}/>)}\n            {world.elements\n                .filter(e => e.type === ObjectType.Cuboid)\n                .map(e => <Cuboid key={e.id} {...e as CuboidModel}/>)}\n        </group>\n    );\n};\n\nexport default SceneContent;\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from \"react\";\r\nimport {Plane} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide, Raycaster, Vector2} from \"three\";\r\nimport {ObjectType} from \"../types\";\r\nimport {ElementModel} from \"../models/elementModel\";\r\nimport {useThree} from \"@react-three/fiber\";\r\n\r\nconst Ground = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getSelectedElement = useStore(state => state.getSelectedElement);\r\n    const selectNone = useStore(state => state.selectNone);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const updateElementById = useStore(state => state.updateElementById);\r\n    const [grabbedElement, setGrabbedElement] = useState<ElementModel | null>(null);\r\n    const {camera, scene} = useThree();\r\n    const planeRef = useRef();\r\n    const ray = new Raycaster();\r\n\r\n    return (\r\n        <Plane receiveShadow\r\n               ref={planeRef}\r\n               name={'Ground'}\r\n               onContextMenu={(e) => {\r\n                   if (e.intersections.length > 0) {\r\n                       const groundClicked = e.intersections[0].object === planeRef.current;\r\n                       if (groundClicked) {\r\n                           selectNone();\r\n                           setCommonStore((state) => {\r\n                               state.clickObjectType = ObjectType.Ground;\r\n                           });\r\n                       }\r\n                   }\r\n               }}\r\n               onPointerDown={(e) => {\r\n                   if (e.intersections.length > 0) {\r\n                       const groundClicked = e.intersections[0].object === planeRef.current;\r\n                       if (groundClicked) {\r\n                           setCommonStore((state) => {\r\n                               state.clickObjectType = ObjectType.Ground;\r\n                           });\r\n                           selectNone();\r\n                       } else {\r\n                           setGrabbedElement(getSelectedElement());\r\n                           setCommonStore((state) => {\r\n                               state.enableOrbitController = false;\r\n                           });\r\n                       }\r\n                   }\r\n               }}\r\n               onPointerUp={(e) => {\r\n                   setGrabbedElement(null);\r\n                   setCommonStore((state) => {\r\n                       state.enableOrbitController = true;\r\n                   });\r\n               }}\r\n               onPointerMove={(e) => {\r\n                   if (grabbedElement) {\r\n                       const mouse = new Vector2();\r\n                       mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\r\n                       mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\r\n                       ray.setFromCamera(mouse, camera);\r\n                       const intersects = ray.intersectObjects(scene.children);\r\n                       if (intersects.length > 0) {\r\n                           const p = intersects[0].point;\r\n                           updateElementById(grabbedElement.id, {cx: p.x, cy: -p.z, cz: 0});\r\n                       }\r\n                   }\r\n               }}\r\n               rotation={[-Math.PI / 2, 0, 0]}\r\n               position={[0, -0.01, 0]}\r\n               args={[10000, 10000]}>\r\n            <meshStandardMaterial side={DoubleSide} attach=\"material\" color={groundColor}/>\r\n        </Plane>\r\n    )\r\n};\r\n\r\nexport default Ground;\r\n","var _defs, _path, _path2, _path3, _path4, _path5, _path6;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgMenu(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    t: 1613755944969,\n    className: \"icon\",\n    viewBox: \"0 0 1024 1024\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"p-id\": 5967,\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 200,\n    height: 200,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 235.50871m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5968\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 165.510915h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5969\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 512.1129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5970\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 442.115105h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5971\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 788.49129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5972\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 718.719294h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5973\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMenu);\nexport default __webpack_public_path__ + \"static/media/menu.c2982aed.svg\";\nexport { ForwardRef as ReactComponent };","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport {Vector3} from \"three\";\r\nimport {AirMass, ASHRAE_C, SOLAR_CONSTANT} from \"./analysisConstants\";\r\nimport {GroundModel} from \"../models/groundModel\";\r\n\r\nexport const TILT_ANGLE = 23.45 / 180.0 * Math.PI;\r\n\r\nexport const computeDeclinationAngle = (date: Date) => {\r\n    const days = Math.floor((date.getTime()\r\n        - new Date(date.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\r\n    return TILT_ANGLE * Math.sin(Util.TWO_PI * (284 + days) / 365.25);\r\n};\r\n\r\nexport const computeHourAngle = (date: Date) => {\r\n    const minutes = date.getHours() * 60 + date.getMinutes() - 12 * 60;\r\n    return minutes / (12.0 * 60.0) * Math.PI;\r\n}\r\n\r\nexport const getSunDirection = (date: Date, latitude: number) => {\r\n    return computeSunLocation\r\n    (1, computeHourAngle(date), computeDeclinationAngle(date), Util.toRadians(latitude)).normalize();\r\n};\r\n\r\nexport const computeSunLocation = (radius: number,\r\n                                   hourAngle: number,\r\n                                   declinationAngle: number,\r\n                                   latitude: number) => {\r\n    const cosDec = Math.cos(declinationAngle);\r\n    const sinDec = Math.sin(declinationAngle);\r\n    const cosLat = Math.cos(latitude);\r\n    const sinLat = Math.sin(latitude);\r\n    const cosHou = Math.cos(hourAngle);\r\n    const sinHou = Math.sin(hourAngle);\r\n    const altitudeAngle = Math.asin(sinDec * sinLat + cosDec * cosHou * cosLat);\r\n    const xAzm = sinHou * cosDec;\r\n    const yAzm = cosLat * sinDec - cosHou * cosDec * sinLat;\r\n    const azimuthAngle = Math.atan2(yAzm, xAzm);\r\n    const coords = new Vector3(radius, azimuthAngle, altitudeAngle);\r\n    Util.sphericalToCartesianZ(coords);\r\n    // reverse the x so that sun moves from east to west\r\n    coords.x = -coords.x;\r\n    return coords;\r\n};\r\n\r\n// Solar radiation incident outside the earth's atmosphere is called extraterrestrial radiation.\r\n// https://pvpmc.sandia.gov/modeling-steps/1-weather-design-inputs/irradiance-and-insolation-2/extraterrestrial-radiation/\r\nconst getExtraterrestrialRadiation = (dayOfYear: number) => {\r\n    const b = Util.TWO_PI * dayOfYear / 365;\r\n    const er = 1.00011 + 0.034221 * Math.cos(b) + 0.00128 * Math.sin(b) + 0.000719 * Math.cos(2 * b) + 0.000077 * Math.sin(2 * b);\r\n    return SOLAR_CONSTANT * er;\r\n}\r\n\r\n// air mass calculation from http://en.wikipedia.org/wiki/Air_mass_(solar_energy)#At_higher_altitudes\r\nconst computeAirMass = (airMassType: AirMass,\r\n                        sunDirection: Vector3,\r\n                        altitude: number) => {\r\n    let zenithAngle;\r\n    switch (airMassType) {\r\n        case AirMass.NONE:\r\n            return 1;\r\n        case AirMass.KASTEN_YOUNG:\r\n            zenithAngle = sunDirection.angleTo(Util.UNIT_VECTOR_POS_Z);\r\n            return 1 / (Math.cos(zenithAngle) + 0.50572 * Math.pow(96.07995 - zenithAngle / Math.PI * 180, -1.6364));\r\n        default:\r\n            zenithAngle = sunDirection.angleTo(Util.UNIT_VECTOR_POS_Z);\r\n            const cos = Math.cos(zenithAngle);\r\n            const r = 708;\r\n            const c = altitude / 9000;\r\n            return Math.sqrt((r + c) * (r + c) * cos * cos + (2 * r + 1 + c) * (1 - c)) - (r + c) * cos;\r\n    }\r\n};\r\n\r\n// Reused peak solar radiation value. Must be called once and only once before\r\n// calling calculateDirectRadiation and calculateDiffusionAndReflection\r\nexport const calculatePeakRadiation = (sunDirection: Vector3,\r\n                                       dayOfYear: number,\r\n                                       altitude: number,\r\n                                       airMassType: AirMass) => {\r\n    // don't use the 1.1 prefactor as we consider diffuse radiation in the ASHRAE model\r\n    return getExtraterrestrialRadiation(dayOfYear)\r\n        * Math.pow(0.7, Math.pow(computeAirMass(airMassType, sunDirection, altitude), 0.678));\r\n};\r\n\r\n// see: http://www.physics.arizona.edu/~cronin/Solar/References/Irradiance%20Models%20and%20Data/WOC01.pdf\r\nexport const calculateDiffuseAndReflectedRadiation = (ground: GroundModel,\r\n                                                      month: number,\r\n                                                      normal: Vector3,\r\n                                                      peakRadiation: number) => {\r\n    let result = 0;\r\n    const cos = normal.dot(Util.UNIT_VECTOR_POS_Z);\r\n    const viewFactorWithSky = 0.5 * (1 + cos);\r\n    if (viewFactorWithSky > 0) { // diffuse irradiance from the sky\r\n        result += ASHRAE_C[month] * viewFactorWithSky * peakRadiation;\r\n    }\r\n    // if a surface faces down, it should receive ground reflection as well\r\n    const viewFactorWithGround = 0.5 * Math.abs(1 - cos);\r\n    if (!Util.isZero(viewFactorWithGround)) { // short-wave reflection from the ground\r\n        result += ground.albedo * viewFactorWithGround * peakRadiation;\r\n    }\r\n    return result;\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport React, {useEffect, useMemo} from \"react\";\r\nimport {\r\n    BufferAttribute,\r\n    BufferGeometry,\r\n    Color,\r\n    DoubleSide,\r\n    Euler,\r\n    MeshBasicMaterial,\r\n    Plane,\r\n    SphereGeometry,\r\n    Vector3\r\n} from \"three\";\r\nimport {\r\n    computeDeclinationAngle,\r\n    computeSunLocation,\r\n    TILT_ANGLE\r\n} from \"../analysis/sunTools\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface HeliodonProps {\r\n    radius: number;\r\n    hourAngle: number;\r\n    declinationAngle: number;\r\n    date: Date;\r\n    latitude: number; // in radian\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst HOUR_DIVISIONS = 96;\r\nconst BASE_DIVISIONS = 72;\r\nconst DECLINATION_DIVISIONS = 12;\r\n\r\nconst Heliodon = ({\r\n                      hourAngle,\r\n                      declinationAngle,\r\n                      radius = 10,\r\n                      date = new Date(),\r\n                      latitude = 42 / 180.0 * Math.PI,\r\n                  }: HeliodonProps) => {\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // remove listeners if any\r\n        }\r\n    }, [date, latitude]);\r\n\r\n    const nRibLines = 5;\r\n\r\n    const [basePositions, baseNormals, baseColors, tickPoints] = useMemo(() => {\r\n        const basePoints: Vector3[] = [];\r\n        const tickPoints: Vector3[] = [];\r\n        const step = Math.PI * 2 / BASE_DIVISIONS;\r\n        let counter = 0;\r\n        for (let angle = 0; angle < Util.TWO_PI + step / 2.0; angle += step) {\r\n            const theta = Math.min(angle, Util.TWO_PI);\r\n            let width = 0.05 * radius;\r\n            // TODO: This is inefficient. We should use indexed buffer to share vertices\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            let p;\r\n            if (Util.TWO_PI - theta > Util.ZERO_TOLERANCE) {\r\n                width = 0.05 * radius + (counter % 3 === 0 ? 0.2 : 0);\r\n                p = new Vector3(radius, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n                p = new Vector3(radius + width, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n            }\r\n            counter++;\r\n        }\r\n\r\n        // attributes\r\n        const length = basePoints.length * 3;\r\n        const basePositions = new Float32Array(length);\r\n        const baseNormals = new Float32Array(length);\r\n        const baseColors = new Float32Array(length);\r\n\r\n        for (let i = 0; i < basePoints.length; i++) {\r\n            const j = i * 3;\r\n            basePositions[j] = basePoints[i].x;\r\n            basePositions[j + 1] = basePoints[i].y;\r\n            basePositions[j + 2] = basePoints[i].z;\r\n            baseNormals[j] = 0;\r\n            baseNormals[j + 1] = 1;\r\n            baseNormals[j + 2] = 0;\r\n            const c = (Math.floor(i / 18)) % 2 === 0 ? 0.2 : 1.0;\r\n            baseColors[j] = c;\r\n            baseColors[j + 1] = c;\r\n            baseColors[j + 2] = c;\r\n        }\r\n\r\n        return [basePositions, baseNormals, baseColors, tickPoints];\r\n    }, [radius]);\r\n\r\n    const sunPathPoints = useMemo(() => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, declinationAngle, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    }, [latitude, radius, declinationAngle]);\r\n\r\n    const getSunPathPointsByDate = (d: number) => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, d, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    };\r\n\r\n    const pointArraySunPaths = useMemo(() => {\r\n        const dMin = computeDeclinationAngle(new Date(2021, 11, 22));\r\n        const dMax = computeDeclinationAngle(new Date(2021, 5, 22));\r\n        const delta = (dMax - dMin) / nRibLines;\r\n        const arr = [];\r\n        for (let i = 0; i <= nRibLines; i++) {\r\n            arr.push(getSunPathPointsByDate(dMin + i * delta));\r\n        }\r\n        return arr;\r\n    }, [latitude, radius]);\r\n\r\n    const sunPosition = useMemo(() => {\r\n        return computeSunLocation(radius, hourAngle, declinationAngle, latitude);\r\n    }, [latitude, declinationAngle, hourAngle, radius]);\r\n\r\n    const sunbeltGeometry = useMemo(() => {\r\n        const declinationStep = 2.0 * TILT_ANGLE / DECLINATION_DIVISIONS;\r\n        const hourStep = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const geometry = new BufferGeometry();\r\n        let verticesCount = 0;\r\n        const vertices: Vector3[] = [];\r\n        const indices = [];\r\n        for (let d = -TILT_ANGLE; d < TILT_ANGLE - declinationStep / 2.0; d += declinationStep) {\r\n            for (let h = -Math.PI; h < Math.PI - hourStep / 2.0; h += hourStep) {\r\n                let h2 = h + hourStep;\r\n                let d2 = d + declinationStep;\r\n                if (h2 > Math.PI) {\r\n                    h2 = Math.PI;\r\n                }\r\n                if (d2 > TILT_ANGLE) {\r\n                    d2 = TILT_ANGLE;\r\n                }\r\n                const v1 = computeSunLocation(radius, h, d, latitude);\r\n                const v2 = computeSunLocation(radius, h2, d, latitude);\r\n                const v3 = computeSunLocation(radius, h2, d2, latitude);\r\n                const v4 = computeSunLocation(radius, h, d2, latitude);\r\n                if (v1.z >= 0 || v2.z >= 0 || v3.z >= 0 || v4.z >= 0) {\r\n                    vertices.push(v1, v2, v3, v4);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 1);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount + 3);\r\n                    verticesCount += 4;\r\n                }\r\n            }\r\n        }\r\n        geometry.setFromPoints(vertices);\r\n        geometry.setIndex(new BufferAttribute(new Uint16Array(indices), 1));\r\n        return geometry;\r\n    }, [latitude, radius]);\r\n\r\n    return (\r\n        <mesh rotation={new Euler(-Math.PI / 2, 0, 0)} name={'Heliodon'}>\r\n            {/* draw base */}\r\n            <mesh>\r\n                <bufferGeometry attach='geometry'>\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"position\"]}\r\n                        count={basePositions.length / 3}\r\n                        array={basePositions}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"normal\"]}\r\n                        count={baseNormals.length / 3}\r\n                        array={baseNormals}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"color\"]}\r\n                        count={baseColors.length / 3}\r\n                        array={baseColors}\r\n                        itemSize={3}\r\n                    />\r\n                </bufferGeometry>\r\n                <meshBasicMaterial side={DoubleSide}\r\n                                   vertexColors={true}\r\n                                   polygonOffset={true}\r\n                                   polygonOffsetFactor={-0.7}\r\n                                   polygonOffsetUnits={-2}/>\r\n            </mesh>\r\n            <lineSegments\r\n                args={[new BufferGeometry().setFromPoints(tickPoints),\r\n                    new MeshBasicMaterial({color: 0x000000})]}/>\r\n            {/* draw sun path*/}\r\n            <mesh>\r\n                {sunPathPoints.length > 3 && <Line lineWidth={2} points={sunPathPoints} color={'yellow'}/>}\r\n                {pointArraySunPaths\r\n                    .filter(a => a.length > 3)\r\n                    .map((a, index) => {\r\n                        return <Line key={index}\r\n                                     opacity={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     lineWidth={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     points={a}\r\n                                     color={'#999'}/>;\r\n                    })\r\n                }\r\n                <mesh\r\n                    args={[sunbeltGeometry,\r\n                        new MeshBasicMaterial({\r\n                            side: DoubleSide,\r\n                            color: new Color(1, 1, 0),\r\n                            transparent: true,\r\n                            opacity: 0.5,\r\n                            clippingPlanes: [new Plane(Util.UNIT_VECTOR_POS_Y, 0)]\r\n                        })\r\n                    ]}\r\n                />\r\n                <mesh\r\n                    position={sunPosition}\r\n                    args={[new SphereGeometry(0.25, 20, 20),\r\n                        new MeshBasicMaterial({color: 0xffffff00})\r\n                    ]}\r\n                />\r\n            </mesh>\r\n        </mesh>\r\n    );\r\n\r\n};\r\n\r\nexport default Heliodon;\r\n","export default __webpack_public_path__ + \"static/media/aladdin-logo.96b59d24.png\";","export default __webpack_public_path__ + \"static/media/ifi-logo.eb360016.png\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nexport const SYMBOLS = [\r\n    'circle',\r\n    'square',\r\n    'triangle up',\r\n    'triangle down',\r\n    'triangle right',\r\n    'triangle left',\r\n    'star',\r\n    'diamond',\r\n    'hexagon'\r\n];\r\n\r\nexport enum Direction {\r\n    DOWN, UP, LEFT, RIGHT\r\n}\r\n\r\nconst strokeWidth = 1;\r\n\r\nexport const CircleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <circle cx=\"0\" cy=\"0\" r=\"3\"\r\n                        style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const SquareSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <rect x=\"-3\" y=\"-3\" width=\"6\" height=\"6\"\r\n                      style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const TriangleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols, direction} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        let pointsString;\r\n        switch (direction) {\r\n            case Direction.UP:\r\n                pointsString = \"-4,2.5,4,2.5,0,-3.5\";\r\n                break;\r\n            case Direction.LEFT:\r\n                pointsString = \"2.5,4,2.5,-4,-3.5,0\";\r\n                break;\r\n            case Direction.RIGHT:\r\n                pointsString = \"-2.5,4,-2.5,-4,3.5,0\";\r\n                break;\r\n            default:\r\n                pointsString = \"-4,-2.5,4,-2.5,0,3.5\";\r\n        }\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points={pointsString}\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const DiamondSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points=\"-3,0,0,5,3,0,0,-5\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const StarSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // we need to scale down by 50% first before applying the scale factor as the original svg is too large\r\n        const s = 0.05 * scale;\r\n        return (\r\n            // strokeWidth needs to be doubled as the view box is too large\r\n            <svg x={cx - 100 * s} y={cy - 100 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon points=\"100,10 40,180 190,60 10,60 160,180\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: stroke, strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const HexagonSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        const s = 0.02 * scale;\r\n        return (\r\n            <svg x={cx - 150 * s} y={cy - 150 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon className=\"hex\" points=\"300,150 225,280 75,280 0,150 75,20 225,20\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const createSymbol = (type: string, size: number, count: number, opacity: number) => {\r\n    switch (type) {\r\n        case 'circle':\r\n            return <CircleSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'square':\r\n            return <SquareSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'triangle up':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.UP} opacity={opacity}/>;\r\n        case 'triangle down':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.DOWN} opacity={opacity}/>;\r\n        case 'triangle right':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.RIGHT} opacity={opacity}/>;\r\n        case 'triangle left':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.LEFT} opacity={opacity}/>;\r\n        case 'star':\r\n            return <StarSymbol scale={1.25 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'diamond':\r\n            return <DiamondSymbol scale={1.1 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'hexagon':\r\n            return <HexagonSymbol scale={1.3 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n    }\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Menu, Dropdown, Checkbox} from 'antd';\r\nimport {ReactComponent as MenuSVG} from './assets/menu.svg';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst {SubMenu} = Menu;\r\n\r\nconst StyledMenuSVG = styled(MenuSVG)`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  height: 40px;\r\n  width: 40px;\r\n  transition: 0.5s;\r\n  fill: brown;\r\n\r\n  &:hover {\r\n    fill: white;\r\n  }\r\n`;\r\n\r\nexport interface MainMenuProps {\r\n\r\n    collectDailyLightSensorData: () => void;\r\n    collectYearlyLightSensorData: () => void;\r\n    openAboutUs: (on: boolean) => void;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst MainMenu = ({\r\n                      collectDailyLightSensorData,\r\n                      collectYearlyLightSensorData,\r\n                      openAboutUs,\r\n                      ...rest\r\n                  }: MainMenuProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n\r\n    // @ts-ignore\r\n    const onChangeShowGroundPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showGroundPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onChangeShowWeatherPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showWeatherPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item key={'ground-panel-check-box'}>\r\n                <Checkbox checked={showGroundPanel} onChange={onChangeShowGroundPanel}>\r\n                    Ground Settings\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <Menu.Item key={'weather-panel-check-box'}>\r\n                <Checkbox checked={showWeatherPanel} onChange={onChangeShowWeatherPanel}>\r\n                    Weather Data\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <SubMenu key={'sensors'} title={'Sensors'}>\r\n                <Menu.Item key={'sensor-collect-daily-data'} onClick={collectDailyLightSensorData}>\r\n                    Collect Daily Data\r\n                </Menu.Item>\r\n                <Menu.Item key={'sensor-collect-yearly-data'} onClick={collectYearlyLightSensorData}>\r\n                    Collect Yearly Data\r\n                </Menu.Item>\r\n            </SubMenu>\r\n            <Menu.Item key={'about-us'} onClick={() => {\r\n                openAboutUs(true);\r\n            }}>\r\n                About Us\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <Dropdown overlay={menu} trigger={['click']}>\r\n            <StyledMenuSVG/>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {memo, useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {GoogleMap, Marker} from '@react-google-maps/api';\r\nimport {useStore} from \"../stores/common\";\r\n\r\nexport interface MapsProp {\r\n\r\n    setLatitude?: (value: number) => void;\r\n    setLongitude?: (value: number) => void;\r\n    setZoom?: (value: number) => void;\r\n    setTilt?: (value: number) => void;\r\n    setType?: (value: string) => void;\r\n\r\n}\r\n\r\nconst containerStyle = {\r\n    border: '1px solid',\r\n    width: '400px',\r\n    height: '400px'\r\n};\r\n\r\nconst Maps = ({\r\n                  setLatitude,\r\n                  setLongitude,\r\n                  setZoom,\r\n                  setTilt,\r\n                  setType,\r\n              }: MapsProp) => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const zoom = useStore(state => state.mapZoom);\r\n    const type = useStore(state => state.mapType);\r\n    const tilt = useStore(state => state.mapTilt);\r\n    const [map, setMap] = useState<google.maps.Map | null>(null);\r\n    const bounds = useRef<google.maps.LatLngBounds | null | undefined>();\r\n    const cities = useRef<google.maps.LatLng[]>([]);\r\n    const weatherData = useStore(state => state.weatherData);\r\n    const mapWeatherStations = useStore(state => state.mapWeatherStations);\r\n    const [updateFlag, setUpdateFlag] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n    }, [updateFlag]);\r\n\r\n    const onLoad = useCallback((map: google.maps.Map) => {\r\n        setMap(map);\r\n    }, []);\r\n\r\n    const onUnmount = useCallback(function callback(map) {\r\n        setMap(null);\r\n    }, []);\r\n\r\n    const loadCities = () => {\r\n        if (bounds.current) {\r\n            cities.current.length = 0;\r\n            for (const x in weatherData) {\r\n                if (weatherData.hasOwnProperty(x)) {\r\n                    const w = weatherData[x];\r\n                    const pos = new google.maps.LatLng(w.latitude, w.longitude);\r\n                    if (bounds.current.contains(pos)) {\r\n                        cities.current.push(pos);\r\n                    }\r\n                }\r\n            }\r\n            setUpdateFlag(!updateFlag);\r\n        }\r\n    };\r\n\r\n    const onBoundsChanged = () => {\r\n        if (map) {\r\n            bounds.current = map.getBounds();\r\n            if (mapWeatherStations) {\r\n                loadCities();\r\n            }\r\n        }\r\n    };\r\n\r\n    const onCenterChanged = () => {\r\n        if (map) {\r\n            const center = map.getCenter();\r\n            const lat = center.lat();\r\n            if (lat !== latitude) {\r\n                setLatitude?.(lat);\r\n            }\r\n            const lng = center.lng();\r\n            if (lng !== longitude) {\r\n                setLongitude?.(lng);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onZoomChanged = () => {\r\n        if (map) {\r\n            const z = map.getZoom();\r\n            if (z !== zoom) {\r\n                setZoom?.(z);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onTiltChanged = () => {\r\n        if (map) {\r\n            const t = map.getTilt();\r\n            if (t !== tilt) {\r\n                setTilt?.(t);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onMapTypeIdChanged = () => {\r\n        if (map) {\r\n            const typeId = map.getMapTypeId();\r\n            if (typeId !== type) {\r\n                setType?.(typeId);\r\n            }\r\n        }\r\n    };\r\n\r\n    const latLng = {lat: latitude, lng: longitude};\r\n\r\n    return (\r\n        <GoogleMap\r\n            mapContainerStyle={containerStyle}\r\n            mapTypeId={type}\r\n            center={latLng}\r\n            zoom={zoom}\r\n            tilt={tilt}\r\n            onLoad={onLoad}\r\n            onBoundsChanged={onBoundsChanged}\r\n            onUnmount={onUnmount}\r\n            onCenterChanged={onCenterChanged}\r\n            onZoomChanged={onZoomChanged}\r\n            onTiltChanged={onTiltChanged}\r\n            onMapTypeIdChanged={onMapTypeIdChanged}\r\n        >\r\n            { /* Child components, such as markers, info windows, etc. */}\r\n            <>\r\n                {mapWeatherStations &&\r\n                cities.current.map((c, index) => {\r\n                    const scale = 0.2 * zoom;\r\n                    return (\r\n                        <Marker\r\n                            key={index}\r\n                            icon={{\r\n                                path: google.maps.SymbolPath.CIRCLE,\r\n                                strokeColor: 'red',\r\n                                strokeWeight: scale + 2,\r\n                                scale: scale,\r\n                            }}\r\n                            position={c}\r\n                        />\r\n                    )\r\n                })}\r\n            </>\r\n        </GoogleMap>\r\n    );\r\n};\r\n\r\nexport default memo(Maps);\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Spin} from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nexport default styled(Spin)`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  z-index: 999;\r\n`;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from 'react';\r\nimport {useStore} from \"../stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch} from \"antd\";\r\nimport {CompactPicker} from 'react-color';\r\nimport Maps from \"../components/maps\";\r\nimport {StandaloneSearchBox, useJsApiLoader} from \"@react-google-maps/api\";\r\nimport {Libraries} from \"@react-google-maps/api/dist/utils/make-load-script-url\";\r\nimport Spinner from '../components/spinner';\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\nimport 'antd/dist/antd.css';\r\n\r\nconst libraries = ['places'] as Libraries;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 420px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface GroundPanelProps {\r\n    grid: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    setGrid?: (on: boolean) => void;\r\n    setGroundImage?: (on: boolean) => void;\r\n    setGroundColor?: (color: string) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeLongitude?: (longitude: number) => void;\r\n    changeMapZoom?: (zoom: number) => void;\r\n    changeMapTilt?: (tilt: number) => void;\r\n    changeMapType?: (type: string) => void;\r\n}\r\n\r\nconst GroundPanel = ({\r\n                         grid,\r\n                         groundImage,\r\n                         groundColor,\r\n                         setGrid,\r\n                         setGroundImage,\r\n                         setGroundColor,\r\n                         changeLatitude,\r\n                         changeLongitude,\r\n                         changeMapZoom,\r\n                         changeMapTilt,\r\n                         changeMapType,\r\n                     }: GroundPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n    const mapWeatherStations = useStore(state => state.mapWeatherStations);\r\n    const address = useStore(state => state.address);\r\n    const searchBox = useRef<google.maps.places.SearchBox>();\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const {isLoaded, loadError} = useJsApiLoader({\r\n        id: 'google-map-script',\r\n        googleMapsApiKey: process.env.REACT_APP_MAPS_API_KEY as string,\r\n        libraries: libraries\r\n    });\r\n\r\n    const onPlacesChanged = () => {\r\n        const places = searchBox.current?.getPlaces();\r\n        if (places && places.length > 0) {\r\n            setCommonStore((state) => {\r\n                const geometry = places[0].geometry;\r\n                if (geometry) {\r\n                    state.latitude = geometry.location.lat();\r\n                    state.longitude = geometry.location.lng();\r\n                }\r\n                state.address = places[0].formatted_address as string;\r\n            });\r\n        }\r\n    };\r\n\r\n    const onLoad = (s: google.maps.places.SearchBox) => {\r\n        searchBox.current = s;\r\n    };\r\n\r\n    const setMapWeatherStations = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.mapWeatherStations = on;\r\n        });\r\n    };\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Ground Settings</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showGroundPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <Space direction={'vertical'}>\r\n                        <Space style={{padding: '20px'}} align={'center'} size={20}>\r\n                            <Space direction={'vertical'}>\r\n                                <Space>\r\n                                    <Space style={{width: '60px'}}>Grid:</Space>\r\n                                    <Switch title={'Show ground grid'}\r\n                                            checked={grid}\r\n                                            onChange={(checked) => {\r\n                                                setGrid?.(checked);\r\n                                            }}\r\n                                    />\r\n                                </Space>\r\n                                <Space>\r\n                                    <Space style={{width: '60px'}}>Image:</Space>\r\n                                    <Switch title={'Show ground image'}\r\n                                            checked={groundImage}\r\n                                            onChange={(checked) => {\r\n                                                setGroundImage?.(checked);\r\n                                            }}\r\n                                    />\r\n                                </Space>\r\n                                <Space>\r\n                                    <Space style={{width: '60px'}}>Stations:</Space>\r\n                                    <Switch title={'Show weather stations'}\r\n                                            checked={mapWeatherStations}\r\n                                            onChange={(checked) => {\r\n                                                setMapWeatherStations(checked);\r\n                                            }}\r\n                                    />\r\n                                </Space>\r\n                            </Space>\r\n                            <div>Ground Color<br/>\r\n                                <CompactPicker color={groundColor} onChangeComplete={(colorResult) => {\r\n                                    setGroundColor?.(colorResult.hex);\r\n                                }}/>\r\n                            </div>\r\n                        </Space>\r\n                        {isLoaded &&\r\n                        <Space>\r\n                            <div>\r\n                                <StandaloneSearchBox onLoad={onLoad}\r\n                                                     onPlacesChanged={onPlacesChanged}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder={address}\r\n                                        style={{\r\n                                            boxSizing: `border-box`,\r\n                                            border: `1px solid transparent`,\r\n                                            width: `400px`,\r\n                                            height: `32px`,\r\n                                            padding: `0 12px`,\r\n                                            borderRadius: `3px`,\r\n                                            boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n                                            fontSize: `14px`,\r\n                                            outline: `none`,\r\n                                            textOverflow: `ellipses`,\r\n                                            position: \"relative\"\r\n                                        }}\r\n                                    />\r\n                                </StandaloneSearchBox>\r\n                            </div>\r\n                        </Space>\r\n                        }\r\n                        {isLoaded ?\r\n                            <Space>\r\n                                <div>\r\n                                    <Maps setLatitude={changeLatitude}\r\n                                          setLongitude={changeLongitude}\r\n                                          setZoom={changeMapZoom}\r\n                                          setTilt={changeMapTilt}\r\n                                          setType={changeMapType}\r\n                                    />\r\n                                    Coordinates: ({latitude.toFixed(4)}°, {longitude.toFixed(4)}°),\r\n                                    Zoom: {mapZoom}\r\n                                </div>\r\n                            </Space>\r\n                            :\r\n                            <Spinner/>\r\n                        }\r\n                        {loadError &&\r\n                        <Space>\r\n                            <div>Map cannot be loaded right now, sorry.</div>\r\n                        </Space>\r\n                        }\r\n                    </Space>\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n};\r\n\r\nexport default GroundPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef, useState} from 'react';\r\nimport {useStore} from \"../stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch, Slider, DatePicker, TimePicker} from \"antd\";\r\nimport moment from 'moment';\r\nimport 'antd/dist/antd.css';\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 640px;\r\n  padding: 0;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface HeliodonPanelProps {\r\n    heliodon: boolean;\r\n    latitude: number;\r\n    date: Date;\r\n    animateSun?: boolean;\r\n    setHeliodon?: (on: boolean) => void;\r\n    setSunAnimation?: (on: boolean) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeDate?: (date: Date) => void;\r\n    changeTime?: (date: Date) => void;\r\n}\r\n\r\nconst HeliodonPanel = ({\r\n                           heliodon,\r\n                           latitude,\r\n                           date,\r\n                           animateSun,\r\n                           setHeliodon,\r\n                           setSunAnimation,\r\n                           changeLatitude,\r\n                           changeDate,\r\n                           changeTime,\r\n                       }: HeliodonPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const requestRef = useRef<number>(0);\r\n    const previousFrameTime = useRef<number>(-1);\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    useEffect(() => {\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => {\r\n            cancelAnimationFrame(requestRef.current);\r\n        }\r\n    }, [animateSun]);\r\n\r\n    const animate = () => {\r\n        if (animateSun) {\r\n            requestRef.current = requestAnimationFrame(animate);\r\n            const currentFrameTime = Date.now();\r\n            if (currentFrameTime - previousFrameTime.current > 100) {\r\n                const day = date.getDate();\r\n                date.setHours(date.getHours(), date.getMinutes() + 15);\r\n                date.setDate(day)\r\n                changeTime?.(date);\r\n                previousFrameTime.current = currentFrameTime;\r\n            }\r\n        }\r\n    };\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Heliodon Settings</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showHeliodonPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <Space style={{padding: '20px'}} align={'baseline'} size={20}>\r\n                        <div>\r\n                            Show<br/>\r\n                            <Switch checked={heliodon} onChange={(checked) => {\r\n                                setHeliodon?.(checked);\r\n                            }}/>\r\n                        </div>\r\n                        <div>\r\n                            Animate<br/>\r\n                            <Switch checked={animateSun} onChange={(checked) => {\r\n                                setSunAnimation?.(checked);\r\n                            }}/>\r\n                        </div>\r\n                        <div>\r\n                            Date<br/>\r\n                            <DatePicker value={moment(date)}\r\n                                        onChange={(moment) => {\r\n                                            if (moment) changeDate?.(moment.toDate());\r\n                                        }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            Time<br/>\r\n                            <TimePicker value={moment(date, 'HH:mm')}\r\n                                        format={'HH:mm'}\r\n                                        onChange={(moment) => {\r\n                                            if (moment) changeTime?.(moment.toDate());\r\n                                        }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            Latitude: {latitude.toFixed(4)}°\r\n                            <Slider\r\n                                style={{width: '150px'}}\r\n                                marks={{'-90': '-90°', 0: '0°', 90: '90°'}}\r\n                                min={-90}\r\n                                max={90}\r\n                                tooltipVisible={false}\r\n                                defaultValue={latitude}\r\n                                onChange={(value: number) => {\r\n                                    changeLatitude?.(value);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Space>\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n};\r\n\r\nexport default HeliodonPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nexport const VERSION = '0.0.1';\r\n\r\nexport const isProd = process.env.NODE_ENV === 'production';\r\n\r\nexport const HOME_URL: string = isProd ? 'https://aladdin.intofuture.org' : 'http://aladdin.dev';\r\n\r\nexport const PRESET_COLORS = [\r\n    '#8884d8',\r\n    '#f97356',\r\n    '#1bc32c',\r\n    '#c6502d',\r\n    '#82ca9d',\r\n    '#3eaec0',\r\n    '#627682',\r\n    '#445111'\r\n];\r\n\r\nexport const MONTHS = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec'\r\n];\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {message} from \"antd\";\r\n\r\nexport const visitIFI = () => {\r\n    window.open(\"https://intofuture.org\", '_blank');\r\n};\r\n\r\nexport const getMapImage = (size: number, lat: number, lng: number, zoom: number) => {\r\n    return \"https://maps.googleapis.com/maps/api/staticmap?maptype=satellite&center=\" + lat + \",\" + lng\r\n        + \"&zoom=\" + zoom + \"&size=\" + size + \"x\" + size + \"&scale=2&key=\" + process.env.REACT_APP_MAPS_API_KEY;\r\n}\r\n\r\nexport const showSuccess = (msg: string) => {\r\n    message.success({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showInfo = (msg: string) => {\r\n    message.info({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showWarning = (msg: string) => {\r\n    message.warning({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showError = (msg: string) => {\r\n    message.error({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const fahrenheitToCelsius = (temp: number) => {\r\n    return ((temp - 32) * 5) / 9;\r\n};\r\n\r\nexport const celsiusToFahrenheit = (temp: number) => {\r\n    return temp * (9 / 5) + 32;\r\n};\r\n\r\nexport const openInNewTab = (url: string) => {\r\n    const win = window.open(url, '_blank');\r\n    if (win) {\r\n        win.focus();\r\n    }\r\n};\r\n\r\nexport const extractText = (html: string) => {\r\n    return new DOMParser().parseFromString(html, \"text/html\").documentElement.textContent;\r\n};\r\n\r\nexport const containedInDOMRect = (rect: DOMRect, x: number, y: number, margin: number) => {\r\n    return x > rect.x - margin && x < rect.x + rect.width + margin\r\n        && y > rect.y - margin && y < rect.y + rect.height + margin;\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport CookieConsent from \"react-cookie-consent\";\r\n\r\nconst AcceptCookie = () => {\r\n    return <CookieConsent\r\n        location=\"bottom\"\r\n        buttonText=\"Accept\"\r\n        cookieName=\"AladdinCookieName\"\r\n        style={{background: \"#2B373B\", textAlign: 'center', zIndex: 99999}}\r\n        buttonStyle={{color: \"#4e503b\", fontSize: \"12px\"}}\r\n        expires={150}\r\n    >\r\n        By clicking Accept, you agree to our use of cookies to improve your experience with Aladdin.\r\n    </CookieConsent>;\r\n};\r\n\r\nexport default AcceptCookie;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {useTexture} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide} from \"three\";\r\nimport {getMapImage} from \"../helpers\";\r\n\r\nconst GroundImage = () => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n\r\n    const texture = useTexture(getMapImage(640, latitude, longitude, mapZoom));\r\n\r\n    return (\r\n        <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\r\n            <planeBufferGeometry args={[100, 100]}/>\r\n            <meshStandardMaterial attach=\"material\" side={DoubleSide} map={texture} opacity={1}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default GroundImage;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from \"styled-components\";\r\nimport 'antd/dist/antd.css';\r\nimport {useStore} from \"./stores/common\";\r\nimport {useWorker} from \"@koale/useworker\";\r\nimport {Menu, Checkbox, Radio} from 'antd';\r\nimport {ObjectType, Theme} from \"./types\";\r\n\r\n// TODO: Reduce the space between menu items\r\nconst StyledMenu = styled(Menu)`\r\n  padding: 0;\r\n  margin: 0;\r\n`;\r\n\r\nconst {SubMenu} = StyledMenu;\r\n\r\nconst radioStyle = {\r\n    display: 'block',\r\n    height: '30px',\r\n    paddingLeft: '10px',\r\n    lineHeight: '30px',\r\n};\r\n\r\nexport interface ContextMenuProps {\r\n\r\n    city: string | null;\r\n    collectDailyLightSensorData: () => void;\r\n    collectYearlyLightSensorData: () => void;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst ContextMenu = ({\r\n                         city,\r\n                         collectDailyLightSensorData,\r\n                         collectYearlyLightSensorData,\r\n                         ...rest\r\n                     }: ContextMenuProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getSelectedElement = useStore(state => state.getSelectedElement);\r\n    const updateElementById = useStore(state => state.updateElementById);\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const theme = useStore(state => state.theme);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const clickObjectType = useStore(state => state.clickObjectType);\r\n    const selectedElement = getSelectedElement();\r\n\r\n    switch (selectedElement ? selectedElement.type : clickObjectType) {\r\n        case ObjectType.Sky:\r\n            return (\r\n                <StyledMenu style={{padding: 0, margin: 0}}>\r\n                    <Menu.Item key={'axes'}>\r\n                        <Checkbox checked={axes} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.axes = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Axes\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'heliodon-settings'}>\r\n                        <Checkbox checked={showHeliodonPanel} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.showHeliodonPanel = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Heliodon Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'weather-data'}>\r\n                        <Checkbox checked={showWeatherPanel} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.showWeatherPanel = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Weather Data\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <SubMenu key={'theme'} title={'Theme'}>\r\n                        <Radio.Group value={theme} style={{height: '105px'}} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.theme = e.target.value;\r\n                            });\r\n                        }}>\r\n                            <Radio style={radioStyle} value={Theme.Default}>Default</Radio>\r\n                            <Radio style={radioStyle} value={Theme.Desert}>Desert</Radio>\r\n                            <Radio style={radioStyle} value={Theme.Grassland}>Grassland</Radio>\r\n                        </Radio.Group>\r\n                    </SubMenu>\r\n                </StyledMenu>);\r\n        case ObjectType.Foundation:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'foundation-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'foundation-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n        case ObjectType.Sensor:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'sensor-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'sensor-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'sensor-light'}>\r\n                        <Checkbox checked={!!selectedElement?.showLabel} onChange={(e) => {\r\n                            if (selectedElement) {\r\n                                updateElementById(selectedElement.id, {showLabel: e.target.checked});\r\n                            }\r\n                        }}>\r\n                            Show Label\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <SubMenu key={'analysis'} title={'Analysis'}>\r\n                        <Menu.Item key={'sensor-collect-daily-data'} onClick={collectDailyLightSensorData}>\r\n                            Collect Daily Data\r\n                        </Menu.Item>\r\n                        <Menu.Item key={'sensor-collect-yearly-data'} onClick={collectYearlyLightSensorData}>\r\n                            Collect Yearly Data\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                </StyledMenu>\r\n            );\r\n        case ObjectType.Cuboid:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'cuboid-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'cuboid-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n        default:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'ground-grid'}>\r\n                        <Checkbox checked={grid} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.grid = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Grid\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'ground-settings'}>\r\n                        <Checkbox checked={showGroundPanel} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.showGroundPanel = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Ground Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'ground-paste'}>\r\n                        Paste\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n    }\r\n\r\n};\r\n\r\nexport default ContextMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo, useState} from 'react';\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    CartesianGrid,\r\n    Label,\r\n    Legend,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport {PRESET_COLORS} from \"../constants\";\r\nimport {GraphDataType, DatumEntry} from \"../types\";\r\n\r\nexport interface BarGraphProps {\r\n    type: GraphDataType;\r\n    dataSource: DatumEntry[];\r\n    height: number;\r\n    labelX?: string,\r\n    labelY?: string,\r\n    unitX?: string;\r\n    unitY?: string;\r\n    yMin?: string | number;\r\n    yMax?: string | number;\r\n    fractionDigits?: number;\r\n    referenceX?: number | string;\r\n    color?: string;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst BarGraph = ({\r\n                      type,\r\n                      dataSource,\r\n                      height,\r\n                      labelX,\r\n                      labelY,\r\n                      unitX,\r\n                      unitY,\r\n                      yMin = 'auto',\r\n                      yMax = 'auto',\r\n                      fractionDigits = 2,\r\n                      referenceX,\r\n                      color,\r\n                      ...rest\r\n                  }: BarGraphProps) => {\r\n\r\n    const [dataSetCount, setDataSetCount] = useState<number>(0);\r\n    const [horizontalGridLines, setHorizontalGridLines] = useState<boolean>(true);\r\n    const [verticalGridLines, setVerticalGridLines] = useState<boolean>(true);\r\n    const [legendDataKey, setLegendDataKey] = useState<string | null>(null);\r\n\r\n    //init\r\n    useEffect(() => {\r\n        if (!dataSource) {\r\n            return;\r\n        }\r\n        const len = Array.isArray(dataSource) ? Object.keys(dataSource[0]).length - 1 : Object.keys(dataSource).length - 1;\r\n        if (dataSetCount !== len) {\r\n            setDataSetCount(len);\r\n        }\r\n    }, [dataSource]);\r\n\r\n    const getBars = useMemo(() => {\r\n        const bars = [];\r\n        for (let i = 0; i < dataSetCount; i++) {\r\n            let name = '';\r\n            switch (type) {\r\n                case GraphDataType.MonthlyTemperatures:\r\n                    name = i === 0 ? `Low` : 'High';\r\n                    break;\r\n                case GraphDataType.SunshineHours:\r\n                    name = 'Sunshine';\r\n                    break;\r\n                case GraphDataType.HourlyTemperatures:\r\n                    name = 'Temperature';\r\n                    break;\r\n                case GraphDataType.DaylightData:\r\n                    name = 'Daylight';\r\n                    break;\r\n                case GraphDataType.ClearnessData:\r\n                    name = 'Clearness';\r\n                    break;\r\n                case GraphDataType.DailyRadiationSensorData:\r\n                case GraphDataType.YearlyRadiationSensorData:\r\n                    name = 'Radiation';\r\n                    break;\r\n            }\r\n            const opacity = legendDataKey === null ? 1 : (legendDataKey === name ? 1 : 0.25);\r\n            bars.push(\r\n                <Bar\r\n                    key={i}\r\n                    name={name}\r\n                    dataKey={name}\r\n                    fill={color ? color : PRESET_COLORS[i]}\r\n                    opacity={opacity}\r\n                    isAnimationActive={false}\r\n                />,\r\n            );\r\n        }\r\n        return bars;\r\n    }, [dataSetCount, legendDataKey]);\r\n\r\n    // @ts-ignore\r\n    const onMouseDown = (e) => {\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseEnterLegend = (o) => {\r\n        setLegendDataKey(o.dataKey);\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseLeaveLegend = (o) => {\r\n        setLegendDataKey(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {dataSource && (\r\n                // need two div wrappers to disable the responsiveness of ResponsiveContainer\r\n                <div id={'bar-graph-' + labelX + '-' + labelY}\r\n                     style={{width: '100%', height: `${height}%`, position: 'relative'}}>\r\n                    <div\r\n                        style={{\r\n                            userSelect: 'none',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0\r\n                        }}\r\n                    >\r\n                        <ResponsiveContainer width=\"100%\" height={`100%`}>\r\n                            <BarChart\r\n                                data={dataSource}\r\n                                onMouseDown={onMouseDown}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 30,\r\n                                }}>\r\n                                <Tooltip formatter={(value: number) => value.toFixed(fractionDigits) + ' ' + unitY}/>\r\n                                <CartesianGrid\r\n                                    vertical={verticalGridLines}\r\n                                    horizontal={horizontalGridLines}\r\n                                    stroke={\"rgba(128, 128, 128, 0.3)\"}\r\n                                />\r\n                                <ReferenceLine\r\n                                    x={referenceX}\r\n                                    stroke=\"orange\"\r\n                                    strokeWidth={2}\r\n                                />\r\n                                <XAxis dataKey={labelX}>\r\n                                    <Label\r\n                                        value={labelX + (unitX ? ' (' + unitX + ')' : '')}\r\n                                        offset={0}\r\n                                        position=\"bottom\"\r\n                                    />\r\n                                </XAxis>\r\n                                <YAxis domain={[yMin, yMax]}>\r\n                                    <Label\r\n                                        dx={-15}\r\n                                        value={labelY + (unitY ? ' (' + unitY + ')' : '')}\r\n                                        offset={0}\r\n                                        angle={-90}\r\n                                        position=\"center\"\r\n                                    />\r\n                                </YAxis>\r\n                                {getBars}\r\n                                {dataSetCount > 1 &&\r\n                                <Legend iconType='plainline'\r\n                                        verticalAlign='top'\r\n                                        height={36}\r\n                                        onMouseLeave={onMouseLeaveLegend}\r\n                                        onMouseEnter={onMouseEnterLegend}/>}\r\n                            </BarChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BarGraph;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo, useState} from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Label,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport {createSymbol, SYMBOLS} from \"./symbols\";\r\nimport {PRESET_COLORS} from \"../constants\";\r\nimport {GraphDataType, DatumEntry} from \"../types\";\r\nimport {CurveType} from \"recharts/types/shape/Curve\";\r\n\r\nexport interface LineGraphProps {\r\n    type: GraphDataType;\r\n    dataSource: DatumEntry[];\r\n    height: number;\r\n    labelX?: string,\r\n    labelY?: string,\r\n    unitX?: string;\r\n    unitY?: string;\r\n    yMin?: string | number;\r\n    yMax?: string | number;\r\n    curveType?: CurveType;\r\n    referenceX?: number | string;\r\n    fractionDigits?: number;\r\n    symbolCount?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst LineGraph = ({\r\n                       type,\r\n                       dataSource,\r\n                       height,\r\n                       labelX,\r\n                       labelY,\r\n                       unitX,\r\n                       unitY,\r\n                       yMin = 'auto',\r\n                       yMax = 'auto',\r\n                       curveType = 'linear',\r\n                       referenceX,\r\n                       fractionDigits = 2,\r\n                       symbolCount = 12,\r\n                       ...rest\r\n                   }: LineGraphProps) => {\r\n\r\n    const [lineCount, setLineCount] = useState<number>(0);\r\n    const [horizontalGridLines, setHorizontalGridLines] = useState<boolean>(true);\r\n    const [verticalGridLines, setVerticalGridLines] = useState<boolean>(true);\r\n    const [legendDataKey, setLegendDataKey] = useState<string | null>(null);\r\n    const [lineWidth, setLineWidth] = useState<number>(2);\r\n    const [symbolSize, setSymbolSize] = useState<number>(1);\r\n\r\n    //init\r\n    useEffect(() => {\r\n        if (!dataSource) {\r\n            return;\r\n        }\r\n        const len = Array.isArray(dataSource) ? Object.keys(dataSource[0]).length - 1 : Object.keys(dataSource).length - 1;\r\n        if (lineCount !== len) {\r\n            setLineCount(len);\r\n        }\r\n    }, [dataSource]);\r\n\r\n    const getLines = useMemo(() => {\r\n        const lines = [];\r\n        let defaultSymbol;\r\n        for (let i = 0; i < lineCount; i++) {\r\n            let name = '';\r\n            switch (type) {\r\n                case GraphDataType.MonthlyTemperatures:\r\n                    name = i === 0 ? `Low` : 'High';\r\n                    break;\r\n                case GraphDataType.SunshineHours:\r\n                    name = 'Sunshine';\r\n                    break;\r\n                case GraphDataType.HourlyTemperatures:\r\n                    name = 'Temperature';\r\n                    break;\r\n                case GraphDataType.DaylightData:\r\n                    name = 'Daylight';\r\n                    break;\r\n                case GraphDataType.ClearnessData:\r\n                    name = 'Clearness';\r\n                    break;\r\n                case GraphDataType.DailyRadiationSensorData:\r\n                case GraphDataType.YearlyRadiationSensorData:\r\n                    name = 'Radiation' + (i + 1);\r\n                    break;\r\n            }\r\n            const opacity = legendDataKey === null ? 1 : (legendDataKey === name ? 1 : 0.25);\r\n            const symbol = createSymbol(\r\n                SYMBOLS[i],\r\n                symbolSize,\r\n                symbolCount,\r\n                opacity\r\n            );\r\n            if (i === 0) defaultSymbol = symbol;\r\n            lines.push(\r\n                <Line\r\n                    key={i}\r\n                    type={curveType}\r\n                    name={name}\r\n                    dataKey={name}\r\n                    stroke={PRESET_COLORS[i]}\r\n                    opacity={opacity}\r\n                    strokeWidth={lineWidth}\r\n                    dot={symbolCount > 0 ? (symbol ? symbol : defaultSymbol) : false}\r\n                    isAnimationActive={false}\r\n                />,\r\n            );\r\n        }\r\n        return lines;\r\n    }, [lineCount, lineWidth, symbolCount, symbolSize, legendDataKey]);\r\n\r\n    // @ts-ignore\r\n    const onMouseDown = (e) => {\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseEnterLegend = (o) => {\r\n        setLegendDataKey(o.dataKey);\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseLeaveLegend = (o) => {\r\n        setLegendDataKey(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {dataSource && (\r\n                // need two div wrappers to disable the responsiveness of ResponsiveContainer\r\n                <div id={'line-graph-' + labelX + '-' + labelY}\r\n                     style={{width: '100%', height: `${height}%`, position: 'relative'}}>\r\n                    <div\r\n                        style={{\r\n                            userSelect: 'none',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0\r\n                        }}\r\n                    >\r\n                        <ResponsiveContainer width=\"100%\" height={`100%`}>\r\n                            <LineChart\r\n                                data={dataSource}\r\n                                onMouseDown={onMouseDown}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 30,\r\n                                }}>\r\n                                <Tooltip formatter={(value: number) => value.toFixed(fractionDigits) + ' ' + unitY}/>\r\n                                <CartesianGrid\r\n                                    vertical={verticalGridLines}\r\n                                    horizontal={horizontalGridLines}\r\n                                    stroke={\"rgba(128, 128, 128, 0.3)\"}\r\n                                />\r\n                                <ReferenceLine\r\n                                    x={referenceX}\r\n                                    stroke=\"orange\"\r\n                                    strokeWidth={2}\r\n                                />\r\n                                <XAxis dataKey={labelX}>\r\n                                    <Label\r\n                                        value={labelX + (unitX ? ' (' + unitX + ')' : '')}\r\n                                        offset={0}\r\n                                        position=\"bottom\"\r\n                                    />\r\n                                </XAxis>\r\n                                <YAxis domain={[yMin, yMax]}>\r\n                                    <Label\r\n                                        dx={-15}\r\n                                        value={labelY + (unitY ? ' (' + unitY + ')' : '')}\r\n                                        offset={0}\r\n                                        angle={-90}\r\n                                        position=\"center\"\r\n                                    />\r\n                                </YAxis>\r\n                                {getLines}\r\n                                {lineCount > 1 &&\r\n                                <Legend iconType='plainline'\r\n                                        verticalAlign='top'\r\n                                        height={36}\r\n                                        onMouseLeave={onMouseLeaveLegend}\r\n                                        onMouseEnter={onMouseEnterLegend}/>}\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LineGraph;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useState} from 'react';\r\nimport BarGraph from \"../components/barGraph\";\r\nimport LineGraph from '../components/lineGraph';\r\nimport {GraphDataType} from \"../types\";\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {MONTHS} from \"../constants\";\r\nimport {Util} from \"../util\";\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 500px;\r\n  height: 500px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface WeatherPanelProps {\r\n\r\n    city: string | null;\r\n    graphs: GraphDataType[];\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst WeatherPanel = ({\r\n                          city,\r\n                          graphs,\r\n                          ...rest\r\n                      }: WeatherPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getWeather = useStore(state => state.getWeather);\r\n    const now = useStore(state => state.date);\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const responsiveHeight = useMemo(() => {\r\n        return graphs ? Math.floor(100 / graphs.length) : 100;\r\n    }, [graphs]);\r\n\r\n    const getData = useMemo(() => {\r\n        if (!graphs) {\r\n            return;\r\n        }\r\n        const result: any = {};\r\n        if (city) {\r\n            const weather = getWeather(city);\r\n            if (weather) {\r\n                graphs.forEach(g => {\r\n                    result[g] = [];\r\n                    switch (g) {\r\n                        case GraphDataType.MonthlyTemperatures:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Low: weather.lowestTemperatures[i],\r\n                                        High: weather.highestTemperatures[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                        case GraphDataType.SunshineHours:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Sunshine: weather.sunshineHours[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    }, [graphs, city]);\r\n\r\n    const yNames = ['Temperature', 'Temperature', 'Sunshine'];\r\n    const yUnits = ['°C', '°C', 'Hours'];\r\n    const referenceX = MONTHS[Math.floor(Util.daysIntoYear(now) / 365 * 12)];\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Weather: {city}</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showWeatherPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <>\r\n                        {graphs.map(g => {\r\n                            if (g === GraphDataType.SunshineHours) {\r\n                                return (\r\n                                    <BarGraph\r\n                                        key={g}\r\n                                        type={g}\r\n                                        dataSource={getData[g]}\r\n                                        height={responsiveHeight}\r\n                                        labelX={'Month'}\r\n                                        labelY={yNames[g]}\r\n                                        unitY={yUnits[g]}\r\n                                        yMin={0}\r\n                                        fractionDigits={0}\r\n                                        referenceX={referenceX}\r\n                                        color={'#FFD700'}\r\n                                        {...rest}\r\n                                    />\r\n                                );\r\n                            }\r\n                            return (\r\n                                <LineGraph\r\n                                    key={g}\r\n                                    type={g}\r\n                                    dataSource={getData[g]}\r\n                                    height={responsiveHeight}\r\n                                    labelX={'Month'}\r\n                                    labelY={yNames[g]}\r\n                                    unitY={yUnits[g]}\r\n                                    fractionDigits={0}\r\n                                    referenceX={referenceX}\r\n                                    {...rest}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </>\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n\r\n};\r\n\r\nexport default WeatherPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport LineGraph from '../components/lineGraph';\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {GraphDataType} from \"../types\";\r\nimport {MONTHS} from \"../constants\";\r\nimport {Util} from \"../util\";\r\nimport BarGraph from \"../components/barGraph\";\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 500px;\r\n  height: 650px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface YearlyLightSensorPanelProps {\r\n\r\n    city: string | null;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst YearlyLightSensorPanel = ({\r\n                                    city,\r\n                                    ...rest\r\n                                }: YearlyLightSensorPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const sensorData = useStore(state => state.yearlyLightSensorData);\r\n    const now = useStore(state => state.date);\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const responsiveHeight = 100;\r\n    const referenceX = MONTHS[Math.floor(Util.daysIntoYear(now) / 365 * 12)];\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Light Sensor: {city}</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showYearlyLightSensorPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <LineGraph\r\n                        type={GraphDataType.DaylightData}\r\n                        dataSource={sensorData.map(e => ({Month: e.Month, Daylight: e.Daylight}))}\r\n                        height={responsiveHeight}\r\n                        labelX={'Month'}\r\n                        labelY={'Daylight'}\r\n                        unitY={'Hours'}\r\n                        yMin={0}\r\n                        curveType={'natural'}\r\n                        fractionDigits={1}\r\n                        referenceX={referenceX}\r\n                        {...rest}\r\n                    />\r\n                    <BarGraph\r\n                        type={GraphDataType.ClearnessData}\r\n                        dataSource={sensorData.map(e => ({Month: e.Month, Clearness: e.Clearness}))}\r\n                        height={responsiveHeight}\r\n                        labelX={'Month'}\r\n                        labelY={'Clearness'}\r\n                        unitY={'%'}\r\n                        yMin={0}\r\n                        yMax={100}\r\n                        fractionDigits={1}\r\n                        referenceX={referenceX}\r\n                        color={'#66CDAA'}\r\n                        {...rest}\r\n                    />\r\n                    <LineGraph\r\n                        type={GraphDataType.YearlyRadiationSensorData}\r\n                        dataSource={sensorData.map(({Daylight, Clearness, ...item}) => item)}\r\n                        height={responsiveHeight}\r\n                        labelX={'Month'}\r\n                        labelY={'Radiation'}\r\n                        unitY={'kWh/m²/day'}\r\n                        yMin={0}\r\n                        curveType={'natural'}\r\n                        fractionDigits={2}\r\n                        referenceX={referenceX}\r\n                        {...rest}\r\n                    />\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n\r\n};\r\n\r\nexport default YearlyLightSensorPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport LineGraph from '../components/lineGraph';\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {GraphDataType} from \"../types\";\r\nimport moment from \"moment\";\r\nimport ReactDraggable, {DraggableEventHandler} from 'react-draggable';\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 600px;\r\n  height: 300px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface DailyLightSensorPanelProps {\r\n\r\n    city: string | null;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst DailyLightSensorPanel = ({\r\n                                   city,\r\n                                   ...rest\r\n                               }: DailyLightSensorPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const sensorData = useStore(state => state.dailyLightSensorData);\r\n    const now = new Date(useStore(state => state.date));\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const responsiveHeight = 100;\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Light Sensor: {city} | {moment(now).format('MM/DD')}</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showDailyLightSensorPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <LineGraph\r\n                        type={GraphDataType.DailyRadiationSensorData}\r\n                        dataSource={sensorData}\r\n                        height={responsiveHeight}\r\n                        labelX={'Hour'}\r\n                        labelY={'Radiation'}\r\n                        unitY={'kWh/m²/day'}\r\n                        yMin={0}\r\n                        curveType={'linear'}\r\n                        fractionDigits={2}\r\n                        symbolCount={24}\r\n                        referenceX={now.getHours()}\r\n                        {...rest}\r\n                    />\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n\r\n};\r\n\r\nexport default DailyLightSensorPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect} from \"react\";\r\nimport {calculateDiffuseAndReflectedRadiation, calculatePeakRadiation, getSunDirection} from \"./sunTools\";\r\nimport {Object3D, Raycaster, Vector3} from \"three\";\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DatumEntry, ObjectType} from \"../types\";\r\nimport {Util} from \"../util\";\r\nimport {AirMass} from \"./analysisConstants\";\r\nimport {MONTHS} from \"../constants\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\n\r\nexport interface SimulationProps {\r\n\r\n    city: string | null;\r\n    dailyLightSensorDataFlag: boolean;\r\n    yearlyLightSensorDataFlag: boolean;\r\n\r\n}\r\n\r\nconst Simulation = ({\r\n                        city,\r\n                        dailyLightSensorDataFlag,\r\n                        yearlyLightSensorDataFlag,\r\n                    }: SimulationProps) => {\r\n\r\n    const getWorld = useStore(state => state.getWorld);\r\n    const getWeather = useStore(state => state.getWeather);\r\n    const now = new Date(useStore(state => state.date));\r\n    const latitude = useStore(state => state.latitude);\r\n    const timesPerHour = useStore(state => state.timesPerHour);\r\n    const setDailyLightSensorData = useStore(state => state.setDailyLightSensorData);\r\n    const setYearlyLightSensorData = useStore(state => state.setYearlyLightSensorData);\r\n    const {scene} = useThree();\r\n    const ray = new Raycaster();\r\n    const weather = getWeather(city ?? 'Boston MA, USA');\r\n    const ground = getWorld('default').ground;\r\n    const elements = getWorld('default').elements;\r\n    const elevation = city ? getWeather(city).elevation : 0;\r\n    const interval = 60 / timesPerHour;\r\n\r\n    useEffect(() => {\r\n        if (elements && elements.length > 0) {\r\n            collectAllDailyLightSensorData();\r\n        }\r\n    }, [dailyLightSensorDataFlag]);\r\n\r\n    useEffect(() => {\r\n        if (elements && elements.length > 0) {\r\n            collectAllYearlyLightSensorData();\r\n        }\r\n    }, [yearlyLightSensorDataFlag]);\r\n\r\n    const inShadow = (time: Date, position: Vector3, sunDirection: Vector3) => {\r\n        // convert the position and direction from physics model to the coordinate system of three.js\r\n        ray.set(Util.modelToView(position), Util.modelToView(sunDirection));\r\n        const content = scene.children.filter(c => c.name === 'Content');\r\n        if (content.length > 0) {\r\n            const components = content[0].children;\r\n            const objects: Object3D[] = [];\r\n            for (const c of components) {\r\n                objects.push(...c.children.filter(x => x.castShadow));\r\n            }\r\n            const intersects = ray.intersectObjects(objects);\r\n            return intersects.length > 0;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const collectAllDailyLightSensorData = () => {\r\n        const map = new Map<string, number[]>();\r\n        let index = 0;\r\n        for (const e of elements) {\r\n            if (e.type === ObjectType.Sensor) {\r\n                map.set('Radiation' + (index + 1), collectDailyLightSensorData(e as SensorModel));\r\n                index++;\r\n            }\r\n        }\r\n        const data = [];\r\n        for (let i = 0; i < 24; i++) {\r\n            const datum: DatumEntry = {};\r\n            datum['Hour'] = i;\r\n            for (let k = 1; k <= index; k++) {\r\n                const key = 'Radiation' + k;\r\n                datum[key] = map.get(key)?.[i];\r\n            }\r\n            data.push(datum);\r\n        }\r\n        setDailyLightSensorData(data);\r\n    }\r\n\r\n    const collectDailyLightSensorData = (sensor: SensorModel) => {\r\n        const position = new Vector3(sensor.cx, sensor.cy, sensor.cz);\r\n        const normal = new Vector3(sensor.normal[0], sensor.normal[1], sensor.normal[2]);\r\n        const result = new Array(24).fill(0);\r\n        const year = now.getFullYear();\r\n        const month = now.getMonth();\r\n        const date = now.getDate();\r\n        const dayOfYear = Util.dayOfYear(now);\r\n        let count = 0;\r\n        for (let i = 0; i < 24; i++) {\r\n            for (let j = 0; j < timesPerHour; j++) {\r\n                const cur = new Date(year, month, date, i, j * interval);\r\n                const sunDirection = getSunDirection(cur, latitude);\r\n                if (sunDirection.z > 0) {\r\n                    // when the sun is out\r\n                    count++;\r\n                    const peakRadiation = calculatePeakRadiation(sunDirection, dayOfYear, elevation, AirMass.SPHERE_MODEL);\r\n                    const dot = normal.dot(sunDirection);\r\n                    if (dot > 0) {\r\n                        if (!inShadow(cur, position, sunDirection)) {\r\n                            // direct radiation\r\n                            result[i] += dot * peakRadiation;\r\n                        }\r\n                    }\r\n                    // indirect radiation\r\n                    result[i] += calculateDiffuseAndReflectedRadiation(ground, month, normal, peakRadiation);\r\n                }\r\n            }\r\n        }\r\n        // apply clearness and convert the unit of time step from minute to hour so that we get kWh\r\n        const daylight = count * interval / 60;\r\n        const clearness = weather.sunshineHours[month] / (30 * daylight);\r\n        return result.map(x => x * clearness / timesPerHour);\r\n    };\r\n\r\n    const collectAllYearlyLightSensorData = () => {\r\n        const resultArr = [];\r\n        for (const e of elements) {\r\n            if (e.type === ObjectType.Sensor) {\r\n                resultArr.push(collectYearlyLightSensorData(e as SensorModel));\r\n            }\r\n        }\r\n        const results = [];\r\n        for (let month = 0; month < 12; month++) {\r\n            const r: DatumEntry = {};\r\n            r['Month'] = MONTHS[month];\r\n            for (const [i, a] of resultArr.entries()) {\r\n                r['Daylight'] = a[month].Daylight;\r\n                r['Clearness'] = a[month].Clearness;\r\n                r['Radiation' + (i + 1)] = a[month].Radiation;\r\n            }\r\n            results.push(r);\r\n        }\r\n        setYearlyLightSensorData(results);\r\n    }\r\n\r\n    const collectYearlyLightSensorData = (sensor: SensorModel) => {\r\n        const data = [];\r\n        const position = new Vector3(sensor.cx, sensor.cy, sensor.cz);\r\n        const normal = new Vector3(sensor.normal[0], sensor.normal[1], sensor.normal[2]);\r\n        const year = now.getFullYear();\r\n        const date = 15;\r\n        for (let month = 0; month < 12; month++) {\r\n            const midMonth = new Date(year, month, date);\r\n            const dayOfYear = Util.dayOfYear(midMonth);\r\n            let total = 0;\r\n            let count = 0;\r\n            for (let hour = 0; hour < 24; hour++) {\r\n                for (let step = 0; step < timesPerHour; step++) {\r\n                    const cur = new Date(year, month, date, hour, step * interval);\r\n                    const sunDirection = getSunDirection(cur, latitude);\r\n                    if (sunDirection.z > 0) {\r\n                        // when the sun is out\r\n                        count++;\r\n                        const peakRadiation = calculatePeakRadiation(sunDirection, dayOfYear, elevation, AirMass.SPHERE_MODEL);\r\n                        const dot = normal.dot(sunDirection);\r\n                        if (dot > 0) {\r\n                            if (!inShadow(cur, position, sunDirection)) {\r\n                                // direct radiation\r\n                                total += dot * peakRadiation;\r\n                            }\r\n                        }\r\n                        // indirect radiation\r\n                        total += calculateDiffuseAndReflectedRadiation(ground, month, normal, peakRadiation);\r\n                    }\r\n                }\r\n            }\r\n            const daylight = count * interval / 60;\r\n            const clearness = weather.sunshineHours[midMonth.getMonth()] / (30 * daylight);\r\n            total *= clearness; // apply clearness\r\n            total /= timesPerHour; // convert the unit of timeStep from minute to hour so that we get kWh\r\n            data.push({\r\n                Month: MONTHS[month],\r\n                Daylight: daylight,\r\n                Clearness: clearness * 100,\r\n                Radiation: total\r\n            } as DatumEntry);\r\n        }\r\n        return data;\r\n    };\r\n\r\n    return <></>;\r\n\r\n};\r\n\r\nexport default Simulation;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport {Button, Space, Switch} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport styled from \"styled-components\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 4px;\r\n  left: 50px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nexport interface MainToolBarProps {\r\n    orbitControls?: OrbitControls;\r\n}\r\n\r\nconst MainToolBar = ({orbitControls}: MainToolBarProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const autoRotate = useStore(state => state.autoRotate);\r\n    const heliodon = useStore(state => state.showHeliodonPanel);\r\n\r\n    return (\r\n        <Container>\r\n            <Space direction='horizontal'>\r\n                <div>\r\n                    <span style={{paddingRight: '10px'}}>Spin</span>\r\n                    <Switch title={'Spin view'} checked={autoRotate} onChange={(checked) => {\r\n                        setCommonStore((state) => {\r\n                            state.autoRotate = checked;\r\n                        });\r\n                    }}/>\r\n                </div>\r\n                <div>\r\n                    <span style={{paddingRight: '10px', paddingLeft: '10px'}}>Heliodon</span>\r\n                    <Switch title={'Show heliodon'} checked={heliodon} onChange={(checked) => {\r\n                        setCommonStore((state) => {\r\n                            state.showHeliodonPanel = checked;\r\n                        });\r\n                    }}/>\r\n                </div>\r\n                <div>\r\n                    <Button type=\"primary\" title={'Reset view'} onClick={() => {\r\n                        if (orbitControls) {\r\n                            orbitControls.reset();\r\n                        }\r\n                    }}> Reset </Button>\r\n                </div>\r\n            </Space>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default MainToolBar;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nexport interface TeamProps {\r\n    top: number;\r\n    height?: number;\r\n    color?: string;\r\n}\r\n\r\nconst Team = ({top, height, color}: TeamProps) => {\r\n    const linePos = top + 56 + 'px';\r\n    const top110 = top + 110 + 'px';\r\n    const top250 = top + 220 + 'px';\r\n    return <div>\r\n        <div style={{\r\n            position: 'absolute',\r\n            borderRadius: '20px',\r\n            border: 'thin',\r\n            textAlign: 'center',\r\n            left: '15%',\r\n            right: '15%',\r\n            top: top + 'px',\r\n            height: (height ?? 300) + 'px'\r\n        }}>\r\n            <h2 style={{marginTop: '20px', color: color}}>This product is brought to you by</h2>\r\n            <p style={{fontSize: '12px', color: color}}>\r\n                <a target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://intofuture.org/aladdin-terms.html\"\r\n                   style={{color: color}}>\r\n                    Terms of Service\r\n                </a>\r\n                &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\r\n                <a target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://intofuture.org/aladdin-privacy.html\"\r\n                   style={{color: color}}>\r\n                    Privacy Policy\r\n                </a>\r\n            </p>\r\n        </div>\r\n        <div>\r\n            <hr style={{position: 'absolute', left: '10%', width: '80%', marginTop: linePos, color: color}}/>\r\n            <table style={{\r\n                position: 'absolute',\r\n                border: 'none',\r\n                top: top110,\r\n                left: '10%',\r\n                width: '80%',\r\n                fontSize: 'small',\r\n                color: color\r\n            }}>\r\n                <tbody>\r\n                <tr style={{\r\n                    verticalAlign: 'top'\r\n                }}>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Software</h3>\r\n                        Charles Xie<br/>\r\n                    </td>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Content</h3>\r\n                        Rundong Jiang<br/>\r\n                        Charles Xie<br/>\r\n                    </td>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Research</h3>\r\n                        Shannon Sung<br/>\r\n                        Charles Xie<br/>\r\n                    </td>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Support</h3>\r\n                        Rundong Jiang<br/>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <div style={{\r\n            position: 'absolute',\r\n            left: '10%',\r\n            marginRight: '10%',\r\n            top: top250,\r\n            fontSize: 'small',\r\n            textAlign: 'justify',\r\n            color: color\r\n        }}>The National Science Foundation (NSF) of the United States generously provided funding for the research\r\n            and development of this product through grant numbers 1918847, 2105695, and 2131097. Any opinions,\r\n            findings, and conclusions or recommendations expressed in this product, however, are those of the authors\r\n            and do not necessarily reflect the views of NSF.\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Team;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport Team from \"./team\";\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  top: 80px;\r\n  left: 10px;\r\n  display: flex;\r\n  width: 600px;\r\n  height: 400px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  z-index: 9;\r\n  border-radius: 10px;\r\n  background: dimgray;\r\n  box-shadow: 3px 3px 3px 3px black;\r\n`;\r\n\r\nexport interface AboutProps {\r\n    openAboutUs: (on: boolean) => void;\r\n}\r\n\r\nconst About = ({openAboutUs}: AboutProps) => {\r\n\r\n    return (\r\n        <Container>\r\n            <Team top={10} color={'antiquewhite'}/>\r\n            <div style={{\r\n                position: 'absolute',\r\n                fontSize: 'medium',\r\n                color: 'antiquewhite',\r\n                bottom: '10px'\r\n            }} onClick={() => {\r\n                openAboutUs(false);\r\n            }}>\r\n                Close\r\n            </div>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default About;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n *\r\n * @author Charles Xie\r\n */\r\n\r\nimport React, {Suspense, useEffect, useMemo, useRef, useState} from 'react';\r\nimport './app.css';\r\nimport {Canvas} from '@react-three/fiber';\r\nimport OrbitController from \"./orbitController\";\r\nimport Sky from \"./views/sky\";\r\nimport Axes from \"./views/axes\";\r\nimport Compass from \"./views/compass\";\r\nimport SceneContent from \"./sceneContent\";\r\nimport Ground from \"./views/ground\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {Euler, Vector3} from \"three\";\r\nimport Heliodon from \"./views/heliodon\";\r\nimport {Util} from \"./util\";\r\nimport {computeDeclinationAngle, computeHourAngle, computeSunLocation} from \"./analysis/sunTools\";\r\nimport aladdinLogo from './assets/aladdin-logo.png';\r\nimport ifiLogo from './assets/ifi-logo.png';\r\nimport MainMenu from \"./mainMenu\";\r\nimport GroundPanel from \"./panels/groundPanel\";\r\nimport HeliodonPanel from \"./panels/heliodonPanel\";\r\nimport {VERSION} from \"./constants\";\r\nimport {visitIFI} from \"./helpers\";\r\nimport AcceptCookie from \"./acceptCookie\";\r\nimport GroundImage from \"./views/groundImage\";\r\nimport {Dropdown} from \"antd\";\r\nimport ContextMenu from \"./contextMenu\";\r\nimport WeatherPanel from \"./panels/weatherPanel\";\r\nimport {GraphDataType} from \"./types\";\r\nimport YearlyLightSensorPanel from \"./panels/yearlyLightSensorPanel\";\r\nimport DailyLightSensorPanel from \"./panels/dailyLightSensorPanel\";\r\nimport Simulation from \"./analysis/simulation\";\r\nimport MainToolBar from \"./mainToolBar\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport About from \"./about\";\r\n\r\nconst App = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const worlds = useStore(state => state.worlds);\r\n    const getWorld = useStore(state => state.getWorld);\r\n    const createNewWorld = useStore(state => state.createNewWorld);\r\n    const loadWeatherData = useStore(state => state.loadWeatherData);\r\n    const getClosestCity = useStore(state => state.getClosestCity);\r\n\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const showDailyLightSensorPanel = useStore(state => state.showDailyLightSensorPanel);\r\n    const showYearlyLightSensorPanel = useStore(state => state.showYearlyLightSensorPanel);\r\n    const autoRotate = useStore(state => state.autoRotate);\r\n\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const enableOrbitController = useStore(state => state.enableOrbitController);\r\n    const groundImage = useStore(state => state.groundImage);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const theme = useStore(state => state.theme);\r\n    const heliodon = useStore(state => state.heliodon);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const weatherData = useStore(state => state.weatherData);\r\n    const now = new Date(useStore(state => state.date));\r\n\r\n    const [hourAngle, setHourAngle] = useState<number>(0);\r\n    const [declinationAngle, setDeclinationAngle] = useState<number>(0);\r\n    const [sunlightDirection, setSunlightDirection] = useState<Vector3>(new Vector3(0, 2, 2));\r\n    const [animateSun, setAnimateSun] = useState<boolean>(false);\r\n    const [city, setCity] = useState<string | null>('Boston MA, USA');\r\n    const [dailyLightSensorDataFlag, setDailyLightSensorDataFlag] = useState<boolean>(false);\r\n    const [yearlyLightSensorDataFlag, setYearlyLightSensorDataFlag] = useState<boolean>(false);\r\n    const [aboutUs, setAboutUs] = useState(false);\r\n\r\n    const world = worlds['default']; // currently we have only one world, which is default\r\n    const radius = 10;\r\n    const orbitControlsRef = useRef<OrbitControls>();\r\n\r\n    useEffect(() => {\r\n        const defaultWorld = getWorld('default');\r\n        if (!defaultWorld) {\r\n            createNewWorld();\r\n        }\r\n        loadWeatherData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setSunlightDirection(computeSunLocation(radius, hourAngle, declinationAngle, Util.toRadians(latitude))\r\n            .applyEuler(new Euler(-Math.PI / 2, 0, 0)));\r\n    }, [latitude, hourAngle, declinationAngle]);\r\n\r\n    useEffect(() => {\r\n        setCity(getClosestCity(latitude, longitude));\r\n    }, [latitude, longitude, weatherData]);\r\n\r\n    const nowString = now.toString();\r\n    useMemo(() => {\r\n        setHourAngle(computeHourAngle(now));\r\n        setDeclinationAngle(computeDeclinationAngle(now));\r\n    }, [nowString]);\r\n\r\n    const cameraPosition = new Vector3(0, 0, 5);\r\n    const panCenter = new Vector3();\r\n    if (world) {\r\n        cameraPosition.set(world.cameraPosition.x, world.cameraPosition.y, world.cameraPosition.z);\r\n        panCenter.set(world.panCenter.x, world.panCenter.y, world.panCenter.z);\r\n    }\r\n\r\n    const setGrid = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.grid = on;\r\n        });\r\n    };\r\n\r\n    const setGroundImage = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.groundImage = on;\r\n        });\r\n    };\r\n\r\n    const setGroundColor = (color: string) => {\r\n        setCommonStore(state => {\r\n            state.groundColor = color;\r\n        });\r\n    };\r\n\r\n    const setHeliodon = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.heliodon = on;\r\n        });\r\n    };\r\n\r\n    // animation state should not be persisted\r\n    const setSunAnimation = (on: boolean) => {\r\n        setAnimateSun(on);\r\n    };\r\n\r\n    const changeDate = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setFullYear(date.getFullYear());\r\n        d.setMonth(date.getMonth());\r\n        d.setDate(date.getDate());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeTime = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setHours(date.getHours(), date.getMinutes());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeLatitude = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n        });\r\n    };\r\n\r\n    const changeLatitudeAndRemoveAddress = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n            state.address = '';\r\n        });\r\n    };\r\n\r\n    const changeLongitude = (longitude: number) => {\r\n        setCommonStore(state => {\r\n            state.longitude = longitude;\r\n        });\r\n    };\r\n\r\n    const changeMapZoom = (zoom: number) => {\r\n        setCommonStore(state => {\r\n            state.mapZoom = zoom;\r\n        });\r\n    };\r\n\r\n    const changeMapTilt = (tilt: number) => {\r\n        setCommonStore(state => {\r\n            state.mapTilt = tilt;\r\n        });\r\n    };\r\n\r\n    const changeMapType = (type: string) => {\r\n        setCommonStore(state => {\r\n            state.mapType = type;\r\n        });\r\n    };\r\n\r\n    const sunAboveHorizon = sunlightDirection.y > 0;\r\n\r\n    const collectDailyLightSensorData = () => {\r\n        setCommonStore(state => {\r\n            state.timesPerHour = 20;\r\n        });\r\n        setDailyLightSensorDataFlag(!dailyLightSensorDataFlag);\r\n        setCommonStore(state => {\r\n            state.showDailyLightSensorPanel = true;\r\n        });\r\n    };\r\n\r\n    const collectYearlyLightSensorData = async () => {\r\n        setCommonStore(state => {\r\n            state.timesPerHour = 20;\r\n        });\r\n        setYearlyLightSensorDataFlag(!yearlyLightSensorDataFlag);\r\n        setCommonStore(state => {\r\n            state.showYearlyLightSensorPanel = true;\r\n        });\r\n    };\r\n\r\n    const openAboutUs = (on: boolean) => {\r\n        setAboutUs(on);\r\n    };\r\n\r\n    console.log('x')\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div style={{\r\n                backgroundColor: 'lightblue',\r\n                height: '72px',\r\n                paddingTop: '10px',\r\n                fontSize: '30px'\r\n            }}>\r\n                <img alt='Aladdin Logo' src={aladdinLogo} height='50px' style={{verticalAlign: 'middle'}}/>\r\n                <span style={{paddingLeft: '20px', verticalAlign: 'middle'}}>Aladdin</span>\r\n            </div>\r\n            <div style={{\r\n                position: 'absolute',\r\n                bottom: '10px',\r\n                left: '10px',\r\n                zIndex: 999,\r\n                fontSize: '12px',\r\n                color: 'white'\r\n            }}>\r\n                <img alt='IFI Logo'\r\n                     src={ifiLogo}\r\n                     height='40px'\r\n                     style={{verticalAlign: 'bottom', cursor: 'pointer'}}\r\n                     title={'Go to Institute for Future Intelligence'}\r\n                     onClick={visitIFI}/>\r\n                &nbsp;&nbsp; Institute for Future Intelligence, &copy;{new Date().getFullYear()}. Version {VERSION}\r\n            </div>\r\n            <MainMenu\r\n                collectDailyLightSensorData={collectDailyLightSensorData}\r\n                collectYearlyLightSensorData={collectYearlyLightSensorData}\r\n                openAboutUs={openAboutUs}\r\n            />\r\n            <MainToolBar orbitControls={orbitControlsRef.current}/>\r\n            {showGroundPanel &&\r\n            <GroundPanel grid={grid}\r\n                         groundImage={groundImage}\r\n                         groundColor={groundColor}\r\n                         setGrid={setGrid}\r\n                         setGroundImage={setGroundImage}\r\n                         setGroundColor={setGroundColor}\r\n                         changeLatitude={changeLatitude}\r\n                         changeLongitude={changeLongitude}\r\n                         changeMapZoom={changeMapZoom}\r\n                         changeMapTilt={changeMapTilt}\r\n                         changeMapType={changeMapType}\r\n            />}\r\n            {showHeliodonPanel &&\r\n            <HeliodonPanel latitude={latitude}\r\n                           date={now}\r\n                           heliodon={heliodon}\r\n                           animateSun={animateSun}\r\n                           changeDate={changeDate}\r\n                           changeTime={changeTime}\r\n                           changeLatitude={changeLatitudeAndRemoveAddress}\r\n                           setHeliodon={setHeliodon}\r\n                           setSunAnimation={setSunAnimation}\r\n            />}\r\n            {showYearlyLightSensorPanel && <YearlyLightSensorPanel city={city}/>}\r\n            {showDailyLightSensorPanel && <DailyLightSensorPanel city={city}/>}\r\n            {showWeatherPanel &&\r\n            <WeatherPanel city={city}\r\n                          graphs={[GraphDataType.MonthlyTemperatures, GraphDataType.SunshineHours]}\r\n            />}\r\n            {aboutUs && <About openAboutUs={openAboutUs}/>}\r\n            <Dropdown key={'canvas-context-menu'}\r\n                      trigger={['contextMenu']}\r\n                      overlay={\r\n                          <ContextMenu\r\n                              city={city}\r\n                              collectDailyLightSensorData={collectDailyLightSensorData}\r\n                              collectYearlyLightSensorData={collectYearlyLightSensorData}\r\n                          />\r\n                      }>\r\n                <div>\r\n                    <Canvas shadows={true}\r\n                            camera={{\r\n                                position: cameraPosition,\r\n                                fov: 90\r\n                            }}\r\n                            style={{height: 'calc(100vh - 70px)', backgroundColor: 'black'}}>\r\n                        <OrbitController\r\n                            enabled={enableOrbitController}\r\n                            autoRotate={autoRotate}\r\n                            panCenter={panCenter}\r\n                            orbitControlsRef={orbitControlsRef}\r\n                        />\r\n                        <Suspense fallback={null}>\r\n                            <ambientLight intensity={0.25} name={'Ambient Light'}/>\r\n                            <directionalLight\r\n                                name={'Directional Light'}\r\n                                color='white'\r\n                                position={[sunlightDirection.x, sunlightDirection.y, sunlightDirection.z]}\r\n                                intensity={sunAboveHorizon ? 0.5 : 0}\r\n                                castShadow\r\n                                shadow-mapSize-height={512}\r\n                                shadow-mapSize-width={512}\r\n                            />\r\n                            {(grid || !enableOrbitController) &&\r\n                            <gridHelper name={'Grid'} args={[500, 100, 'gray', 'gray']}/>\r\n                            }\r\n                            <Compass/>\r\n                            {/*<Obj/>*/}\r\n                            <Simulation city={city}\r\n                                        dailyLightSensorDataFlag={dailyLightSensorDataFlag}\r\n                                        yearlyLightSensorDataFlag={yearlyLightSensorDataFlag}/>\r\n                            {axes && <Axes/>}\r\n                            <Ground/>\r\n                            {groundImage && <GroundImage/>}\r\n                            <Sky theme={theme} night={!sunAboveHorizon}/>\r\n                            {heliodon &&\r\n                            <Heliodon\r\n                                hourAngle={hourAngle}\r\n                                declinationAngle={declinationAngle}\r\n                                radius={radius}\r\n                                date={now}\r\n                                latitude={Util.toRadians(latitude)}\r\n                            />}\r\n                            {world && <SceneContent world={world}/>}\r\n                        </Suspense>\r\n                    </Canvas>\r\n                </div>\r\n            </Dropdown>\r\n            <AcceptCookie/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}