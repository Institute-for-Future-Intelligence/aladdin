{"version":3,"sources":["types.ts","resources/weather.csv","util.ts","stores/DefaultWorldModel.ts","stores/common.ts","analysis/analysisConstants.ts","orbitController.tsx","resources/daysky.jpg","resources/nightsky.jpg","resources/desert.jpg","resources/desert-night.jpg","resources/grassland.jpg","resources/grassland-night.jpg","views/sky.tsx","views/axes.tsx","assets/compass.obj","fonts/helvetiker_regular.typeface.fnt","views/compass.tsx","constants.ts","views/foundation.tsx","views/sensor.tsx","views/cuboid.tsx","elementsRenderer.tsx","views/ground.tsx","assets/menu.svg","analysis/sunTools.ts","views/heliodon.tsx","assets/aladdin-logo.png","assets/ifi-logo.png","components/symbols.tsx","mainMenu.tsx","components/maps.tsx","components/spinner.tsx","panels/groundPanel.tsx","panels/heliodonPanel.tsx","helpers.ts","acceptCookie.tsx","views/groundImage.tsx","contextMenu.tsx","components/barGraph.tsx","components/lineGraph.tsx","panels/weatherPanel.tsx","panels/yearlyLightSensorPanel.tsx","panels/dailyLightSensorPanel.tsx","analysis/simulation.tsx","mainToolBar.tsx","team.tsx","about.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["GraphDataType","Theme","ObjectType","ActionType","MoveHandleType","ResizeHandleType","IntersectionPlaneType","Util","Vector3","x","Math","abs","ZERO_TOLERANCE","PI","to","from","y","z","v","degrees","radians","sphereCoords","a","cos","sin","set","lng1","lat1","lng2","lat2","toRadians","acos","date","dayOfYear","Date","start","getFullYear","diff","getTime","floor","extend","TextSprite","OrbitControls","DefaultWorldModel","name","cameraPosition","panCenter","ground","this","albedo","thermalDiffusivity","snowReflectionFactors","Array","fill","elements","e1","type","Foundation","cx","cy","lx","ly","lz","id","e2","Cuboid","cz","e3","Sensor","normal","showLabel","light","heatFlux","push","enableMapSet","AirMass","useStore","create","devtools","persist","get","api","immerSet","fn","produce","defaultWorldModel","defaultElements","getElements","world","showGroundPanel","showHeliodonPanel","showWeatherPanel","showDailyLightSensorPanel","showYearlyLightSensorPanel","autoRotate","grid","axes","groundImage","groundColor","theme","heliodon","address","latitude","longitude","mapZoom","mapType","mapTilt","mapWeatherStations","toString","weatherData","timesPerHour","yearlyLightSensorData","setYearlyLightSensorData","data","state","dailyLightSensorData","setDailyLightSensorData","enableOrbitController","clickObjectType","moveHandleType","resizeHandleType","resizeAnchor","Vector2","getSelectedElement","e","selected","getElementById","selectNone","updateElementById","newProps","entries","i","setElementPosition","setElementSize","loadWeatherData","Papa","parse","weather","download","complete","results","row","isArray","length","lows","highs","sun","parseFloat","trim","wm","city","country","elevation","lowestTemperatures","highestTemperatures","sunshineHours","getWeather","location","getClosestCity","lat","lng","distance","min","Number","MAX_VALUE","wd","hasOwnProperty","getDistance","OrbitController","enabled","orbitControlsRef","setCommonStore","useThree","camera","domElement","gl","controls","useRef","useEffect","c","current","target","addEventListener","onInteractionEnd","update","removeEventListener","w","position","useFrame","ref","args","enableRotate","enablePan","enableZoom","enableDamping","maxAzimuthAngle","Infinity","minAzimuthAngle","maxPolarAngle","HALF_PI","minPolarAngle","Sky","night","props","meshRef","texture","useMemo","loader","TextureLoader","load","DesertNightSkyImage","DesertDaySkyImage","GrasslandNightSkyImage","GrasslandDaySkyImage","DefaultNightSkyImage","DefaultDaySkyImage","clickSky","intersections","object","scale","onContextMenu","onClick","map","side","BackSide","opacity","color","Axes","lineWidth","endPoint","Line","points","Compass","model","useLoader","OBJLoader","compassObj","font","FontLoader","helvetikerFont","mesh","textGeometryParams","height","size","textMaterial","MeshBasicMaterial","compassMaterial","unproject","rotation","Euler","material","PRESET_COLORS","MONTHS","MOVE_HANDLE_OFFSET","MOVE_HANDLE_RADIUS","RESIZE_HANDLE_SIZE","lineColor","useState","hovered","setHovered","hoveredHandle","setHoveredHandle","baseRef","resizeHandleLLRef","resizeHandleULRef","resizeHandleLRRef","resizeHandleURRef","moveHandleLowerRef","moveHandleUpperRef","moveHandleLeftRef","moveHandleRightRef","positionLL","positionUL","positionLR","positionUR","selectMe","action","eventObject","Move","Resize","hoverHandle","handle","Upper","Lower","Left","Right","style","cursor","noHoverHandle","h","castShadow","receiveShadow","Select","onPointerOver","onPointerOut","onPointerDown","onPointerUp","onPointerMove","attach","LowerLeft","setVector2","UpperLeft","LowerRight","UpperRight","text","fontSize","fontFace","textHeight","handleRef","element","lit","resizeHandleLLTopRef","resizeHandleULTopRef","resizeHandleLRTopRef","resizeHandleURTopRef","resizeHandleLLBotRef","resizeHandleULBotRef","resizeHandleLRBotRef","resizeHandleURBotRef","positionLLTop","positionULTop","positionLRTop","positionURTop","positionLLBot","positionULBot","positionLRBot","positionURBot","moveHandleLowerFaceRef","moveHandleUpperFaceRef","moveHandleLeftFaceRef","moveHandleRightFaceRef","moveHandleTopFaceRef","positionLowerFace","positionUpperFace","positionLeftFace","positionRightFace","positionTopFace","Top","LowerLeftTop","UpperLeftTop","LowerRightTop","UpperRightTop","ElementsRenderer","filter","Ground","updateElement","grab","setGrab","groundPlaneRef","horizontalPlaneRef","verticalPlaneRef","ray","Raycaster","intersectionPlaneType","intersectionPlanePosition","intersectionPlaneAngle","Horizontal","setVector","setEuler","Vertical","visible","DoubleSide","intersects","mouse","offsetX","clientWidth","offsetY","clientHeight","setFromCamera","intersectObjects","p","point","max","ASHRAE_C","_defs","_path","_path2","_path3","_path4","_path5","_path6","TILT_ANGLE","computeDeclinationAngle","days","TWO_PI","computeHourAngle","getHours","getMinutes","getSunDirection","computeSunLocation","normalize","radius","hourAngle","declinationAngle","cosDec","sinDec","cosLat","sinLat","cosHou","sinHou","altitudeAngle","asin","xAzm","yAzm","azimuthAngle","atan2","coords","sphericalToCartesianZ","calculatePeakRadiation","sunDirection","altitude","airMassType","b","getExtraterrestrialRadiation","pow","zenithAngle","NONE","KASTEN_YOUNG","angleTo","UNIT_VECTOR_POS_Z","r","sqrt","computeAirMass","calculateDiffuseAndReflectedRadiation","month","peakRadiation","result","dot","viewFactorWithSky","viewFactorWithGround","isZero","Heliodon","basePoints","tickPoints","step","counter","angle","theta","width","basePositions","Float32Array","baseNormals","baseColors","j","sunPathPoints","getSunPathPointsByDate","d","pointArraySunPaths","dMin","delta","arr","sunPosition","sunbeltGeometry","declinationStep","hourStep","geometry","BufferGeometry","verticesCount","vertices","indices","h2","d2","v1","v2","v3","v4","setFromPoints","setIndex","BufferAttribute","Uint16Array","attachObject","count","array","itemSize","vertexColors","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","index","Color","transparent","clippingPlanes","Plane","UNIT_VECTOR_POS_Y","SphereGeometry","_extends","Object","assign","arguments","source","key","prototype","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgMenu","_ref","svgRef","title","titleId","t","className","viewBox","xmlns","xmlnsXlink","Direction","ForwardRef","SubMenu","Menu","StyledMenuSVG","styled","MenuSVG","MainMenu","collectDailyLightSensorData","collectYearlyLightSensorData","openAboutUs","menu","Item","checked","onChange","overlay","trigger","containerStyle","border","Maps","setLatitude","setLongitude","setZoom","setTilt","setType","zoom","tilt","setMap","bounds","cities","updateFlag","setUpdateFlag","onLoad","useCallback","onUnmount","latLng","mapContainerStyle","mapTypeId","center","onBoundsChanged","getBounds","pos","google","maps","LatLng","contains","loadCities","onCenterChanged","getCenter","onZoomChanged","getZoom","onTiltChanged","getTilt","onMapTypeIdChanged","typeId","getMapTypeId","icon","path","SymbolPath","CIRCLE","strokeColor","strokeWeight","memo","Spin","libraries","Container","div","ColumnWrapper","Header","GroundPanel","setGrid","setGroundImage","setGroundColor","changeLatitude","changeLongitude","changeMapZoom","changeMapTilt","changeMapType","searchBox","curPosition","setCurPosition","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","axis","onDrag","ui","onStart","onStop","direction","padding","align","on","onChangeComplete","colorResult","hex","s","onPlacesChanged","places","getPlaces","formatted_address","placeholder","boxSizing","borderRadius","boxShadow","outline","textOverflow","toFixed","HeliodonPanel","animateSun","setHeliodon","setSunAnimation","changeDate","changeTime","requestRef","previousFrameTime","requestAnimationFrame","animate","cancelAnimationFrame","currentFrameTime","now","day","getDate","setHours","setDate","value","moment","toDate","format","marks","0","90","tooltipVisible","defaultValue","visitIFI","window","open","AcceptCookie","buttonText","cookieName","background","textAlign","zIndex","buttonStyle","expires","GroundImage","useTexture","StyledMenu","radioStyle","display","paddingLeft","lineHeight","ContextMenu","selectedElement","margin","Group","Default","Desert","Grassland","BarGraph","dataSource","labelX","labelY","unitX","unitY","yMin","yMax","fractionDigits","referenceX","dataSetCount","setDataSetCount","horizontalGridLines","verticalGridLines","legendDataKey","setLegendDataKey","len","getBars","bars","MonthlyTemperatures","SunshineHours","HourlyTemperatures","DaylightData","ClearnessData","DailyRadiationSensorData","YearlyRadiationSensorData","Bar","dataKey","isAnimationActive","userSelect","top","left","ResponsiveContainer","BarChart","onMouseDown","right","bottom","Tooltip","formatter","CartesianGrid","vertical","horizontal","stroke","ReferenceLine","strokeWidth","XAxis","Label","offset","YAxis","domain","dx","Legend","iconType","verticalAlign","onMouseLeave","o","onMouseEnter","SYMBOLS","CircleSymbol","numberOfSymbols","interval","round","SquareSymbol","TriangleSymbol","pointsString","UP","LEFT","RIGHT","DiamondSymbol","StarSymbol","HexagonSymbol","createSymbol","DOWN","LineGraph","curveType","symbolCount","lineCount","setLineCount","symbolSize","getLines","defaultSymbol","lines","symbol","LineChart","WeatherPanel","graphs","rest","responsiveHeight","getData","forEach","g","Month","Low","High","Sunshine","yNames","yUnits","daysIntoYear","YearlyLightSensorPanel","sensorData","Daylight","Clearness","DailyLightSensorPanel","Simulation","dailyLightSensorDataFlag","yearlyLightSensorDataFlag","scene","collectAllDailyLightSensorData","collectAllYearlyLightSensorData","inShadow","time","modelToView","content","children","components","objects","Map","datum","k","sensor","year","getMonth","cur","SPHERE_MODEL","daylight","clearness","resultArr","Radiation","midMonth","total","hour","MainToolBar","orbitControls","paddingRight","reset","Team","linePos","top110","top250","marginTop","rel","href","marginRight","About","App","setHourAngle","setDeclinationAngle","sunlightDirection","setSunlightDirection","setAnimateSun","setCity","setDailyLightSensorDataFlag","setYearlyLightSensorDataFlag","aboutUs","setAboutUs","applyEuler","nowString","sunAboveHorizon","console","log","backgroundColor","paddingTop","alt","src","aladdinLogo","ifiLogo","setFullYear","setMonth","shadows","fov","fallback","intensity","shadow-mapSize-height","shadow-mapSize-width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document"],"mappings":"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","file":"static/js/main.170550b9.chunk.js","sourcesContent":["/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {extend, Object3DNode} from \"@react-three/fiber\";\r\nimport TextSprite from \"three-spritetext\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\n// Extend makes these JSX elements (with the first character lower-cased)\r\nextend({TextSprite});\r\nextend({OrbitControls});\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            'textSprite': Object3DNode<TextSprite, typeof TextSprite>;\r\n            'orbitControls': Object3DNode<OrbitControls, typeof OrbitControls>;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface DatumEntry {\r\n    [key: string]: number | undefined | string;\r\n}\r\n\r\nexport enum GraphDataType {\r\n    HourlyTemperatures = 0,\r\n    MonthlyTemperatures = 1,\r\n    SunshineHours = 2,\r\n    DaylightData = 3,\r\n    ClearnessData = 4,\r\n    YearlyRadiationSensorData = 5,\r\n    DailyRadiationSensorData = 6,\r\n}\r\n\r\nexport enum Theme {\r\n    Default = 'Default',\r\n    Desert = 'Desert',\r\n    Grassland = 'Grassland',\r\n}\r\n\r\nexport enum ObjectType {\r\n    Sky = 'Sky',\r\n    Ground = 'Ground',\r\n    Foundation = 'Foundation',\r\n    Sensor = 'Sensor',\r\n    Cuboid = 'Cuboid',\r\n}\r\n\r\nexport enum ActionType {\r\n    Select = 'Select',\r\n    Move = 'Move',\r\n    Resize = 'Resize',\r\n}\r\n\r\nexport enum MoveHandleType {\r\n    Lower = 'Move Handle Lower',\r\n    Upper = 'Move Handle Upper',\r\n    Left = 'Move Handle Left',\r\n    Right = 'Move Handle Right',\r\n    Top = 'Move Handle Top',\r\n}\r\n\r\nexport enum ResizeHandleType {\r\n    LowerLeft = 'Resize Handle Lower Left',\r\n    UpperLeft = 'Resize Handle Upper Left',\r\n    LowerRight = 'Resize Handle Lower Right',\r\n    UpperRight = 'Resize Handle Upper Right',\r\n    LowerLeftTop = 'Resize Handle Lower Left Top',\r\n    UpperLeftTop = 'Resize Handle Upper Left Top',\r\n    LowerRightTop = 'Resize Handle Lower Right Top',\r\n    UpperRightTop = 'Resize Handle Upper Right Top',\r\n}\r\n\r\nexport enum IntersectionPlaneType {\r\n    Horizontal = 'Horizontal',\r\n    Vertical = 'Vertical',\r\n    Ground = 'Ground',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/weather.55ddf5ca.csv\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Euler, Vector2, Vector3} from \"three\";\r\n\r\nexport class Util {\r\n\r\n    static get UNIT_VECTOR_POS_X() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_X() {\r\n        return new Vector3(-1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Y() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Y() {\r\n        return new Vector3(0, -1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Z() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Z() {\r\n        return new Vector3(0, 0, -1);\r\n    }\r\n\r\n    static isZero(x: number) {\r\n        return Math.abs(x) < Util.ZERO_TOLERANCE;\r\n    }\r\n\r\n    static get ZERO_TOLERANCE() {\r\n        return 0.0001;\r\n    }\r\n\r\n    static get HALF_PI() {\r\n        return Math.PI / 2;\r\n    }\r\n\r\n    static get TWO_PI() {\r\n        return Math.PI * 2;\r\n    }\r\n\r\n    static copyVector(to: Vector3, from: Vector3) {\r\n        to.x = from.x;\r\n        to.y = from.y;\r\n        to.z = from.z;\r\n    }\r\n\r\n    static setVector(v: Vector3, x: number, y: number, z: number) {\r\n        v.x = x;\r\n        v.y = y;\r\n        v.z = z;\r\n    }\r\n\r\n    static copyVector2(to: Vector2, from: Vector2) {\r\n        to.x = from.x;\r\n        to.y = from.y;\r\n    }\r\n\r\n    static setVector2(v: Vector2, x: number, y: number) {\r\n        v.x = x;\r\n        v.y = y;\r\n    }\r\n\r\n    static setEuler(v: Euler, x: number, y: number, z: number) {\r\n        v.x = x;\r\n        v.y = y;\r\n        v.z = z;\r\n    }\r\n\r\n    // convert the coordinates from the model system to the view system\r\n    static modelToView(v: Vector3) {\r\n        return new Vector3(v.x, v.z, -v.y);\r\n    }\r\n\r\n    // convert the coordinates from the view system to the model system\r\n    static viewToModel(v: Vector3) {\r\n        return new Vector3(v.x, -v.z, v.y);\r\n    }\r\n\r\n    static toRadians(degrees: number) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    static toDegrees(radians: number) {\r\n        return radians * (180 / Math.PI);\r\n    }\r\n\r\n    static sphericalToCartesianZ(sphereCoords: Vector3) {\r\n        let a = sphereCoords.x * Math.cos(sphereCoords.z);\r\n        let x = a * Math.cos(sphereCoords.y);\r\n        let y = a * Math.sin(sphereCoords.y);\r\n        let z = sphereCoords.x * Math.sin(sphereCoords.z);\r\n        sphereCoords.set(x, y, z);\r\n        return sphereCoords;\r\n    }\r\n\r\n    // the spherical law of cosines: https://en.wikipedia.org/wiki/Spherical_law_of_cosines\r\n    static getDistance(lng1: number, lat1: number, lng2: number, lat2: number) {\r\n        lng1 = Util.toRadians(lng1);\r\n        lat1 = Util.toRadians(lat1);\r\n        lng2 = Util.toRadians(lng2);\r\n        lat2 = Util.toRadians(lat2);\r\n        return Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(Math.abs(lng1 - lng2)));\r\n    }\r\n\r\n    static daysIntoYear(date: string) {\r\n        return Util.dayOfYear(new Date(date));\r\n    }\r\n\r\n    static dayOfYear(date: Date) {\r\n        const start = new Date(date.getFullYear(), 0, 0);\r\n        const diff = date.getTime() - start.getTime();\r\n        const oneDay = 1000 * 60 * 60 * 24;\r\n        return Math.floor(diff / oneDay);\r\n    }\r\n\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {ElementModel} from \"../models/elementModel\";\r\nimport {ObjectType} from \"../types\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\nimport {CuboidModel} from \"../models/cuboidModel\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\nimport {Vector3} from \"three\";\r\nimport {WorldModel} from \"../models/worldModel\";\r\nimport {GroundModel} from \"../models/groundModel\";\r\n\r\nexport class DefaultWorldModel implements WorldModel {\r\n\r\n    name: string;\r\n    cameraPosition: Vector3;\r\n    panCenter: Vector3;\r\n    ground: GroundModel;\r\n\r\n    constructor() {\r\n\r\n        this.name = 'default';\r\n        this.ground = {\r\n            albedo: 0.3,\r\n            thermalDiffusivity: 0.05,\r\n            snowReflectionFactors: new Array(12).fill(0)\r\n        };\r\n        this.panCenter = new Vector3(0, 0, 0);\r\n        this.cameraPosition = new Vector3(0, 0, 5);\r\n\r\n    }\r\n\r\n    getElements() {\r\n        const elements: ElementModel[] = [];\r\n        const e1 = {\r\n            type: ObjectType.Foundation,\r\n            cx: 0,\r\n            cy: 0,\r\n            lx: 2,\r\n            ly: 3,\r\n            lz: 0.1,\r\n            id: 'f1'\r\n        } as FoundationModel;\r\n        const e2 = {\r\n            type: ObjectType.Cuboid,\r\n            cx: 0,\r\n            cy: 3,\r\n            cz: 2,\r\n            lx: 2,\r\n            ly: 2,\r\n            lz: 4,\r\n            id: 'c1'\r\n        } as CuboidModel;\r\n        const e3 = {\r\n            type: ObjectType.Sensor,\r\n            cx: 2,\r\n            cy: 5,\r\n            cz: 0,\r\n            lx: 0.05,\r\n            ly: 0.05,\r\n            lz: 0.01,\r\n            normal: [0, 0, 1],\r\n            id: 's1',\r\n            showLabel: false,\r\n            light: true,\r\n            heatFlux: false\r\n        } as SensorModel;\r\n        const e4 = {\r\n            type: ObjectType.Sensor,\r\n            cx: 0,\r\n            cy: 5,\r\n            cz: 0,\r\n            lx: 0.05,\r\n            ly: 0.05,\r\n            lz: 0.01,\r\n            normal: [0, 0, 1],\r\n            id: 's2',\r\n            showLabel: false,\r\n            light: true,\r\n            heatFlux: false\r\n        } as SensorModel;\r\n        const e5 = {\r\n            type: ObjectType.Sensor,\r\n            cx: 0,\r\n            cy: 6,\r\n            cz: 0,\r\n            lx: 0.05,\r\n            ly: 0.05,\r\n            lz: 0.01,\r\n            normal: [0, 0, 1],\r\n            id: 's3',\r\n            showLabel: false,\r\n            light: true,\r\n            heatFlux: false\r\n        } as SensorModel;\r\n        elements.push(e1);\r\n        elements.push(e2);\r\n        elements.push(e3);\r\n        // elements.push(e4);\r\n        // elements.push(e5);\r\n        return elements;\r\n    }\r\n\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport create from 'zustand';\r\nimport {devtools, persist} from 'zustand/middleware';\r\nimport produce, {enableMapSet} from 'immer';\r\nimport {WorldModel} from \"../models/worldModel\";\r\nimport {ElementModel} from \"../models/elementModel\";\r\nimport {WeatherModel} from \"../models/weatherModel\";\r\nimport weather from '../resources/weather.csv';\r\nimport Papa from \"papaparse\";\r\nimport {Util} from \"../util\";\r\nimport {DatumEntry, MoveHandleType, ObjectType, ResizeHandleType} from \"../types\";\r\nimport {DefaultWorldModel} from \"./DefaultWorldModel\";\r\nimport {Vector2} from \"three\";\r\n\r\nenableMapSet();\r\n\r\nexport interface CommonStoreState {\r\n    set: (fn: (state: CommonStoreState) => void) => void;\r\n    world: WorldModel;\r\n    elements: ElementModel[];\r\n\r\n    showGroundPanel: boolean;\r\n    showHeliodonPanel: boolean;\r\n    showWeatherPanel: boolean;\r\n    showDailyLightSensorPanel: boolean;\r\n    showYearlyLightSensorPanel: boolean;\r\n    autoRotate: boolean;\r\n\r\n    grid: boolean;\r\n    axes: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    theme: string;\r\n    heliodon: boolean;\r\n    address: string;\r\n    latitude: number;\r\n    longitude: number;\r\n    mapZoom: number;\r\n    mapType: string;\r\n    mapTilt: number;\r\n    mapWeatherStations: boolean;\r\n    date: string;\r\n\r\n    weatherData: { [key: string]: WeatherModel };\r\n    getWeather: (location: string) => WeatherModel;\r\n    loadWeatherData: () => void;\r\n    getClosestCity: (lat: number, lng: number) => string | null;\r\n\r\n    enableOrbitController: boolean;\r\n    clickObjectType: ObjectType | null;\r\n    moveHandleType: MoveHandleType | null;\r\n    resizeHandleType: ResizeHandleType | null;\r\n    resizeAnchor: Vector2;\r\n    getSelectedElement: () => ElementModel | null;\r\n    getElementById: (id: string) => ElementModel | null;\r\n    selectNone: () => void;\r\n    updateElementById: (id: string, element: Partial<ElementModel>) => void;\r\n    setElementPosition: (id: string, x: number, y: number, z?: number) => void;\r\n    setElementSize: (id: string, lx: number, ly: number, lz?: number) => void;\r\n\r\n    timesPerHour: number;\r\n    dailyLightSensorData: DatumEntry[];\r\n    setDailyLightSensorData: (data: DatumEntry[]) => void;\r\n    yearlyLightSensorData: DatumEntry[];\r\n    setYearlyLightSensorData: (data: DatumEntry[]) => void;\r\n\r\n}\r\n\r\nexport const useStore = create<CommonStoreState>(devtools(persist((\r\n    set,\r\n    get,\r\n    api,\r\n) => {\r\n\r\n    const immerSet: CommonStoreState['set'] = fn => set(produce(fn));\r\n    const defaultWorldModel = new DefaultWorldModel();\r\n    const defaultElements = defaultWorldModel.getElements();\r\n\r\n    return {\r\n\r\n        set: immerSet,\r\n        world: defaultWorldModel,\r\n        elements: defaultElements,\r\n\r\n        showGroundPanel: false,\r\n        showHeliodonPanel: false,\r\n        showWeatherPanel: false,\r\n        showDailyLightSensorPanel: false,\r\n        showYearlyLightSensorPanel: false,\r\n        autoRotate: false,\r\n\r\n        grid: false,\r\n        axes: true,\r\n        groundImage: false,\r\n        groundColor: 'forestgreen',\r\n        theme: 'Default',\r\n        heliodon: false,\r\n\r\n        address: 'Natick, MA',\r\n        latitude: 42.2844063,\r\n        longitude: -71.3488548,\r\n        mapZoom: 16,\r\n        mapType: 'roadmap',\r\n        mapTilt: 0,\r\n        mapWeatherStations: false,\r\n        date: new Date(2021, 5, 22, 12).toString(),\r\n        weatherData: {},\r\n\r\n        timesPerHour: 20, // how many times per hour to collect data\r\n\r\n        yearlyLightSensorData: [],\r\n        setYearlyLightSensorData(data) {\r\n            immerSet((state: CommonStoreState) => {\r\n                state.yearlyLightSensorData = [...data];\r\n            });\r\n        },\r\n        dailyLightSensorData: [],\r\n        setDailyLightSensorData(data) {\r\n            immerSet((state: CommonStoreState) => {\r\n                state.dailyLightSensorData = [...data];\r\n            });\r\n        },\r\n\r\n        enableOrbitController: true,\r\n        clickObjectType: null,\r\n        moveHandleType: null,\r\n        resizeHandleType: null,\r\n        resizeAnchor: new Vector2(),\r\n\r\n        getSelectedElement() {\r\n            const elements = get().elements;\r\n            for (const e of elements) {\r\n                if (e.selected) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getElementById(id: string) {\r\n            const elements = get().elements;\r\n            for (const e of elements) {\r\n                if (e.id === id) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        selectNone() {\r\n            immerSet((state: CommonStoreState) => {\r\n                for (const e of state.elements) {\r\n                    e.selected = false;\r\n                }\r\n            });\r\n        },\r\n        updateElementById(id, newProps) {\r\n            immerSet((state: CommonStoreState) => {\r\n                for (let [i, e] of state.elements.entries()) {\r\n                    if (e.id === id) {\r\n                        state.elements[i] = {...e, ...newProps};\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        setElementPosition(id, x, y, z?) {\r\n            immerSet((state: CommonStoreState) => {\r\n                for (let [i, e] of state.elements.entries()) {\r\n                    if (e.id === id) {\r\n                        state.elements[i].cx = x;\r\n                        state.elements[i].cy = y;\r\n                        if (z) {\r\n                            state.elements[i].cz = z;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        setElementSize(id, lx, ly, lz?) {\r\n            immerSet((state: CommonStoreState) => {\r\n                for (let [i, e] of state.elements.entries()) {\r\n                    if (e.id === id) {\r\n                        state.elements[i].lx = lx;\r\n                        state.elements[i].ly = ly;\r\n                        if (lz) {\r\n                            state.elements[i].lz = lz;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        loadWeatherData() {\r\n            const data: WeatherModel[] = [];\r\n            Papa.parse(weather, {\r\n                download: true,\r\n                complete: function (results) {\r\n                    for (const row of results.data) {\r\n                        if (Array.isArray(row) && row.length > 1) {\r\n                            const lows: number[] = [];\r\n                            const highs: number[] = [];\r\n                            const sun: number[] = [];\r\n                            for (let i = 5; i < 29; i++) {\r\n                                if ((i - 5) % 2 === 0) {\r\n                                    lows.push(parseFloat(row[i].trim()));\r\n                                } else {\r\n                                    highs.push(parseFloat(row[i].trim()));\r\n                                }\r\n                            }\r\n                            for (let i = 29; i < 41; i++) {\r\n                                sun.push(parseFloat(row[i].trim()));\r\n                            }\r\n                            const wm = {\r\n                                city: row[0].trim(),\r\n                                country: row[1].trim(),\r\n                                longitude: parseFloat(row[2].trim()),\r\n                                latitude: parseFloat(row[3].trim()),\r\n                                elevation: parseFloat(row[4].trim()),\r\n                                lowestTemperatures: lows,\r\n                                highestTemperatures: highs,\r\n                                sunshineHours: sun\r\n                            } as WeatherModel;\r\n                            data.push(wm);\r\n                        }\r\n                    }\r\n                    immerSet((state: CommonStoreState) => {\r\n                        for (const row of data) {\r\n                            state.weatherData[row.city + ', ' + row.country] = row;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        getWeather(location: string) {\r\n            return get().weatherData[location];\r\n        },\r\n        getClosestCity(lat: number, lng: number) {\r\n            let min: number = Number.MAX_VALUE;\r\n            let city = null;\r\n            let distance: number;\r\n            const wd = get().weatherData;\r\n            for (const name in wd) {\r\n                if (wd.hasOwnProperty(name)) {\r\n                    distance = Util.getDistance(lng, lat, wd[name].longitude, wd[name].latitude);\r\n                    if (distance < min) {\r\n                        min = distance;\r\n                        city = name;\r\n                    }\r\n                }\r\n            }\r\n            return city;\r\n        }\r\n    };\r\n}, {name: 'aladdin-storage'})));\r\n\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\n// in kW, see http://en.wikipedia.org/wiki/Solar_constant\r\nexport const SOLAR_CONSTANT = 1.361;\r\n\r\n// original ASHRAE_C = [0.058, 0.060, 0.071, 0.097, 0.121, 0.134, 0.136, 0.122, 0.092, 0.073, 0.063, 0.057];\r\n// http://www.physics.arizona.edu/~cronin/Solar/References/Irradiance%20Models%20and%20Data/WOC01.pdf\r\n// revised C coefficients found from Iqbal's book\r\nexport const ASHRAE_C = [0.103, 0.104, 0.109, 0.120, 0.130, 0.137, 0.138, 0.134, 0.121, 0.111, 0.106, 0.103];\r\n\r\nexport enum AirMass {\r\n    NONE = 0,\r\n    KASTEN_YOUNG = 1,\r\n    SPHERE_MODEL = 2\r\n}\r\n\r\nexport const MINUTES_OF_DAY = 1440;\r\n\r\n// the daily cycle is 1440 minutes\r\nexport const OMEGA_DAY = Math.PI / 720;\r\n\r\n// the annual cycle is 365 days\r\nexport const OMEGA_YEAR = Math.PI / 182.5;\r\n\r\nexport const YEARLY_LAG_IN_DAYS = 30;\r\n\r\nexport const DAILY_LAG_IN_MINUTES = 120;\r\n\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {useFrame, useThree} from \"@react-three/fiber\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {Util} from \"./util\";\r\nimport {Vector3} from \"three\";\r\n\r\nexport interface OrbitControllerProps {\r\n    enabled?: boolean;\r\n    autoRotate?: boolean;\r\n    panCenter?: Vector3;\r\n    orbitControlsRef?: React.MutableRefObject<OrbitControls | undefined>;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\n// Get a reference to the Three.js Camera, and the canvas html element.\r\n// We need these to setup the OrbitControls class.\r\n// https://threejs.org/docs/#examples/en/controls/OrbitControls\r\nconst OrbitController = ({\r\n                             enabled = true,\r\n                             autoRotate = false,\r\n                             panCenter = new Vector3(),\r\n                             orbitControlsRef,\r\n                         }: OrbitControllerProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const {camera, gl: {domElement}} = useThree();\r\n    // Ref to the controls, so that we can update them on every frame using useFrame\r\n    const controls = useRef<OrbitControls>(null);\r\n\r\n    useEffect(() => {\r\n        const c = controls.current;\r\n        if (c) {\r\n            if (panCenter) {\r\n                c.target.set(panCenter.x, panCenter.y, panCenter.z);\r\n            }\r\n            c.addEventListener('end', onInteractionEnd);\r\n            c.update();\r\n            if (orbitControlsRef) {\r\n                orbitControlsRef.current = c;\r\n            }\r\n        }\r\n        return () => {\r\n            if (c) {\r\n                c.removeEventListener('end', onInteractionEnd);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const onInteractionEnd = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.world;\r\n            // FIXME: why can't set function be used?\r\n            w.cameraPosition.x = camera.position.x;\r\n            w.cameraPosition.y = camera.position.y;\r\n            w.cameraPosition.z = camera.position.z;\r\n            if (controls.current) {\r\n                w.panCenter.x = controls.current.target.x;\r\n                w.panCenter.y = controls.current.target.y;\r\n                w.panCenter.z = controls.current.target.z;\r\n            }\r\n        });\r\n    };\r\n\r\n    // animation\r\n    useFrame((state) => {\r\n        if (autoRotate) {\r\n            if (controls.current) {\r\n                controls.current.update();\r\n            }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <orbitControls\r\n            ref={controls}\r\n            args={[camera, domElement]}\r\n            autoRotate={autoRotate}\r\n            enabled={enabled}\r\n            enableRotate={true}\r\n            enablePan={true}\r\n            enableZoom={true}\r\n            enableDamping={true}\r\n            target={panCenter}\r\n            maxAzimuthAngle={Infinity}\r\n            minAzimuthAngle={-Infinity}\r\n            maxPolarAngle={Util.HALF_PI}\r\n            minPolarAngle={0}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default OrbitController;\r\n","export default __webpack_public_path__ + \"static/media/daysky.66925efd.jpg\";","export default __webpack_public_path__ + \"static/media/nightsky.2ee37da6.jpg\";","export default __webpack_public_path__ + \"static/media/desert.e1e10657.jpg\";","export default __webpack_public_path__ + \"static/media/desert-night.6f0f274c.jpg\";","export default __webpack_public_path__ + \"static/media/grassland.d74bba81.jpg\";","export default __webpack_public_path__ + \"static/media/grassland-night.fa2ff11e.jpg\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useRef} from \"react\";\r\nimport DefaultDaySkyImage from \"../resources/daysky.jpg\";\r\nimport DefaultNightSkyImage from \"../resources/nightsky.jpg\";\r\nimport DesertDaySkyImage from \"../resources/desert.jpg\";\r\nimport DesertNightSkyImage from \"../resources/desert-night.jpg\";\r\nimport GrasslandDaySkyImage from \"../resources/grassland.jpg\";\r\nimport GrasslandNightSkyImage from \"../resources/grassland-night.jpg\";\r\nimport {BackSide, Mesh, TextureLoader} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {ObjectType} from \"../types\";\r\nimport {ThreeEvent} from \"@react-three/fiber\";\r\n\r\nexport interface SkyProps {\r\n    theme?: string,\r\n    night?: boolean,\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Sky = ({\r\n                 theme = 'Default',\r\n                 night = false,\r\n                 ...props\r\n             }: SkyProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const selectNone = useStore(state => state.selectNone);\r\n    const meshRef = useRef<Mesh>(null!);\r\n    const texture = useMemo(() => {\r\n        const loader = new TextureLoader();\r\n        let texture;\r\n        switch (theme) {\r\n            case 'Desert':\r\n                texture = loader.load(night ? DesertNightSkyImage : DesertDaySkyImage);\r\n                break;\r\n            case 'Grassland':\r\n                texture = loader.load(night ? GrasslandNightSkyImage : GrasslandDaySkyImage);\r\n                break;\r\n            default:\r\n                texture = loader.load(night ? DefaultNightSkyImage : DefaultDaySkyImage);\r\n        }\r\n        return texture;\r\n    }, [theme, night]);\r\n\r\n    const clickSky = (e: ThreeEvent<MouseEvent>) => {\r\n        if (e.intersections.length > 0) {\r\n            const skyClicked = e.intersections[0].object === meshRef.current;\r\n            if (skyClicked) {\r\n                selectNone();\r\n                setCommonStore((state) => {\r\n                    state.clickObjectType = ObjectType.Sky;\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={meshRef}\r\n            name={'Sky'}\r\n            scale={1}\r\n            onContextMenu={(e) => {\r\n                clickSky(e);\r\n            }}\r\n            onClick={(e) => {\r\n                clickSky(e);\r\n            }}\r\n        >\r\n            <sphereGeometry args={[1000, 16, 16, 0, 2 * Math.PI, 0, Math.PI / 2 + 0.01]}/>\r\n            <meshBasicMaterial map={texture}\r\n                               side={BackSide}\r\n                               opacity={1}\r\n                               color={'skyblue'}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Sky;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {Vector3} from \"three\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface AxesProps {\r\n    lineWidth?: number,\r\n    endPoint?: number,\r\n}\r\n\r\nconst Axes = ({lineWidth = 1, endPoint = 1000}: AxesProps) => {\r\n    return (\r\n        <mesh name={'Axes'}>\r\n            <Line points={[new Vector3(-endPoint, 0, 0), new Vector3(endPoint, 0, 0)]}\r\n                  color={'red'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, -endPoint, 0), new Vector3(0, endPoint, 0)]}\r\n                  color={'green'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, 0, -endPoint), new Vector3(0, 0, endPoint)]}\r\n                  color={'blue'}\r\n                  lineWidth={lineWidth}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Axes;\r\n","export default __webpack_public_path__ + \"static/media/compass.7ded737e.obj\";","export default __webpack_public_path__ + \"static/media/helvetiker_regular.typeface.9a3651b4.fnt\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {useFrame, useLoader, useThree} from '@react-three/fiber'\r\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\r\nimport {Euler, FontLoader, Mesh, MeshBasicMaterial, TextGeometryParameters, Vector3} from \"three\";\r\nimport compassObj from '../assets/compass.obj';\r\nimport helvetikerFont from '../fonts/helvetiker_regular.typeface.fnt';\r\n\r\nexport interface CompassProps {\r\n    scale?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Compass = ({\r\n                     scale = 0.01,\r\n                     ...props\r\n                 }: CompassProps) => {\r\n    const model = useLoader(OBJLoader, compassObj);\r\n    const font = useLoader(FontLoader, helvetikerFont);\r\n    const mesh = useRef<Mesh>(null!);\r\n    const textGeometryParams = {font: font, height: 0.00, size: 0.005} as TextGeometryParameters;\r\n    const textMaterial = new MeshBasicMaterial({color: 'white'});\r\n    const compassMaterial = new MeshBasicMaterial({color: 'red'});\r\n\r\n    // FIXME: This is not the right way to fix the compass\r\n    const {camera} = useThree();\r\n    useFrame((state) => {\r\n        if (mesh.current) {\r\n            const v = new Vector3(0.88, -0.8, 0.1).unproject(camera);\r\n            mesh.current.position.set(v.x, v.y, v.z);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={mesh}\r\n            name={'Compass'}\r\n            rotation={new Euler(-Math.PI / 2, 0, 0)}\r\n        >\r\n            <mesh position={[-0.001, 0.02, 0]} material={textMaterial}>\r\n                <textGeometry args={['N', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.0015, -0.025, 0]} material={textMaterial}>\r\n                <textGeometry args={['S', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.025, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['W', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[0.02, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['E', textGeometryParams]}/>\r\n            </mesh>\r\n            <primitive object={model} scale={scale} material={compassMaterial}/>\r\n        </mesh>\r\n    );\r\n};\r\n\r\nexport default Compass;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nexport const VERSION = '0.0.1';\r\n\r\nexport const isProd = process.env.NODE_ENV === 'production';\r\n\r\nexport const HOME_URL: string = isProd ? 'https://aladdin.intofuture.org' : 'http://aladdin.dev';\r\n\r\nexport const PRESET_COLORS = [\r\n    '#8884d8',\r\n    '#f97356',\r\n    '#1bc32c',\r\n    '#c6502d',\r\n    '#82ca9d',\r\n    '#3eaec0',\r\n    '#627682',\r\n    '#445111'\r\n];\r\n\r\nexport const MONTHS = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec'\r\n];\r\n\r\nexport const MOVE_HANDLE_OFFSET = 0.2;\r\nexport const MOVE_HANDLE_RADIUS = 0.1;\r\nexport const RESIZE_HANDLE_SIZE = 0.16;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Mesh, Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\nimport {ThreeEvent, useThree} from \"@react-three/fiber\";\r\nimport {ActionType, MoveHandleType, ResizeHandleType} from \"../types\";\r\nimport {RESIZE_HANDLE_SIZE, MOVE_HANDLE_OFFSET, MOVE_HANDLE_RADIUS} from \"../constants\";\r\nimport {Util} from \"../util\";\r\n\r\nconst Foundation = ({\r\n                        id,\r\n                        cx,\r\n                        cy,\r\n                        lx = 1,\r\n                        ly = 1,\r\n                        lz = 0.1,\r\n                        color = 'gray',\r\n                        lineColor = 'black',\r\n                        lineWidth = 0.2,\r\n                        selected = false,\r\n                    }: FoundationModel) => {\r\n\r\n        cy = -cy; // we want positive y to point north\r\n\r\n        const setCommonStore = useStore(state => state.set);\r\n        const {gl: {domElement}} = useThree();\r\n        const [hovered, setHovered] = useState(false);\r\n        const [hoveredHandle, setHoveredHandle] = useState<MoveHandleType | ResizeHandleType | null>(null);\r\n        const baseRef = useRef<Mesh>();\r\n        const resizeHandleLLRef = useRef<Mesh>();\r\n        const resizeHandleULRef = useRef<Mesh>();\r\n        const resizeHandleLRRef = useRef<Mesh>();\r\n        const resizeHandleURRef = useRef<Mesh>();\r\n        const moveHandleLowerRef = useRef<Mesh>();\r\n        const moveHandleUpperRef = useRef<Mesh>();\r\n        const moveHandleLeftRef = useRef<Mesh>();\r\n        const moveHandleRightRef = useRef<Mesh>();\r\n\r\n        const wireframe = true;\r\n\r\n        const positionLL = new Vector3(cx - lx / 2, lz / 2, cy - ly / 2);\r\n        const positionUL = new Vector3(cx - lx / 2, lz / 2, cy + ly / 2);\r\n        const positionLR = new Vector3(cx + lx / 2, lz / 2, cy - ly / 2);\r\n        const positionUR = new Vector3(cx + lx / 2, lz / 2, cy + ly / 2);\r\n\r\n        const selectMe = (e: ThreeEvent<MouseEvent>, action: ActionType) => {\r\n            if (e.intersections.length > 0) {\r\n                const intersected = e.intersections[0].object === e.eventObject;\r\n                if (intersected) {\r\n                    setCommonStore((state) => {\r\n                        for (const e of state.elements) {\r\n                            e.selected = e.id === id;\r\n                        }\r\n                        switch (action) {\r\n                            case ActionType.Move:\r\n                                state.moveHandleType = e.eventObject.name as MoveHandleType;\r\n                                state.resizeHandleType = null;\r\n                                break;\r\n                            case ActionType.Resize:\r\n                                state.resizeHandleType = e.eventObject.name as ResizeHandleType;\r\n                                state.moveHandleType = null;\r\n                                break;\r\n                            default:\r\n                                state.moveHandleType = null;\r\n                                state.resizeHandleType = null;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        const hoverHandle = (e: ThreeEvent<MouseEvent>, handle: MoveHandleType | ResizeHandleType) => {\r\n            if (e.intersections.length > 0) {\r\n                const intersected = e.intersections[0].object === e.eventObject;\r\n                if (intersected) {\r\n                    setHoveredHandle(handle);\r\n                    if ( // unfortunately, I cannot find a way to tell the type of an enum variable\r\n                        handle === MoveHandleType.Upper ||\r\n                        handle === MoveHandleType.Lower ||\r\n                        handle === MoveHandleType.Left ||\r\n                        handle === MoveHandleType.Right\r\n                    ) {\r\n                        domElement.style.cursor = 'move';\r\n                    } else {\r\n                        domElement.style.cursor = 'pointer';\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const noHoverHandle = () => {\r\n            setHoveredHandle(null);\r\n            domElement.style.cursor = 'default';\r\n        };\r\n\r\n        const h = MOVE_HANDLE_RADIUS / 2;\r\n\r\n        return (\r\n\r\n            <group name={'Foundation Group'}>\r\n\r\n                {/* draw rectangle */}\r\n                <Box castShadow receiveShadow\r\n                     ref={baseRef}\r\n                     name={'Foundation'}\r\n                     position={[cx, lz / 2, cy]}\r\n                     args={[lx, lz, ly]}\r\n                     onContextMenu={(e) => {\r\n                         selectMe(e, ActionType.Select);\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         if (e.intersections.length > 0) {\r\n                             const intersected = e.intersections[0].object === baseRef.current;\r\n                             if (intersected) {\r\n                                 setHovered(true);\r\n                             }\r\n                         }\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         setHovered(false);\r\n                     }}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Select);\r\n                     }}\r\n                     onPointerUp={(e) => {\r\n                     }}\r\n                     onPointerMove={(e) => {\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\" color={color}/>\r\n                </Box>\r\n\r\n                {(wireframe && !selected) &&\r\n                <>\r\n                    {/* draw wireframe lines upper face */}\r\n                    <Line points={[[positionLL.x, lz, positionLL.z], [positionLR.x, lz, positionLR.z]]}\r\n                          name={'Line LL-LR Upper Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionLR.x, lz, positionLR.z], [positionUR.x, lz, positionUR.z]]}\r\n                          name={'Line LR-UR Upper Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionUR.x, lz, positionUR.z], [positionUL.x, lz, positionUL.z]]}\r\n                          name={'Line UR-UL Upper Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionUL.x, lz, positionUL.z], [positionLL.x, lz, positionLL.z]]}\r\n                          name={'Line UL-LL Upper Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n\r\n                    {/* draw wireframe lines lower face */}\r\n                    <Line points={[[positionLL.x, 0, positionLL.z], [positionLR.x, 0, positionLR.z]]}\r\n                          name={'Line LL-LR Lower Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionLR.x, 0, positionLR.z], [positionUR.x, 0, positionUR.z]]}\r\n                          name={'Line LR-UR Lower Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionUR.x, 0, positionUR.z], [positionUL.x, 0, positionUL.z]]}\r\n                          name={'Line UR-UL Lower Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionUL.x, 0, positionUL.z], [positionLL.x, 0, positionLL.z]]}\r\n                          name={'Line UL-LL Lower Face'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n\r\n                    {/* draw wireframe vertical lines */}\r\n                    <Line points={[[positionLL.x, 0, positionLL.z], [positionLL.x, lz, positionLL.z]]}\r\n                          name={'Line LL-LL Vertical'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionLR.x, 0, positionLR.z], [positionLR.x, lz, positionLR.z]]}\r\n                          name={'Line LR-LR Vertical'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionUL.x, 0, positionUL.z], [positionUL.x, lz, positionUL.z]]}\r\n                          name={'Line UL-UL Vertical'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                    <Line points={[[positionUR.x, 0, positionUR.z], [positionUR.x, lz, positionUR.z]]}\r\n                          name={'Line UR-UR Vertical'}\r\n                          lineWidth={lineWidth}\r\n                          color={lineColor}/>\r\n                </>\r\n                }\r\n\r\n                {/* draw handles */}\r\n                {selected &&\r\n                <>\r\n                    {/* resize handles */}\r\n                    <Box ref={resizeHandleLLRef}\r\n                         position={positionLL}\r\n                         args={[RESIZE_HANDLE_SIZE, lz * 1.2, RESIZE_HANDLE_SIZE]}\r\n                         name={ResizeHandleType.LowerLeft}\r\n                         onPointerDown={(e) => {\r\n                             selectMe(e, ActionType.Resize);\r\n                             setCommonStore(state => {\r\n                                 Util.setVector2(state.resizeAnchor, cx + lx / 2, cy + ly / 2);\r\n                             });\r\n                         }}\r\n                         onPointerOver={(e) => {\r\n                             hoverHandle(e, ResizeHandleType.LowerLeft);\r\n                         }}\r\n                         onPointerOut={(e) => {\r\n                             noHoverHandle();\r\n                         }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === ResizeHandleType.LowerLeft ? 'red' : 'white'}/>\r\n                    </Box>\r\n                    <Box ref={resizeHandleULRef}\r\n                         position={positionUL}\r\n                         args={[RESIZE_HANDLE_SIZE, lz * 1.2, RESIZE_HANDLE_SIZE]}\r\n                         name={ResizeHandleType.UpperLeft}\r\n                         onPointerDown={(e) => {\r\n                             selectMe(e, ActionType.Resize);\r\n                             setCommonStore(state => {\r\n                                 Util.setVector2(state.resizeAnchor, cx + lx / 2, cy - ly / 2);\r\n                             });\r\n                         }}\r\n                         onPointerOver={(e) => {\r\n                             hoverHandle(e, ResizeHandleType.UpperLeft);\r\n                         }}\r\n                         onPointerOut={(e) => {\r\n                             noHoverHandle();\r\n                         }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === ResizeHandleType.UpperLeft ? 'red' : 'white'}/>\r\n                    </Box>\r\n                    <Box ref={resizeHandleLRRef}\r\n                         position={positionLR}\r\n                         args={[RESIZE_HANDLE_SIZE, lz * 1.2, RESIZE_HANDLE_SIZE]}\r\n                         name={ResizeHandleType.LowerRight}\r\n                         onPointerDown={(e) => {\r\n                             selectMe(e, ActionType.Resize);\r\n                             setCommonStore(state => {\r\n                                 Util.setVector2(state.resizeAnchor, cx - lx / 2, cy + ly / 2);\r\n                             });\r\n                         }}\r\n                         onPointerOver={(e) => {\r\n                             hoverHandle(e, ResizeHandleType.LowerRight);\r\n                         }}\r\n                         onPointerOut={(e) => {\r\n                             noHoverHandle();\r\n                         }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === ResizeHandleType.LowerRight ? 'red' : 'white'}/>\r\n                    </Box>\r\n                    <Box ref={resizeHandleURRef}\r\n                         position={positionUR}\r\n                         args={[RESIZE_HANDLE_SIZE, lz * 1.2, RESIZE_HANDLE_SIZE]}\r\n                         name={ResizeHandleType.UpperRight}\r\n                         onPointerDown={(e) => {\r\n                             selectMe(e, ActionType.Resize);\r\n                             setCommonStore(state => {\r\n                                 Util.setVector2(state.resizeAnchor, cx - lx / 2, cy - ly / 2);\r\n                             });\r\n                         }}\r\n                         onPointerOver={(e) => {\r\n                             hoverHandle(e, ResizeHandleType.UpperRight);\r\n                         }}\r\n                         onPointerOut={(e) => {\r\n                             noHoverHandle();\r\n                         }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === ResizeHandleType.UpperRight ? 'red' : 'white'}/>\r\n                    </Box>\r\n\r\n                    {/* move handles */}\r\n                    <Sphere ref={moveHandleLowerRef}\r\n                            args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                            position={[cx, h, cy - ly / 2 - MOVE_HANDLE_OFFSET]}\r\n                            name={MoveHandleType.Lower}\r\n                            onPointerDown={(e) => {\r\n                                selectMe(e, ActionType.Move);\r\n                            }}\r\n                            onPointerOver={(e) => {\r\n                                hoverHandle(e, MoveHandleType.Lower);\r\n                            }}\r\n                            onPointerOut={(e) => {\r\n                                noHoverHandle();\r\n                            }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === MoveHandleType.Lower ? 'red' : 'orange'}/>\r\n                    </Sphere>\r\n                    <Sphere ref={moveHandleUpperRef}\r\n                            args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                            position={[cx, h, cy + ly / 2 + MOVE_HANDLE_OFFSET]}\r\n                            name={MoveHandleType.Upper}\r\n                            onPointerDown={(e) => {\r\n                                selectMe(e, ActionType.Move);\r\n                            }}\r\n                            onPointerOver={(e) => {\r\n                                hoverHandle(e, MoveHandleType.Upper);\r\n                            }}\r\n                            onPointerOut={(e) => {\r\n                                noHoverHandle();\r\n                            }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === MoveHandleType.Upper ? 'red' : 'orange'}/>\r\n                    </Sphere>\r\n                    <Sphere ref={moveHandleLeftRef}\r\n                            args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                            position={[cx - lx / 2 - MOVE_HANDLE_OFFSET, h, cy]}\r\n                            name={MoveHandleType.Left}\r\n                            onPointerDown={(e) => {\r\n                                selectMe(e, ActionType.Move);\r\n                            }}\r\n                            onPointerOver={(e) => {\r\n                                hoverHandle(e, MoveHandleType.Left);\r\n                            }}\r\n                            onPointerOut={(e) => {\r\n                                noHoverHandle();\r\n                            }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === MoveHandleType.Left ? 'red' : 'orange'}/>\r\n                    </Sphere>\r\n                    <Sphere ref={moveHandleRightRef}\r\n                            args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                            position={[cx + lx / 2 + MOVE_HANDLE_OFFSET, h, cy]}\r\n                            name={MoveHandleType.Right}\r\n                            onPointerDown={(e) => {\r\n                                selectMe(e, ActionType.Move);\r\n                            }}\r\n                            onPointerOver={(e) => {\r\n                                hoverHandle(e, MoveHandleType.Right);\r\n                            }}\r\n                            onPointerOut={(e) => {\r\n                                noHoverHandle();\r\n                            }}\r\n                    >\r\n                        <meshStandardMaterial attach=\"material\"\r\n                                              color={hoveredHandle === MoveHandleType.Right ? 'red' : 'orange'}/>\r\n                    </Sphere>\r\n                </>\r\n                }\r\n\r\n                {(hovered && !selected) &&\r\n                <textSprite\r\n                    name={'Label'}\r\n                    text={'Foundation'}\r\n                    fontSize={90}\r\n                    fontFace={'Times Roman'}\r\n                    textHeight={1}\r\n                    position={[cx, lz + 0.2, cy]}\r\n                    scale={[1, 0.2, 0.2]}/>\r\n                }\r\n\r\n            </group>\r\n        )\r\n    }\r\n;\r\n\r\nexport default Foundation;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Mesh, Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\nimport {ThreeEvent, useThree} from \"@react-three/fiber\";\r\nimport {MOVE_HANDLE_RADIUS} from \"../constants\";\r\n\r\nconst Sensor = ({\r\n                    id,\r\n                    cx,\r\n                    cy,\r\n                    cz,\r\n                    lx = 1,\r\n                    ly = 1,\r\n                    lz = 0.1,\r\n                    color = 'white',\r\n                    lineColor = 'black',\r\n                    lineWidth = 0.1,\r\n                    selected = false,\r\n                    showLabel = false,\r\n                    light = true,\r\n                    heatFlux = false,\r\n                }: SensorModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getElementById = useStore(state => state.getElementById);\r\n    const {gl: {domElement}} = useThree();\r\n    const [hovered, setHovered] = useState(false);\r\n    const baseRef = useRef<Mesh>();\r\n    const handleRef = useRef<Mesh>();\r\n\r\n    const position = new Vector3(cx, cz, cy);\r\n    const positionLL = new Vector3(cx - lx / 2, 0, cy - ly / 2);\r\n    const positionUL = new Vector3(cx - lx / 2, 0, cy + ly / 2);\r\n    const positionLR = new Vector3(cx + lx / 2, 0, cy - ly / 2);\r\n    const positionUR = new Vector3(cx + lx / 2, 0, cy + ly / 2);\r\n\r\n    const element = getElementById(id);\r\n\r\n    const selectMe = (e: ThreeEvent<MouseEvent>) => {\r\n        if (e.intersections.length > 0) {\r\n            const intersected = e.intersections[0].object === e.eventObject;\r\n            if (intersected) {\r\n                setCommonStore((state) => {\r\n                    for (const e of state.elements) {\r\n                        e.selected = e.id === id;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n\r\n        <group name={'Sensor Group'}>\r\n\r\n            {/* draw rectangle (too small to cast shadow) */}\r\n            <Box receiveShadow\r\n                 ref={baseRef}\r\n                 args={[lx, lz, ly]}\r\n                 position={[cx, lz / 2, cy]}\r\n                 name={'Sensor'}\r\n                 onPointerDown={(e) => {\r\n                     selectMe(e);\r\n                 }}\r\n                 onContextMenu={(e) => {\r\n                     selectMe(e);\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             setHovered(true);\r\n                             domElement.style.cursor = 'move';\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     setHovered(false);\r\n                     domElement.style.cursor = 'default';\r\n                 }}\r\n            >\r\n                <meshStandardMaterial attach=\"material\" color={element?.lit ? 'red' : color}/>\r\n            </Box>\r\n\r\n            {!selected &&\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLL.x, lz, positionLL.z], [positionLR.x, lz, positionLR.z]]}\r\n                      name={'Line LL-LR Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, lz, positionLR.z], [positionUR.x, lz, positionUR.z]]}\r\n                      name={'Line LR-UR Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, lz, positionUR.z], [positionUL.x, lz, positionUL.z]]}\r\n                      name={'Line UR-UL Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, lz, positionUL.z], [positionLL.x, lz, positionLL.z]]}\r\n                      name={'Line UL-LL Upper Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line points={[positionLL, positionLR]}\r\n                      name={'Line LL-LR Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionLR, positionUR]}\r\n                      name={'Line LR-UR Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUR, positionUL]}\r\n                      name={'Line UR-UL Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUL, positionLL]}\r\n                      name={'Line UL-LL Lower Face'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line points={[positionLL, [positionLL.x, lz, positionLL.z]]}\r\n                      name={'Line LL-LL Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionLR, [positionLR.x, lz, positionLR.z]]}\r\n                      name={'Line LR-LR Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUL, [positionUL.x, lz, positionUL.z]]}\r\n                      name={'Line UL-UL Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionUR, [positionUR.x, lz, positionUR.z]]}\r\n                      name={'Line UR-UR Vertical'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n            </>\r\n            }\r\n\r\n            {/* draw handle */}\r\n            {selected &&\r\n            <Sphere\r\n                ref={handleRef}\r\n                position={position}\r\n                args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                name={'Handle'}\r\n                onPointerDown={(e) => {\r\n                    selectMe(e);\r\n                }}>\r\n                <meshStandardMaterial attach=\"material\" color={'orange'}/>\r\n            </Sphere>\r\n            }\r\n            {(hovered || showLabel) && !selected &&\r\n            <textSprite\r\n                name={'Label'}\r\n                text={'Sensor'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[0.5, 0.2, 0.2]}\r\n                position={[cx, lz + 0.2, cy]}\r\n            />\r\n            }\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Sensor;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Mesh, Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {CuboidModel} from \"../models/cuboidModel\";\r\nimport {ThreeEvent, useThree} from \"@react-three/fiber\";\r\nimport {ActionType, MoveHandleType, ResizeHandleType} from \"../types\";\r\nimport {RESIZE_HANDLE_SIZE, MOVE_HANDLE_OFFSET, MOVE_HANDLE_RADIUS} from \"../constants\";\r\nimport {Util} from \"../util\";\r\n\r\nconst Cuboid = ({\r\n                    id,\r\n                    cx,\r\n                    cy,\r\n                    lx = 1,\r\n                    ly = 1,\r\n                    lz = 1,\r\n                    color = 'silver',\r\n                    lineColor = 'black',\r\n                    lineWidth = 0.1,\r\n                    selected = false,\r\n                }: CuboidModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const {gl: {domElement}} = useThree();\r\n    const [hovered, setHovered] = useState(false);\r\n    const [hoveredHandle, setHoveredHandle] = useState<MoveHandleType | ResizeHandleType | null>(null);\r\n\r\n    const baseRef = useRef<Mesh>();\r\n    const resizeHandleLLTopRef = useRef<Mesh>();\r\n    const resizeHandleULTopRef = useRef<Mesh>();\r\n    const resizeHandleLRTopRef = useRef<Mesh>();\r\n    const resizeHandleURTopRef = useRef<Mesh>();\r\n    const resizeHandleLLBotRef = useRef<Mesh>();\r\n    const resizeHandleULBotRef = useRef<Mesh>();\r\n    const resizeHandleLRBotRef = useRef<Mesh>();\r\n    const resizeHandleURBotRef = useRef<Mesh>();\r\n\r\n    const positionLLTop = new Vector3(cx - lx / 2, lz, cy - ly / 2);\r\n    const positionULTop = new Vector3(cx - lx / 2, lz, cy + ly / 2);\r\n    const positionLRTop = new Vector3(cx + lx / 2, lz, cy - ly / 2);\r\n    const positionURTop = new Vector3(cx + lx / 2, lz, cy + ly / 2);\r\n\r\n    const h = MOVE_HANDLE_RADIUS / 2;\r\n    const positionLLBot = new Vector3(cx - lx / 2, h, cy - ly / 2);\r\n    const positionULBot = new Vector3(cx - lx / 2, h, cy + ly / 2);\r\n    const positionLRBot = new Vector3(cx + lx / 2, h, cy - ly / 2);\r\n    const positionURBot = new Vector3(cx + lx / 2, h, cy + ly / 2);\r\n\r\n    const moveHandleLowerFaceRef = useRef<Mesh>();\r\n    const moveHandleUpperFaceRef = useRef<Mesh>();\r\n    const moveHandleLeftFaceRef = useRef<Mesh>();\r\n    const moveHandleRightFaceRef = useRef<Mesh>();\r\n    const moveHandleTopFaceRef = useRef<Mesh>();\r\n\r\n    const positionLowerFace = new Vector3(cx, h, cy - ly / 2 - MOVE_HANDLE_OFFSET);\r\n    const positionUpperFace = new Vector3(cx, h, cy + ly / 2 + MOVE_HANDLE_OFFSET);\r\n    const positionLeftFace = new Vector3(cx - lx / 2 - MOVE_HANDLE_OFFSET, h, cy);\r\n    const positionRightFace = new Vector3(cx + lx / 2 + MOVE_HANDLE_OFFSET, h, cy);\r\n    const positionTopFace = new Vector3(cx, lz + MOVE_HANDLE_OFFSET, cy);\r\n\r\n    const selectMe = (e: ThreeEvent<MouseEvent>, action: ActionType) => {\r\n        if (e.intersections.length > 0) {\r\n            const intersected = e.intersections[0].object === e.eventObject;\r\n            if (intersected) {\r\n                setCommonStore((state) => {\r\n                    for (const e of state.elements) {\r\n                        e.selected = e.id === id;\r\n                    }\r\n                    switch (action) {\r\n                        case ActionType.Move:\r\n                            state.moveHandleType = e.eventObject.name as MoveHandleType;\r\n                            state.resizeHandleType = null;\r\n                            break;\r\n                        case ActionType.Resize:\r\n                            state.resizeHandleType = e.eventObject.name as ResizeHandleType;\r\n                            state.moveHandleType = null;\r\n                            break;\r\n                        default:\r\n                            state.moveHandleType = null;\r\n                            state.resizeHandleType = null;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const hoverHandle = (e: ThreeEvent<MouseEvent>, handle: MoveHandleType | ResizeHandleType) => {\r\n        if (e.intersections.length > 0) {\r\n            const intersected = e.intersections[0].object === e.eventObject;\r\n            if (intersected) {\r\n                setHoveredHandle(handle);\r\n                if ( // unfortunately, I cannot find a way to tell the type of an enum variable\r\n                    handle === MoveHandleType.Top ||\r\n                    handle === MoveHandleType.Upper ||\r\n                    handle === MoveHandleType.Lower ||\r\n                    handle === MoveHandleType.Left ||\r\n                    handle === MoveHandleType.Right\r\n                ) {\r\n                    domElement.style.cursor = 'move';\r\n                } else {\r\n                    domElement.style.cursor = 'pointer';\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const noHoverHandle = () => {\r\n        setHoveredHandle(null);\r\n        domElement.style.cursor = 'default';\r\n    };\r\n\r\n    return (\r\n\r\n        <group name={'Cuboid Group'}>\r\n\r\n            {/* draw rectangular cuboid */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 args={[lx, lz, ly]}\r\n                 position={[cx, lz / 2, cy]}\r\n                 name={'Cuboid'}\r\n                 onPointerDown={(e) => {\r\n                     selectMe(e, ActionType.Select);\r\n                 }}\r\n                 onContextMenu={(e) => {\r\n                     selectMe(e, ActionType.Select);\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             setHovered(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     setHovered(false);\r\n                 }}\r\n            >\r\n                <meshStandardMaterial attach=\"material\" color={color}/>\r\n            </Box>\r\n\r\n            {!selected &&\r\n            <>\r\n                {/* draw wireframe lines top */}\r\n                <Line points={[positionLLTop, positionLRTop]}\r\n                      name={'Line LL-LR Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionLRTop, positionURTop]}\r\n                      name={'Line LR-UR Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionURTop, positionULTop]}\r\n                      name={'Line UR-UL Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[positionULTop, positionLLTop]}\r\n                      name={'Line UL-LL Top'}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line\r\n                    points={[positionLLBot, positionLRBot]}\r\n                    name={'Line LL-LR Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionLRBot, positionURBot]}\r\n                    name={'Line LR-UR Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionURBot, positionULBot]}\r\n                    name={'Line UR-UL Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionULBot, positionLLBot]}\r\n                    name={'Line UL-LL Bottom'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line\r\n                    points={[positionLLTop, positionLLBot]}\r\n                    name={'Line LL-LL Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionLRTop, positionLRBot]}\r\n                    name={'Line LR-LR Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionULTop, positionULBot]}\r\n                    name={'Line UL-UL Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[positionURTop, positionURBot]}\r\n                    name={'Line UR-UR Vertical'}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n            </>\r\n            }\r\n\r\n            {/* draw handles */}\r\n            {selected &&\r\n            <>\r\n                {/* resize handles */}\r\n                <Box ref={resizeHandleLLTopRef}\r\n                     name={ResizeHandleType.LowerLeftTop}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionLLTop}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.LowerLeftTop);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.LowerLeftTop ? 'red' : 'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleULTopRef}\r\n                     name={ResizeHandleType.UpperLeftTop}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionULTop}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.UpperLeftTop);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.UpperLeftTop ? 'red' : 'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleLRTopRef}\r\n                     name={ResizeHandleType.LowerRightTop}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionLRTop}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.LowerRightTop);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.LowerRightTop ? 'red' : 'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleURTopRef}\r\n                     name={ResizeHandleType.UpperRightTop}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionURTop}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.UpperRightTop);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.UpperRightTop ? 'red' : 'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleLLBotRef}\r\n                     name={ResizeHandleType.LowerLeft}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionLLBot}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                         setCommonStore(state => {\r\n                             Util.setVector2(state.resizeAnchor, cx + lx / 2, cy + ly / 2);\r\n                         });\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.LowerLeft);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.LowerLeft ? 'red' : 'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleULBotRef}\r\n                     name={ResizeHandleType.UpperLeft}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionULBot}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                         setCommonStore(state => {\r\n                             Util.setVector2(state.resizeAnchor, cx + lx / 2, cy - ly / 2);\r\n                         });\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.UpperLeft);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.UpperLeft ? 'red' : 'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleLRBotRef}\r\n                     name={ResizeHandleType.LowerRight}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionLRBot}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                         setCommonStore(state => {\r\n                             Util.setVector2(state.resizeAnchor, cx - lx / 2, cy + ly / 2);\r\n                         });\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.LowerRight);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.LowerRight ? 'red' : 'white'}/>\r\n                </Box>\r\n                <Box ref={resizeHandleURBotRef}\r\n                     name={ResizeHandleType.UpperRight}\r\n                     args={[RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE, RESIZE_HANDLE_SIZE]}\r\n                     position={positionURBot}\r\n                     onPointerDown={(e) => {\r\n                         selectMe(e, ActionType.Resize);\r\n                         setCommonStore(state => {\r\n                             Util.setVector2(state.resizeAnchor, cx - lx / 2, cy - ly / 2);\r\n                         });\r\n                     }}\r\n                     onPointerOver={(e) => {\r\n                         hoverHandle(e, ResizeHandleType.UpperRight);\r\n                     }}\r\n                     onPointerOut={(e) => {\r\n                         noHoverHandle();\r\n                     }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === ResizeHandleType.UpperRight ? 'red' : 'white'}/>\r\n                </Box>\r\n\r\n                {/* move handles */}\r\n                <Sphere ref={moveHandleLowerFaceRef}\r\n                        args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                        name={MoveHandleType.Lower}\r\n                        position={positionLowerFace}\r\n                        onPointerDown={(e) => {\r\n                            selectMe(e, ActionType.Move);\r\n                        }}\r\n                        onPointerOver={(e) => {\r\n                            hoverHandle(e, MoveHandleType.Lower);\r\n                        }}\r\n                        onPointerOut={(e) => {\r\n                            noHoverHandle();\r\n                        }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === MoveHandleType.Lower ? 'red' : 'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleUpperFaceRef}\r\n                        args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                        name={MoveHandleType.Upper}\r\n                        position={positionUpperFace}\r\n                        onPointerDown={(e) => {\r\n                            selectMe(e, ActionType.Move);\r\n                        }}\r\n                        onPointerOver={(e) => {\r\n                            hoverHandle(e, MoveHandleType.Upper);\r\n                        }}\r\n                        onPointerOut={(e) => {\r\n                            noHoverHandle();\r\n                        }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === MoveHandleType.Upper ? 'red' : 'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleLeftFaceRef}\r\n                        args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                        name={MoveHandleType.Left}\r\n                        position={positionLeftFace}\r\n                        onPointerDown={(e) => {\r\n                            selectMe(e, ActionType.Move);\r\n                        }}\r\n                        onPointerOver={(e) => {\r\n                            hoverHandle(e, MoveHandleType.Left);\r\n                        }}\r\n                        onPointerOut={(e) => {\r\n                            noHoverHandle();\r\n                        }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === MoveHandleType.Left ? 'red' : 'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleRightFaceRef}\r\n                        args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                        name={MoveHandleType.Right}\r\n                        position={positionRightFace}\r\n                        onPointerDown={(e) => {\r\n                            selectMe(e, ActionType.Move);\r\n                        }}\r\n                        onPointerOver={(e) => {\r\n                            hoverHandle(e, MoveHandleType.Right);\r\n                        }}\r\n                        onPointerOut={(e) => {\r\n                            noHoverHandle();\r\n                        }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === MoveHandleType.Right ? 'red' : 'orange'}/>\r\n                </Sphere>\r\n                <Sphere ref={moveHandleTopFaceRef}\r\n                        args={[MOVE_HANDLE_RADIUS, 6, 6]}\r\n                        name={MoveHandleType.Top}\r\n                        position={positionTopFace}\r\n                        onPointerDown={(e) => {\r\n                            selectMe(e, ActionType.Move);\r\n                        }}\r\n                        onPointerOver={(e) => {\r\n                            hoverHandle(e, MoveHandleType.Top);\r\n                        }}\r\n                        onPointerOut={(e) => {\r\n                            noHoverHandle();\r\n                        }}\r\n                >\r\n                    <meshStandardMaterial attach=\"material\"\r\n                                          color={hoveredHandle === MoveHandleType.Top ? 'red' : 'orange'}/>\r\n                </Sphere>\r\n            </>\r\n            }\r\n\r\n            {hovered && !selected &&\r\n            <textSprite\r\n                name={'Label'}\r\n                text={'Box'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[0.4, 0.2, 0.2]}\r\n                position={[cx, lz + 0.2, cy]}\r\n            />\r\n            }\r\n\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Cuboid;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport Foundation from \"./views/foundation\";\r\nimport Sensor from \"./views/sensor\";\r\nimport Cuboid from \"./views/cuboid\";\r\nimport {ObjectType} from \"./types\";\r\nimport {FoundationModel} from \"./models/foundationModel\";\r\nimport {SensorModel} from \"./models/sensorModel\";\r\nimport {CuboidModel} from \"./models/cuboidModel\";\r\nimport {useStore} from \"./stores/common\";\r\n\r\nconst ElementsRenderer: React.FC = () => {\r\n\r\n    const elements = useStore(state => state.elements);\r\n\r\n    return (\r\n        <group name={'Content'}>\r\n            {elements\r\n                .filter(e => e.type === ObjectType.Foundation)\r\n                .map(e => <Foundation key={e.id} {...e as FoundationModel}/>)}\r\n            {elements\r\n                .filter(e => e.type === ObjectType.Sensor)\r\n                .map(e => <Sensor key={e.id} {...e as SensorModel}/>)}\r\n            {elements\r\n                .filter(e => e.type === ObjectType.Cuboid)\r\n                .map(e => <Cuboid key={e.id} {...e as CuboidModel}/>)}\r\n        </group>\r\n    );\r\n};\r\n\r\nexport default ElementsRenderer;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useRef, useState} from \"react\";\r\nimport {Plane} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide, Euler, Mesh, Raycaster, Vector2, Vector3} from \"three\";\r\nimport {IntersectionPlaneType, MoveHandleType, ObjectType, ResizeHandleType} from \"../types\";\r\nimport {ElementModel} from \"../models/elementModel\";\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport {MOVE_HANDLE_OFFSET} from \"../constants\";\r\nimport {Util} from \"../util\";\r\n\r\nconst Ground = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getSelectedElement = useStore(state => state.getSelectedElement);\r\n    const selectNone = useStore(state => state.selectNone);\r\n    const moveHandleType = useStore(state => state.moveHandleType);\r\n    const resizeHandleType = useStore(state => state.resizeHandleType);\r\n    const resizeAnchor = useStore(state => state.resizeAnchor);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const setElementPosition = useStore(state => state.setElementPosition);\r\n    const setElementSize = useStore(state => state.setElementSize);\r\n    const updateElement = useStore(state => state.updateElementById);\r\n    const [grab, setGrab] = useState<ElementModel | null>(null);\r\n    const {camera, gl: {domElement}} = useThree();\r\n    const groundPlaneRef = useRef<Mesh>();\r\n    const horizontalPlaneRef = useRef<Mesh>();\r\n    const verticalPlaneRef = useRef<Mesh>();\r\n    const ray = useMemo(() => new Raycaster(), []);\r\n\r\n    let intersectionPlaneType = IntersectionPlaneType.Ground;\r\n    const intersectionPlanePosition = useMemo(() => new Vector3(), []);\r\n    const intersectionPlaneAngle = useMemo(() => new Euler(), []);\r\n    if (grab) {\r\n        if (moveHandleType === MoveHandleType.Top) {\r\n            intersectionPlaneType = IntersectionPlaneType.Horizontal;\r\n            Util.setVector(intersectionPlanePosition, grab.cx, grab.lz, -grab.cy);\r\n            Util.setEuler(intersectionPlaneAngle, -Math.PI / 2, 0, 0);\r\n        } else if (resizeHandleType === ResizeHandleType.LowerLeftTop) {\r\n            intersectionPlaneType = IntersectionPlaneType.Vertical;\r\n            Util.setVector(intersectionPlanePosition, grab.cx - grab.lx / 2, 0, -grab.cy - grab.ly / 2);\r\n            Util.setEuler(intersectionPlaneAngle, 0, 0, 0);\r\n        } else if (resizeHandleType === ResizeHandleType.UpperLeftTop) {\r\n            intersectionPlaneType = IntersectionPlaneType.Vertical;\r\n            Util.setVector(intersectionPlanePosition, grab.cx - grab.lx / 2, 0, -grab.cy + grab.ly / 2);\r\n            Util.setEuler(intersectionPlaneAngle, 0, 0, 0);\r\n        } else if (resizeHandleType === ResizeHandleType.LowerRightTop) {\r\n            intersectionPlaneType = IntersectionPlaneType.Vertical;\r\n            Util.setVector(intersectionPlanePosition, grab.cx + grab.lx / 2, 0, -grab.cy - grab.ly / 2);\r\n            Util.setEuler(intersectionPlaneAngle, 0, 0, 0);\r\n        } else if (resizeHandleType === ResizeHandleType.UpperRightTop) {\r\n            intersectionPlaneType = IntersectionPlaneType.Vertical;\r\n            Util.setVector(intersectionPlanePosition, grab.cx + grab.lx / 2, 0, -grab.cy + grab.ly / 2);\r\n            Util.setEuler(intersectionPlaneAngle, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {grab && intersectionPlaneType === IntersectionPlaneType.Horizontal &&\r\n            <Plane\r\n                ref={horizontalPlaneRef}\r\n                visible={false}\r\n                rotation={intersectionPlaneAngle}\r\n                position={intersectionPlanePosition}\r\n                args={[1000, 1000]}>\r\n                <meshStandardMaterial attach=\"material\" side={DoubleSide} opacity={0.1} color={'white'}/>\r\n            </Plane>\r\n            }\r\n            {grab && intersectionPlaneType === IntersectionPlaneType.Vertical &&\r\n            <Plane\r\n                ref={verticalPlaneRef}\r\n                visible={false}\r\n                rotation={intersectionPlaneAngle}\r\n                position={intersectionPlanePosition}\r\n                args={[1000, 1000]}>\r\n                <meshStandardMaterial attach=\"material\" side={DoubleSide} opacity={0.1} color={'white'}/>\r\n            </Plane>\r\n            }\r\n            <Plane receiveShadow\r\n                   ref={groundPlaneRef}\r\n                   name={'Ground'}\r\n                   rotation={[-Math.PI / 2, 0, 0]}\r\n                   position={[0, -0.01, 0]}\r\n                   args={[10000, 10000]}\r\n                   onContextMenu={(e) => {\r\n                       if (e.intersections.length > 0) {\r\n                           const groundClicked = e.intersections[0].object === groundPlaneRef.current;\r\n                           if (groundClicked) {\r\n                               selectNone();\r\n                               setCommonStore((state) => {\r\n                                   state.clickObjectType = ObjectType.Ground;\r\n                               });\r\n                           }\r\n                       }\r\n                   }}\r\n                   onPointerDown={(e) => {\r\n                       if (e.intersections.length > 0) {\r\n                           const groundClicked = e.intersections[0].object === groundPlaneRef.current;\r\n                           if (groundClicked) {\r\n                               setCommonStore((state) => {\r\n                                   state.clickObjectType = ObjectType.Ground;\r\n                               });\r\n                               selectNone();\r\n                           } else {\r\n                               setGrab(getSelectedElement());\r\n                               setCommonStore((state) => {\r\n                                   state.enableOrbitController = false;\r\n                               });\r\n                           }\r\n                       }\r\n                   }}\r\n                   onPointerUp={(e) => {\r\n                       setGrab(null);\r\n                       setCommonStore((state) => {\r\n                           state.enableOrbitController = true;\r\n                       });\r\n                   }}\r\n                   onPointerMove={(e) => {\r\n                       if (grab && groundPlaneRef && groundPlaneRef.current && grab.type) {\r\n                           const mouse = new Vector2();\r\n                           mouse.x = (e.offsetX / domElement.clientWidth) * 2 - 1;\r\n                           mouse.y = -(e.offsetY / domElement.clientHeight) * 2 + 1;\r\n                           ray.setFromCamera(mouse, camera);\r\n                           let intersects;\r\n                           switch (grab.type) {\r\n                               case ObjectType.Sensor:\r\n                                   intersects = ray.intersectObjects([groundPlaneRef.current]);\r\n                                   if (intersects.length > 0) {\r\n                                       const p = intersects[0].point;\r\n                                       setElementPosition(grab.id, p.x, -p.z);\r\n                                   }\r\n                                   break;\r\n                               case ObjectType.Foundation:\r\n                                   intersects = ray.intersectObjects([groundPlaneRef.current]);\r\n                                   if (intersects.length > 0) {\r\n                                       const p = intersects[0].point;\r\n                                       if (moveHandleType) {\r\n                                           switch (moveHandleType) {\r\n                                               case MoveHandleType.Lower:\r\n                                                   setElementPosition(grab.id, p.x, -p.z - grab.ly / 2 - MOVE_HANDLE_OFFSET);\r\n                                                   break;\r\n                                               case MoveHandleType.Upper:\r\n                                                   setElementPosition(grab.id, p.x, -p.z + grab.ly / 2 + MOVE_HANDLE_OFFSET);\r\n                                                   break;\r\n                                               case MoveHandleType.Left:\r\n                                                   setElementPosition(grab.id, p.x + grab.lx / 2 + MOVE_HANDLE_OFFSET, -p.z);\r\n                                                   break;\r\n                                               case MoveHandleType.Right:\r\n                                                   setElementPosition(grab.id, p.x - grab.lx / 2 - MOVE_HANDLE_OFFSET, -p.z);\r\n                                                   break;\r\n                                           }\r\n                                       }\r\n                                       if (resizeHandleType) {\r\n                                           const lx = Math.max(Math.abs(resizeAnchor.x - p.x), 0.5);\r\n                                           const ly = Math.max(Math.abs(resizeAnchor.y - p.z), 0.5);\r\n                                           setElementSize(grab.id, lx, ly);\r\n                                           switch (resizeHandleType) {\r\n                                               case ResizeHandleType.LowerLeft:\r\n                                                   setElementPosition(grab.id, p.x + lx / 2, -p.z - ly / 2);\r\n                                                   break;\r\n                                               case ResizeHandleType.UpperLeft:\r\n                                                   setElementPosition(grab.id, p.x + lx / 2, -p.z + ly / 2);\r\n                                                   break;\r\n                                               case ResizeHandleType.LowerRight:\r\n                                                   setElementPosition(grab.id, p.x - lx / 2, -p.z - ly / 2);\r\n                                                   break;\r\n                                               case ResizeHandleType.UpperRight:\r\n                                                   setElementPosition(grab.id, p.x - lx / 2, -p.z + ly / 2);\r\n                                                   break;\r\n                                           }\r\n                                       }\r\n                                   }\r\n                                   break;\r\n                               case ObjectType.Cuboid:\r\n                                   if (moveHandleType === MoveHandleType.Top && horizontalPlaneRef.current) {\r\n                                       intersects = ray.intersectObjects([horizontalPlaneRef.current]);\r\n                                       if (intersects.length > 0) {\r\n                                           const p = intersects[0].point;\r\n                                           setElementPosition(grab.id, p.x, -p.z);\r\n                                       }\r\n                                   } else if (verticalPlaneRef.current && (\r\n                                       resizeHandleType === ResizeHandleType.LowerLeftTop ||\r\n                                       resizeHandleType === ResizeHandleType.UpperLeftTop ||\r\n                                       resizeHandleType === ResizeHandleType.LowerRightTop ||\r\n                                       resizeHandleType === ResizeHandleType.UpperRightTop)) {\r\n                                       intersects = ray.intersectObjects([verticalPlaneRef.current]);\r\n                                       if (intersects.length > 0) {\r\n                                           const p = intersects[0].point;\r\n                                           updateElement(grab.id, {lz: Math.max(1, p.y)});\r\n                                       }\r\n                                   } else {\r\n                                       intersects = ray.intersectObjects([groundPlaneRef.current]);\r\n                                       if (intersects.length > 0) {\r\n                                           const p = intersects[0].point;\r\n                                           if (moveHandleType) {\r\n                                               switch (moveHandleType) {\r\n                                                   case MoveHandleType.Lower:\r\n                                                       setElementPosition(grab.id, p.x, -p.z - grab.ly / 2 - MOVE_HANDLE_OFFSET);\r\n                                                       break;\r\n                                                   case MoveHandleType.Upper:\r\n                                                       setElementPosition(grab.id, p.x, -p.z + grab.ly / 2 + MOVE_HANDLE_OFFSET);\r\n                                                       break;\r\n                                                   case MoveHandleType.Left:\r\n                                                       setElementPosition(grab.id, p.x + grab.lx / 2 + MOVE_HANDLE_OFFSET, -p.z);\r\n                                                       break;\r\n                                                   case MoveHandleType.Right:\r\n                                                       setElementPosition(grab.id, p.x - grab.lx / 2 - MOVE_HANDLE_OFFSET, -p.z);\r\n                                                       break;\r\n                                               }\r\n                                           }\r\n                                           if (resizeHandleType) {\r\n                                               const lx = Math.max(Math.abs(resizeAnchor.x - p.x), 0.5);\r\n                                               const ly = Math.max(Math.abs(resizeAnchor.y - p.z), 0.5);\r\n                                               setElementSize(grab.id, lx, ly);\r\n                                               switch (resizeHandleType) {\r\n                                                   case ResizeHandleType.LowerLeft:\r\n                                                       setElementPosition(grab.id, p.x + lx / 2, -p.z - ly / 2);\r\n                                                       break;\r\n                                                   case ResizeHandleType.UpperLeft:\r\n                                                       setElementPosition(grab.id, p.x + lx / 2, -p.z + ly / 2);\r\n                                                       break;\r\n                                                   case ResizeHandleType.LowerRight:\r\n                                                       setElementPosition(grab.id, p.x - lx / 2, -p.z - ly / 2);\r\n                                                       break;\r\n                                                   case ResizeHandleType.UpperRight:\r\n                                                       setElementPosition(grab.id, p.x - lx / 2, -p.z + ly / 2);\r\n                                                       break;\r\n                                               }\r\n                                           }\r\n                                       }\r\n                                   }\r\n                                   break;\r\n                           }\r\n                       }\r\n                   }}\r\n            >\r\n                <meshStandardMaterial attach=\"material\" color={groundColor}/>\r\n            </Plane>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Ground;\r\n","var _defs, _path, _path2, _path3, _path4, _path5, _path6;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgMenu(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    t: 1613755944969,\n    className: \"icon\",\n    viewBox: \"0 0 1024 1024\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"p-id\": 5967,\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 200,\n    height: 200,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 235.50871m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5968\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 165.510915h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5969\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 512.1129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5970\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 442.115105h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5971\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 788.49129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5972\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 718.719294h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5973\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMenu);\nexport default __webpack_public_path__ + \"static/media/menu.c2982aed.svg\";\nexport { ForwardRef as ReactComponent };","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport {Vector3} from \"three\";\r\nimport {AirMass, ASHRAE_C, SOLAR_CONSTANT} from \"./analysisConstants\";\r\nimport {GroundModel} from \"../models/groundModel\";\r\n\r\nexport const TILT_ANGLE = 23.45 / 180.0 * Math.PI;\r\n\r\nexport const computeDeclinationAngle = (date: Date) => {\r\n    const days = Math.floor((date.getTime()\r\n        - new Date(date.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\r\n    return TILT_ANGLE * Math.sin(Util.TWO_PI * (284 + days) / 365.25);\r\n};\r\n\r\nexport const computeHourAngle = (date: Date) => {\r\n    const minutes = date.getHours() * 60 + date.getMinutes() - 12 * 60;\r\n    return minutes / (12.0 * 60.0) * Math.PI;\r\n}\r\n\r\nexport const getSunDirection = (date: Date, latitude: number) => {\r\n    return computeSunLocation\r\n    (1, computeHourAngle(date), computeDeclinationAngle(date), Util.toRadians(latitude)).normalize();\r\n};\r\n\r\nexport const computeSunLocation = (radius: number,\r\n                                   hourAngle: number,\r\n                                   declinationAngle: number,\r\n                                   latitude: number) => {\r\n    const cosDec = Math.cos(declinationAngle);\r\n    const sinDec = Math.sin(declinationAngle);\r\n    const cosLat = Math.cos(latitude);\r\n    const sinLat = Math.sin(latitude);\r\n    const cosHou = Math.cos(hourAngle);\r\n    const sinHou = Math.sin(hourAngle);\r\n    const altitudeAngle = Math.asin(sinDec * sinLat + cosDec * cosHou * cosLat);\r\n    const xAzm = sinHou * cosDec;\r\n    const yAzm = cosLat * sinDec - cosHou * cosDec * sinLat;\r\n    const azimuthAngle = Math.atan2(yAzm, xAzm);\r\n    const coords = new Vector3(radius, azimuthAngle, altitudeAngle);\r\n    Util.sphericalToCartesianZ(coords);\r\n    // reverse the x so that sun moves from east to west\r\n    coords.x = -coords.x;\r\n    return coords;\r\n};\r\n\r\n// Solar radiation incident outside the earth's atmosphere is called extraterrestrial radiation.\r\n// https://pvpmc.sandia.gov/modeling-steps/1-weather-design-inputs/irradiance-and-insolation-2/extraterrestrial-radiation/\r\nconst getExtraterrestrialRadiation = (dayOfYear: number) => {\r\n    const b = Util.TWO_PI * dayOfYear / 365;\r\n    const er = 1.00011 + 0.034221 * Math.cos(b) + 0.00128 * Math.sin(b) + 0.000719 * Math.cos(2 * b) + 0.000077 * Math.sin(2 * b);\r\n    return SOLAR_CONSTANT * er;\r\n}\r\n\r\n// air mass calculation from http://en.wikipedia.org/wiki/Air_mass_(solar_energy)#At_higher_altitudes\r\nconst computeAirMass = (airMassType: AirMass,\r\n                        sunDirection: Vector3,\r\n                        altitude: number) => {\r\n    let zenithAngle;\r\n    switch (airMassType) {\r\n        case AirMass.NONE:\r\n            return 1;\r\n        case AirMass.KASTEN_YOUNG:\r\n            zenithAngle = sunDirection.angleTo(Util.UNIT_VECTOR_POS_Z);\r\n            return 1 / (Math.cos(zenithAngle) + 0.50572 * Math.pow(96.07995 - zenithAngle / Math.PI * 180, -1.6364));\r\n        default:\r\n            zenithAngle = sunDirection.angleTo(Util.UNIT_VECTOR_POS_Z);\r\n            const cos = Math.cos(zenithAngle);\r\n            const r = 708;\r\n            const c = altitude / 9000;\r\n            return Math.sqrt((r + c) * (r + c) * cos * cos + (2 * r + 1 + c) * (1 - c)) - (r + c) * cos;\r\n    }\r\n};\r\n\r\n// Reused peak solar radiation value. Must be called once and only once before\r\n// calling calculateDirectRadiation and calculateDiffusionAndReflection\r\nexport const calculatePeakRadiation = (sunDirection: Vector3,\r\n                                       dayOfYear: number,\r\n                                       altitude: number,\r\n                                       airMassType: AirMass) => {\r\n    // don't use the 1.1 prefactor as we consider diffuse radiation in the ASHRAE model\r\n    return getExtraterrestrialRadiation(dayOfYear)\r\n        * Math.pow(0.7, Math.pow(computeAirMass(airMassType, sunDirection, altitude), 0.678));\r\n};\r\n\r\n// see: http://www.physics.arizona.edu/~cronin/Solar/References/Irradiance%20Models%20and%20Data/WOC01.pdf\r\nexport const calculateDiffuseAndReflectedRadiation = (ground: GroundModel,\r\n                                                      month: number,\r\n                                                      normal: Vector3,\r\n                                                      peakRadiation: number) => {\r\n    let result = 0;\r\n    const cos = normal.dot(Util.UNIT_VECTOR_POS_Z);\r\n    const viewFactorWithSky = 0.5 * (1 + cos);\r\n    if (viewFactorWithSky > 0) { // diffuse irradiance from the sky\r\n        result += ASHRAE_C[month] * viewFactorWithSky * peakRadiation;\r\n    }\r\n    // if a surface faces down, it should receive ground reflection as well\r\n    const viewFactorWithGround = 0.5 * Math.abs(1 - cos);\r\n    if (!Util.isZero(viewFactorWithGround)) { // short-wave reflection from the ground\r\n        result += ground.albedo * viewFactorWithGround * peakRadiation;\r\n    }\r\n    return result;\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport React, {useEffect, useMemo} from \"react\";\r\nimport {\r\n    BufferAttribute,\r\n    BufferGeometry,\r\n    Color,\r\n    DoubleSide,\r\n    Euler,\r\n    MeshBasicMaterial,\r\n    Plane,\r\n    SphereGeometry,\r\n    Vector3\r\n} from \"three\";\r\nimport {\r\n    computeDeclinationAngle,\r\n    computeSunLocation,\r\n    TILT_ANGLE\r\n} from \"../analysis/sunTools\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface HeliodonProps {\r\n    radius: number;\r\n    hourAngle: number;\r\n    declinationAngle: number;\r\n    date: Date;\r\n    latitude: number; // in radian\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst HOUR_DIVISIONS = 96;\r\nconst BASE_DIVISIONS = 72;\r\nconst DECLINATION_DIVISIONS = 12;\r\n\r\nconst Heliodon = ({\r\n                      hourAngle,\r\n                      declinationAngle,\r\n                      radius = 10,\r\n                      date = new Date(),\r\n                      latitude = 42 / 180.0 * Math.PI,\r\n                  }: HeliodonProps) => {\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // remove listeners if any\r\n        }\r\n    }, [date, latitude]);\r\n\r\n    const nRibLines = 5;\r\n\r\n    const [basePositions, baseNormals, baseColors, tickPoints] = useMemo(() => {\r\n        const basePoints: Vector3[] = [];\r\n        const tickPoints: Vector3[] = [];\r\n        const step = Math.PI * 2 / BASE_DIVISIONS;\r\n        let counter = 0;\r\n        for (let angle = 0; angle < Util.TWO_PI + step / 2.0; angle += step) {\r\n            const theta = Math.min(angle, Util.TWO_PI);\r\n            let width = 0.05 * radius;\r\n            // TODO: This is inefficient. We should use indexed buffer to share vertices\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            let p;\r\n            if (Util.TWO_PI - theta > Util.ZERO_TOLERANCE) {\r\n                width = 0.05 * radius + (counter % 3 === 0 ? 0.2 : 0);\r\n                p = new Vector3(radius, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n                p = new Vector3(radius + width, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n            }\r\n            counter++;\r\n        }\r\n\r\n        // attributes\r\n        const length = basePoints.length * 3;\r\n        const basePositions = new Float32Array(length);\r\n        const baseNormals = new Float32Array(length);\r\n        const baseColors = new Float32Array(length);\r\n\r\n        for (let i = 0; i < basePoints.length; i++) {\r\n            const j = i * 3;\r\n            basePositions[j] = basePoints[i].x;\r\n            basePositions[j + 1] = basePoints[i].y;\r\n            basePositions[j + 2] = basePoints[i].z;\r\n            baseNormals[j] = 0;\r\n            baseNormals[j + 1] = 1;\r\n            baseNormals[j + 2] = 0;\r\n            const c = (Math.floor(i / 18)) % 2 === 0 ? 0.2 : 1.0;\r\n            baseColors[j] = c;\r\n            baseColors[j + 1] = c;\r\n            baseColors[j + 2] = c;\r\n        }\r\n\r\n        return [basePositions, baseNormals, baseColors, tickPoints];\r\n    }, [radius]);\r\n\r\n    const sunPathPoints = useMemo(() => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, declinationAngle, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    }, [latitude, radius, declinationAngle]);\r\n\r\n    const getSunPathPointsByDate = (d: number) => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, d, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    };\r\n\r\n    const pointArraySunPaths = useMemo(() => {\r\n        const dMin = computeDeclinationAngle(new Date(2021, 11, 22));\r\n        const dMax = computeDeclinationAngle(new Date(2021, 5, 22));\r\n        const delta = (dMax - dMin) / nRibLines;\r\n        const arr = [];\r\n        for (let i = 0; i <= nRibLines; i++) {\r\n            arr.push(getSunPathPointsByDate(dMin + i * delta));\r\n        }\r\n        return arr;\r\n    }, [latitude, radius]);\r\n\r\n    const sunPosition = useMemo(() => {\r\n        return computeSunLocation(radius, hourAngle, declinationAngle, latitude);\r\n    }, [latitude, declinationAngle, hourAngle, radius]);\r\n\r\n    const sunbeltGeometry = useMemo(() => {\r\n        const declinationStep = 2.0 * TILT_ANGLE / DECLINATION_DIVISIONS;\r\n        const hourStep = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const geometry = new BufferGeometry();\r\n        let verticesCount = 0;\r\n        const vertices: Vector3[] = [];\r\n        const indices = [];\r\n        for (let d = -TILT_ANGLE; d < TILT_ANGLE - declinationStep / 2.0; d += declinationStep) {\r\n            for (let h = -Math.PI; h < Math.PI - hourStep / 2.0; h += hourStep) {\r\n                let h2 = h + hourStep;\r\n                let d2 = d + declinationStep;\r\n                if (h2 > Math.PI) {\r\n                    h2 = Math.PI;\r\n                }\r\n                if (d2 > TILT_ANGLE) {\r\n                    d2 = TILT_ANGLE;\r\n                }\r\n                const v1 = computeSunLocation(radius, h, d, latitude);\r\n                const v2 = computeSunLocation(radius, h2, d, latitude);\r\n                const v3 = computeSunLocation(radius, h2, d2, latitude);\r\n                const v4 = computeSunLocation(radius, h, d2, latitude);\r\n                if (v1.z >= 0 || v2.z >= 0 || v3.z >= 0 || v4.z >= 0) {\r\n                    vertices.push(v1, v2, v3, v4);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 1);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount + 3);\r\n                    verticesCount += 4;\r\n                }\r\n            }\r\n        }\r\n        geometry.setFromPoints(vertices);\r\n        geometry.setIndex(new BufferAttribute(new Uint16Array(indices), 1));\r\n        return geometry;\r\n    }, [latitude, radius]);\r\n\r\n    return (\r\n        <mesh rotation={new Euler(-Math.PI / 2, 0, 0)} name={'Heliodon'}>\r\n            {/* draw base */}\r\n            <mesh>\r\n                <bufferGeometry attach='geometry'>\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"position\"]}\r\n                        count={basePositions.length / 3}\r\n                        array={basePositions}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"normal\"]}\r\n                        count={baseNormals.length / 3}\r\n                        array={baseNormals}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"color\"]}\r\n                        count={baseColors.length / 3}\r\n                        array={baseColors}\r\n                        itemSize={3}\r\n                    />\r\n                </bufferGeometry>\r\n                <meshBasicMaterial side={DoubleSide}\r\n                                   vertexColors={true}\r\n                                   polygonOffset={true}\r\n                                   polygonOffsetFactor={-0.7}\r\n                                   polygonOffsetUnits={-2}/>\r\n            </mesh>\r\n            <lineSegments\r\n                args={[new BufferGeometry().setFromPoints(tickPoints),\r\n                    new MeshBasicMaterial({color: 0x000000})]}/>\r\n            {/* draw sun path*/}\r\n            <mesh>\r\n                {sunPathPoints.length > 3 && <Line lineWidth={2} points={sunPathPoints} color={'yellow'}/>}\r\n                {pointArraySunPaths\r\n                    .filter(a => a.length > 3)\r\n                    .map((a, index) => {\r\n                        return <Line key={index}\r\n                                     opacity={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     lineWidth={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     points={a}\r\n                                     color={'#999'}/>;\r\n                    })\r\n                }\r\n                <mesh\r\n                    args={[sunbeltGeometry,\r\n                        new MeshBasicMaterial({\r\n                            side: DoubleSide,\r\n                            color: new Color(1, 1, 0),\r\n                            transparent: true,\r\n                            opacity: 0.5,\r\n                            clippingPlanes: [new Plane(Util.UNIT_VECTOR_POS_Y, 0)]\r\n                        })\r\n                    ]}\r\n                />\r\n                <mesh\r\n                    position={sunPosition}\r\n                    args={[new SphereGeometry(0.25, 20, 20),\r\n                        new MeshBasicMaterial({color: 0xffffff00})\r\n                    ]}\r\n                />\r\n            </mesh>\r\n        </mesh>\r\n    );\r\n\r\n};\r\n\r\nexport default Heliodon;\r\n","export default __webpack_public_path__ + \"static/media/aladdin-logo.96b59d24.png\";","export default __webpack_public_path__ + \"static/media/ifi-logo.eb360016.png\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nexport const SYMBOLS = [\r\n    'circle',\r\n    'square',\r\n    'triangle up',\r\n    'triangle down',\r\n    'triangle right',\r\n    'triangle left',\r\n    'star',\r\n    'diamond',\r\n    'hexagon'\r\n];\r\n\r\nexport enum Direction {\r\n    DOWN, UP, LEFT, RIGHT\r\n}\r\n\r\nconst strokeWidth = 1;\r\n\r\nexport const CircleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <circle cx=\"0\" cy=\"0\" r=\"3\"\r\n                        style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const SquareSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <rect x=\"-3\" y=\"-3\" width=\"6\" height=\"6\"\r\n                      style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const TriangleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols, direction} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        let pointsString;\r\n        switch (direction) {\r\n            case Direction.UP:\r\n                pointsString = \"-4,2.5,4,2.5,0,-3.5\";\r\n                break;\r\n            case Direction.LEFT:\r\n                pointsString = \"2.5,4,2.5,-4,-3.5,0\";\r\n                break;\r\n            case Direction.RIGHT:\r\n                pointsString = \"-2.5,4,-2.5,-4,3.5,0\";\r\n                break;\r\n            default:\r\n                pointsString = \"-4,-2.5,4,-2.5,0,3.5\";\r\n        }\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points={pointsString}\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const DiamondSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points=\"-3,0,0,5,3,0,0,-5\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const StarSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // we need to scale down by 50% first before applying the scale factor as the original svg is too large\r\n        const s = 0.05 * scale;\r\n        return (\r\n            // strokeWidth needs to be doubled as the view box is too large\r\n            <svg x={cx - 100 * s} y={cy - 100 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon points=\"100,10 40,180 190,60 10,60 160,180\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: stroke, strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const HexagonSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        const s = 0.02 * scale;\r\n        return (\r\n            <svg x={cx - 150 * s} y={cy - 150 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon className=\"hex\" points=\"300,150 225,280 75,280 0,150 75,20 225,20\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const createSymbol = (type: string, size: number, count: number, opacity: number) => {\r\n    switch (type) {\r\n        case 'circle':\r\n            return <CircleSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'square':\r\n            return <SquareSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'triangle up':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.UP} opacity={opacity}/>;\r\n        case 'triangle down':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.DOWN} opacity={opacity}/>;\r\n        case 'triangle right':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.RIGHT} opacity={opacity}/>;\r\n        case 'triangle left':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.LEFT} opacity={opacity}/>;\r\n        case 'star':\r\n            return <StarSymbol scale={1.25 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'diamond':\r\n            return <DiamondSymbol scale={1.1 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'hexagon':\r\n            return <HexagonSymbol scale={1.3 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n    }\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Menu, Dropdown, Checkbox} from 'antd';\r\nimport {ReactComponent as MenuSVG} from './assets/menu.svg';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst {SubMenu} = Menu;\r\n\r\nconst StyledMenuSVG = styled(MenuSVG)`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  height: 40px;\r\n  width: 40px;\r\n  transition: 0.5s;\r\n  fill: brown;\r\n\r\n  &:hover {\r\n    fill: white;\r\n  }\r\n`;\r\n\r\nexport interface MainMenuProps {\r\n\r\n    collectDailyLightSensorData: () => void;\r\n    collectYearlyLightSensorData: () => void;\r\n    openAboutUs: (on: boolean) => void;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst MainMenu = ({\r\n                      collectDailyLightSensorData,\r\n                      collectYearlyLightSensorData,\r\n                      openAboutUs,\r\n                      ...rest\r\n                  }: MainMenuProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n\r\n    // @ts-ignore\r\n    const onChangeShowGroundPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showGroundPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onChangeShowWeatherPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showWeatherPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item key={'ground-panel-check-box'}>\r\n                <Checkbox checked={showGroundPanel} onChange={onChangeShowGroundPanel}>\r\n                    Ground Settings\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <Menu.Item key={'weather-panel-check-box'}>\r\n                <Checkbox checked={showWeatherPanel} onChange={onChangeShowWeatherPanel}>\r\n                    Weather Data\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <SubMenu key={'sensors'} title={'Sensors'}>\r\n                <Menu.Item key={'sensor-collect-daily-data'} onClick={collectDailyLightSensorData}>\r\n                    Collect Daily Data\r\n                </Menu.Item>\r\n                <Menu.Item key={'sensor-collect-yearly-data'} onClick={collectYearlyLightSensorData}>\r\n                    Collect Yearly Data\r\n                </Menu.Item>\r\n            </SubMenu>\r\n            <Menu.Item key={'about-us'} onClick={() => {\r\n                openAboutUs(true);\r\n            }}>\r\n                About Us\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <Dropdown overlay={menu} trigger={['click']}>\r\n            <StyledMenuSVG/>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {memo, useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {GoogleMap, Marker} from '@react-google-maps/api';\r\nimport {useStore} from \"../stores/common\";\r\n\r\nexport interface MapsProp {\r\n\r\n    setLatitude?: (value: number) => void;\r\n    setLongitude?: (value: number) => void;\r\n    setZoom?: (value: number) => void;\r\n    setTilt?: (value: number) => void;\r\n    setType?: (value: string) => void;\r\n\r\n}\r\n\r\nconst containerStyle = {\r\n    border: '1px solid',\r\n    width: '400px',\r\n    height: '400px'\r\n};\r\n\r\nconst Maps = ({\r\n                  setLatitude,\r\n                  setLongitude,\r\n                  setZoom,\r\n                  setTilt,\r\n                  setType,\r\n              }: MapsProp) => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const zoom = useStore(state => state.mapZoom);\r\n    const type = useStore(state => state.mapType);\r\n    const tilt = useStore(state => state.mapTilt);\r\n    const [map, setMap] = useState<google.maps.Map | null>(null);\r\n    const bounds = useRef<google.maps.LatLngBounds | null | undefined>();\r\n    const cities = useRef<google.maps.LatLng[]>([]);\r\n    const weatherData = useStore(state => state.weatherData);\r\n    const mapWeatherStations = useStore(state => state.mapWeatherStations);\r\n    const [updateFlag, setUpdateFlag] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n    }, [updateFlag]);\r\n\r\n    const onLoad = useCallback((map: google.maps.Map) => {\r\n        setMap(map);\r\n    }, []);\r\n\r\n    const onUnmount = useCallback(function callback(map) {\r\n        setMap(null);\r\n    }, []);\r\n\r\n    const loadCities = () => {\r\n        if (bounds.current) {\r\n            cities.current.length = 0;\r\n            for (const x in weatherData) {\r\n                if (weatherData.hasOwnProperty(x)) {\r\n                    const w = weatherData[x];\r\n                    const pos = new google.maps.LatLng(w.latitude, w.longitude);\r\n                    if (bounds.current.contains(pos)) {\r\n                        cities.current.push(pos);\r\n                    }\r\n                }\r\n            }\r\n            setUpdateFlag(!updateFlag);\r\n        }\r\n    };\r\n\r\n    const onBoundsChanged = () => {\r\n        if (map) {\r\n            bounds.current = map.getBounds();\r\n            if (mapWeatherStations) {\r\n                loadCities();\r\n            }\r\n        }\r\n    };\r\n\r\n    const onCenterChanged = () => {\r\n        if (map) {\r\n            const center = map.getCenter();\r\n            const lat = center.lat();\r\n            if (lat !== latitude) {\r\n                setLatitude?.(lat);\r\n            }\r\n            const lng = center.lng();\r\n            if (lng !== longitude) {\r\n                setLongitude?.(lng);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onZoomChanged = () => {\r\n        if (map) {\r\n            const z = map.getZoom();\r\n            if (z !== zoom) {\r\n                setZoom?.(z);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onTiltChanged = () => {\r\n        if (map) {\r\n            const t = map.getTilt();\r\n            if (t !== tilt) {\r\n                setTilt?.(t);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onMapTypeIdChanged = () => {\r\n        if (map) {\r\n            const typeId = map.getMapTypeId();\r\n            if (typeId !== type) {\r\n                setType?.(typeId);\r\n            }\r\n        }\r\n    };\r\n\r\n    const latLng = {lat: latitude, lng: longitude};\r\n\r\n    return (\r\n        <GoogleMap\r\n            mapContainerStyle={containerStyle}\r\n            mapTypeId={type}\r\n            center={latLng}\r\n            zoom={zoom}\r\n            tilt={tilt}\r\n            onLoad={onLoad}\r\n            onBoundsChanged={onBoundsChanged}\r\n            onUnmount={onUnmount}\r\n            onCenterChanged={onCenterChanged}\r\n            onZoomChanged={onZoomChanged}\r\n            onTiltChanged={onTiltChanged}\r\n            onMapTypeIdChanged={onMapTypeIdChanged}\r\n        >\r\n            { /* Child components, such as markers, info windows, etc. */}\r\n            <>\r\n                {mapWeatherStations &&\r\n                cities.current.map((c, index) => {\r\n                    const scale = 0.2 * zoom;\r\n                    return (\r\n                        <Marker\r\n                            key={index}\r\n                            icon={{\r\n                                path: google.maps.SymbolPath.CIRCLE,\r\n                                strokeColor: 'red',\r\n                                strokeWeight: scale + 2,\r\n                                scale: scale,\r\n                            }}\r\n                            position={c}\r\n                        />\r\n                    )\r\n                })}\r\n            </>\r\n        </GoogleMap>\r\n    );\r\n};\r\n\r\nexport default memo(Maps);\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Spin} from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nexport default styled(Spin)`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  z-index: 999;\r\n`;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef, useState} from 'react';\r\nimport {useStore} from \"../stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch} from \"antd\";\r\nimport {CompactPicker} from 'react-color';\r\nimport Maps from \"../components/maps\";\r\nimport {StandaloneSearchBox, useJsApiLoader} from \"@react-google-maps/api\";\r\nimport {Libraries} from \"@react-google-maps/api/dist/utils/make-load-script-url\";\r\nimport Spinner from '../components/spinner';\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\nimport 'antd/dist/antd.css';\r\n\r\nconst libraries = ['places'] as Libraries;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 420px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface GroundPanelProps {\r\n    grid: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    setGrid?: (on: boolean) => void;\r\n    setGroundImage?: (on: boolean) => void;\r\n    setGroundColor?: (color: string) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeLongitude?: (longitude: number) => void;\r\n    changeMapZoom?: (zoom: number) => void;\r\n    changeMapTilt?: (tilt: number) => void;\r\n    changeMapType?: (type: string) => void;\r\n}\r\n\r\nconst GroundPanel = ({\r\n                         grid,\r\n                         groundImage,\r\n                         groundColor,\r\n                         setGrid,\r\n                         setGroundImage,\r\n                         setGroundColor,\r\n                         changeLatitude,\r\n                         changeLongitude,\r\n                         changeMapZoom,\r\n                         changeMapTilt,\r\n                         changeMapType,\r\n                     }: GroundPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n    const mapWeatherStations = useStore(state => state.mapWeatherStations);\r\n    const address = useStore(state => state.address);\r\n    const searchBox = useRef<google.maps.places.SearchBox>();\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const {isLoaded, loadError} = useJsApiLoader({\r\n        id: 'google-map-script',\r\n        googleMapsApiKey: process.env.REACT_APP_MAPS_API_KEY as string,\r\n        libraries: libraries\r\n    });\r\n\r\n    const onPlacesChanged = () => {\r\n        const places = searchBox.current?.getPlaces();\r\n        if (places && places.length > 0) {\r\n            setCommonStore((state) => {\r\n                const geometry = places[0].geometry;\r\n                if (geometry) {\r\n                    state.latitude = geometry.location.lat();\r\n                    state.longitude = geometry.location.lng();\r\n                }\r\n                state.address = places[0].formatted_address as string;\r\n            });\r\n        }\r\n    };\r\n\r\n    const onLoad = (s: google.maps.places.SearchBox) => {\r\n        searchBox.current = s;\r\n    };\r\n\r\n    const setMapWeatherStations = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.mapWeatherStations = on;\r\n        });\r\n    };\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Ground Settings</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showGroundPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <Space direction={'vertical'}>\r\n                        <Space style={{padding: '20px'}} align={'center'} size={20}>\r\n                            <Space direction={'vertical'}>\r\n                                <Space>\r\n                                    <Space style={{width: '60px'}}>Grid:</Space>\r\n                                    <Switch title={'Show ground grid'}\r\n                                            checked={grid}\r\n                                            onChange={(checked) => {\r\n                                                setGrid?.(checked);\r\n                                            }}\r\n                                    />\r\n                                </Space>\r\n                                <Space>\r\n                                    <Space style={{width: '60px'}}>Image:</Space>\r\n                                    <Switch title={'Show ground image'}\r\n                                            checked={groundImage}\r\n                                            onChange={(checked) => {\r\n                                                setGroundImage?.(checked);\r\n                                            }}\r\n                                    />\r\n                                </Space>\r\n                                <Space>\r\n                                    <Space style={{width: '60px'}}>Stations:</Space>\r\n                                    <Switch title={'Show weather stations'}\r\n                                            checked={mapWeatherStations}\r\n                                            onChange={(checked) => {\r\n                                                setMapWeatherStations(checked);\r\n                                            }}\r\n                                    />\r\n                                </Space>\r\n                            </Space>\r\n                            <div>Ground Color<br/>\r\n                                <CompactPicker color={groundColor} onChangeComplete={(colorResult) => {\r\n                                    setGroundColor?.(colorResult.hex);\r\n                                }}/>\r\n                            </div>\r\n                        </Space>\r\n                        {isLoaded &&\r\n                        <Space>\r\n                            <div>\r\n                                <StandaloneSearchBox onLoad={onLoad}\r\n                                                     onPlacesChanged={onPlacesChanged}>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder={address}\r\n                                        style={{\r\n                                            boxSizing: `border-box`,\r\n                                            border: `1px solid transparent`,\r\n                                            width: `400px`,\r\n                                            height: `32px`,\r\n                                            padding: `0 12px`,\r\n                                            borderRadius: `3px`,\r\n                                            boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n                                            fontSize: `14px`,\r\n                                            outline: `none`,\r\n                                            textOverflow: `ellipses`,\r\n                                            position: \"relative\"\r\n                                        }}\r\n                                    />\r\n                                </StandaloneSearchBox>\r\n                            </div>\r\n                        </Space>\r\n                        }\r\n                        {isLoaded ?\r\n                            <Space>\r\n                                <div>\r\n                                    <Maps setLatitude={changeLatitude}\r\n                                          setLongitude={changeLongitude}\r\n                                          setZoom={changeMapZoom}\r\n                                          setTilt={changeMapTilt}\r\n                                          setType={changeMapType}\r\n                                    />\r\n                                    Coordinates: ({latitude.toFixed(4)}°, {longitude.toFixed(4)}°),\r\n                                    Zoom: {mapZoom}\r\n                                </div>\r\n                            </Space>\r\n                            :\r\n                            <Spinner/>\r\n                        }\r\n                        {loadError &&\r\n                        <Space>\r\n                            <div>Map cannot be loaded right now, sorry.</div>\r\n                        </Space>\r\n                        }\r\n                    </Space>\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n};\r\n\r\nexport default GroundPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef, useState} from 'react';\r\nimport {useStore} from \"../stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch, Slider, DatePicker, TimePicker} from \"antd\";\r\nimport moment from 'moment';\r\nimport 'antd/dist/antd.css';\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 640px;\r\n  padding: 0;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface HeliodonPanelProps {\r\n    heliodon: boolean;\r\n    latitude: number;\r\n    date: Date;\r\n    animateSun?: boolean;\r\n    setHeliodon?: (on: boolean) => void;\r\n    setSunAnimation?: (on: boolean) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeDate?: (date: Date) => void;\r\n    changeTime?: (date: Date) => void;\r\n}\r\n\r\nconst HeliodonPanel = ({\r\n                           heliodon,\r\n                           latitude,\r\n                           date,\r\n                           animateSun,\r\n                           setHeliodon,\r\n                           setSunAnimation,\r\n                           changeLatitude,\r\n                           changeDate,\r\n                           changeTime,\r\n                       }: HeliodonPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const requestRef = useRef<number>(0);\r\n    const previousFrameTime = useRef<number>(-1);\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    useEffect(() => {\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => {\r\n            cancelAnimationFrame(requestRef.current);\r\n        }\r\n    }, [animateSun]);\r\n\r\n    const animate = () => {\r\n        if (animateSun) {\r\n            requestRef.current = requestAnimationFrame(animate);\r\n            const currentFrameTime = Date.now();\r\n            if (currentFrameTime - previousFrameTime.current > 100) {\r\n                const day = date.getDate();\r\n                date.setHours(date.getHours(), date.getMinutes() + 15);\r\n                date.setDate(day)\r\n                changeTime?.(date);\r\n                previousFrameTime.current = currentFrameTime;\r\n            }\r\n        }\r\n    };\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Heliodon Settings</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showHeliodonPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <Space style={{padding: '20px'}} align={'baseline'} size={20}>\r\n                        <div>\r\n                            Show<br/>\r\n                            <Switch checked={heliodon} onChange={(checked) => {\r\n                                setHeliodon?.(checked);\r\n                            }}/>\r\n                        </div>\r\n                        <div>\r\n                            Animate<br/>\r\n                            <Switch checked={animateSun} onChange={(checked) => {\r\n                                setSunAnimation?.(checked);\r\n                            }}/>\r\n                        </div>\r\n                        <div>\r\n                            Date<br/>\r\n                            <DatePicker value={moment(date)}\r\n                                        onChange={(moment) => {\r\n                                            if (moment) changeDate?.(moment.toDate());\r\n                                        }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            Time<br/>\r\n                            <TimePicker value={moment(date, 'HH:mm')}\r\n                                        format={'HH:mm'}\r\n                                        onChange={(moment) => {\r\n                                            if (moment) changeTime?.(moment.toDate());\r\n                                        }}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            Latitude: {latitude.toFixed(4)}°\r\n                            <Slider\r\n                                style={{width: '150px'}}\r\n                                marks={{'-90': '-90°', 0: '0°', 90: '90°'}}\r\n                                min={-90}\r\n                                max={90}\r\n                                tooltipVisible={false}\r\n                                defaultValue={latitude}\r\n                                onChange={(value: number) => {\r\n                                    changeLatitude?.(value);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Space>\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n};\r\n\r\nexport default HeliodonPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {message} from \"antd\";\r\n\r\nexport const visitIFI = () => {\r\n    window.open(\"https://intofuture.org\", '_blank');\r\n};\r\n\r\nexport const getMapImage = (size: number, lat: number, lng: number, zoom: number) => {\r\n    return \"https://maps.googleapis.com/maps/api/staticmap?maptype=satellite&center=\" + lat + \",\" + lng\r\n        + \"&zoom=\" + zoom + \"&size=\" + size + \"x\" + size + \"&scale=2&key=\" + process.env.REACT_APP_MAPS_API_KEY;\r\n}\r\n\r\nexport const showSuccess = (msg: string) => {\r\n    message.success({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showInfo = (msg: string) => {\r\n    message.info({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showWarning = (msg: string) => {\r\n    message.warning({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showError = (msg: string) => {\r\n    message.error({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const fahrenheitToCelsius = (temp: number) => {\r\n    return ((temp - 32) * 5) / 9;\r\n};\r\n\r\nexport const celsiusToFahrenheit = (temp: number) => {\r\n    return temp * (9 / 5) + 32;\r\n};\r\n\r\nexport const openInNewTab = (url: string) => {\r\n    const win = window.open(url, '_blank');\r\n    if (win) {\r\n        win.focus();\r\n    }\r\n};\r\n\r\nexport const extractText = (html: string) => {\r\n    return new DOMParser().parseFromString(html, \"text/html\").documentElement.textContent;\r\n};\r\n\r\nexport const containedInDOMRect = (rect: DOMRect, x: number, y: number, margin: number) => {\r\n    return x > rect.x - margin && x < rect.x + rect.width + margin\r\n        && y > rect.y - margin && y < rect.y + rect.height + margin;\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport CookieConsent from \"react-cookie-consent\";\r\n\r\nconst AcceptCookie = () => {\r\n    return <CookieConsent\r\n        location=\"bottom\"\r\n        buttonText=\"Accept\"\r\n        cookieName=\"AladdinCookieName\"\r\n        style={{background: \"#2B373B\", textAlign: 'center', zIndex: 99999}}\r\n        buttonStyle={{color: \"#4e503b\", fontSize: \"12px\"}}\r\n        expires={150}\r\n    >\r\n        By clicking Accept, you agree to our use of cookies to improve your experience with Aladdin.\r\n    </CookieConsent>;\r\n};\r\n\r\nexport default AcceptCookie;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {useTexture} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide} from \"three\";\r\nimport {getMapImage} from \"../helpers\";\r\n\r\nconst GroundImage = () => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n\r\n    const texture = useTexture(getMapImage(640, latitude, longitude, mapZoom));\r\n\r\n    return (\r\n        <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\r\n            <planeBufferGeometry args={[100, 100]}/>\r\n            <meshStandardMaterial attach=\"material\" side={DoubleSide} map={texture} opacity={1}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default GroundImage;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from \"styled-components\";\r\nimport 'antd/dist/antd.css';\r\nimport {useStore} from \"./stores/common\";\r\nimport {useWorker} from \"@koale/useworker\";\r\nimport {Menu, Checkbox, Radio} from 'antd';\r\nimport {ObjectType, Theme} from \"./types\";\r\n\r\n// TODO: Reduce the space between menu items\r\nconst StyledMenu = styled(Menu)`\r\n  padding: 0;\r\n  margin: 0;\r\n`;\r\n\r\nconst {SubMenu} = StyledMenu;\r\n\r\nconst radioStyle = {\r\n    display: 'block',\r\n    height: '30px',\r\n    paddingLeft: '10px',\r\n    lineHeight: '30px',\r\n};\r\n\r\nexport interface ContextMenuProps {\r\n\r\n    city: string | null;\r\n    collectDailyLightSensorData: () => void;\r\n    collectYearlyLightSensorData: () => void;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst ContextMenu = ({\r\n                         city,\r\n                         collectDailyLightSensorData,\r\n                         collectYearlyLightSensorData,\r\n                         ...rest\r\n                     }: ContextMenuProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getSelectedElement = useStore(state => state.getSelectedElement);\r\n    const updateElementById = useStore(state => state.updateElementById);\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const theme = useStore(state => state.theme);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const clickObjectType = useStore(state => state.clickObjectType);\r\n    const selectedElement = getSelectedElement();\r\n\r\n    switch (selectedElement ? selectedElement.type : clickObjectType) {\r\n        case ObjectType.Sky:\r\n            return (\r\n                <StyledMenu style={{padding: 0, margin: 0}}>\r\n                    <Menu.Item key={'axes'}>\r\n                        <Checkbox checked={axes} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.axes = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Axes\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'heliodon-settings'}>\r\n                        <Checkbox checked={showHeliodonPanel} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.showHeliodonPanel = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Heliodon Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'weather-data'}>\r\n                        <Checkbox checked={showWeatherPanel} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.showWeatherPanel = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Weather Data\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <SubMenu key={'theme'} title={'Theme'}>\r\n                        <Radio.Group value={theme} style={{height: '105px'}} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.theme = e.target.value;\r\n                            });\r\n                        }}>\r\n                            <Radio style={radioStyle} value={Theme.Default}>Default</Radio>\r\n                            <Radio style={radioStyle} value={Theme.Desert}>Desert</Radio>\r\n                            <Radio style={radioStyle} value={Theme.Grassland}>Grassland</Radio>\r\n                        </Radio.Group>\r\n                    </SubMenu>\r\n                </StyledMenu>);\r\n        case ObjectType.Foundation:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'foundation-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'foundation-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n        case ObjectType.Sensor:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'sensor-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'sensor-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'sensor-light'}>\r\n                        <Checkbox checked={!!selectedElement?.showLabel} onChange={(e) => {\r\n                            if (selectedElement) {\r\n                                updateElementById(selectedElement.id, {showLabel: e.target.checked});\r\n                            }\r\n                        }}>\r\n                            Show Label\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <SubMenu key={'analysis'} title={'Analysis'}>\r\n                        <Menu.Item key={'sensor-collect-daily-data'} onClick={collectDailyLightSensorData}>\r\n                            Collect Daily Data\r\n                        </Menu.Item>\r\n                        <Menu.Item key={'sensor-collect-yearly-data'} onClick={collectYearlyLightSensorData}>\r\n                            Collect Yearly Data\r\n                        </Menu.Item>\r\n                    </SubMenu>\r\n                </StyledMenu>\r\n            );\r\n        case ObjectType.Cuboid:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'cuboid-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'cuboid-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n        default:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'ground-grid'}>\r\n                        <Checkbox checked={grid} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.grid = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Grid\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'ground-settings'}>\r\n                        <Checkbox checked={showGroundPanel} onChange={(e) => {\r\n                            setCommonStore(state => {\r\n                                state.showGroundPanel = e.target.checked;\r\n                            });\r\n                        }}>\r\n                            Ground Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'ground-paste'}>\r\n                        Paste\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n    }\r\n\r\n};\r\n\r\nexport default ContextMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo, useState} from 'react';\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    CartesianGrid,\r\n    Label,\r\n    Legend,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport {PRESET_COLORS} from \"../constants\";\r\nimport {GraphDataType, DatumEntry} from \"../types\";\r\n\r\nexport interface BarGraphProps {\r\n    type: GraphDataType;\r\n    dataSource: DatumEntry[];\r\n    height: number;\r\n    labelX?: string,\r\n    labelY?: string,\r\n    unitX?: string;\r\n    unitY?: string;\r\n    yMin?: string | number;\r\n    yMax?: string | number;\r\n    fractionDigits?: number;\r\n    referenceX?: number | string;\r\n    color?: string;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst BarGraph = ({\r\n                      type,\r\n                      dataSource,\r\n                      height,\r\n                      labelX,\r\n                      labelY,\r\n                      unitX,\r\n                      unitY,\r\n                      yMin = 'auto',\r\n                      yMax = 'auto',\r\n                      fractionDigits = 2,\r\n                      referenceX,\r\n                      color,\r\n                      ...rest\r\n                  }: BarGraphProps) => {\r\n\r\n    const [dataSetCount, setDataSetCount] = useState<number>(0);\r\n    const [horizontalGridLines, setHorizontalGridLines] = useState<boolean>(true);\r\n    const [verticalGridLines, setVerticalGridLines] = useState<boolean>(true);\r\n    const [legendDataKey, setLegendDataKey] = useState<string | null>(null);\r\n\r\n    //init\r\n    useEffect(() => {\r\n        if (!dataSource) {\r\n            return;\r\n        }\r\n        const len = Array.isArray(dataSource) ? Object.keys(dataSource[0]).length - 1 : Object.keys(dataSource).length - 1;\r\n        if (dataSetCount !== len) {\r\n            setDataSetCount(len);\r\n        }\r\n    }, [dataSource]);\r\n\r\n    const getBars = useMemo(() => {\r\n        const bars = [];\r\n        for (let i = 0; i < dataSetCount; i++) {\r\n            let name = '';\r\n            switch (type) {\r\n                case GraphDataType.MonthlyTemperatures:\r\n                    name = i === 0 ? `Low` : 'High';\r\n                    break;\r\n                case GraphDataType.SunshineHours:\r\n                    name = 'Sunshine';\r\n                    break;\r\n                case GraphDataType.HourlyTemperatures:\r\n                    name = 'Temperature';\r\n                    break;\r\n                case GraphDataType.DaylightData:\r\n                    name = 'Daylight';\r\n                    break;\r\n                case GraphDataType.ClearnessData:\r\n                    name = 'Clearness';\r\n                    break;\r\n                case GraphDataType.DailyRadiationSensorData:\r\n                case GraphDataType.YearlyRadiationSensorData:\r\n                    name = 'Radiation';\r\n                    break;\r\n            }\r\n            const opacity = legendDataKey === null ? 1 : (legendDataKey === name ? 1 : 0.25);\r\n            bars.push(\r\n                <Bar\r\n                    key={i}\r\n                    name={name}\r\n                    dataKey={name}\r\n                    fill={color ? color : PRESET_COLORS[i]}\r\n                    opacity={opacity}\r\n                    isAnimationActive={false}\r\n                />,\r\n            );\r\n        }\r\n        return bars;\r\n    }, [dataSetCount, legendDataKey]);\r\n\r\n    // @ts-ignore\r\n    const onMouseDown = (e) => {\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseEnterLegend = (o) => {\r\n        setLegendDataKey(o.dataKey);\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseLeaveLegend = (o) => {\r\n        setLegendDataKey(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {dataSource && (\r\n                // need two div wrappers to disable the responsiveness of ResponsiveContainer\r\n                <div id={'bar-graph-' + labelX + '-' + labelY}\r\n                     style={{width: '100%', height: `${height}%`, position: 'relative'}}>\r\n                    <div\r\n                        style={{\r\n                            userSelect: 'none',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0\r\n                        }}\r\n                    >\r\n                        <ResponsiveContainer width=\"100%\" height={`100%`}>\r\n                            <BarChart\r\n                                data={dataSource}\r\n                                onMouseDown={onMouseDown}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 30,\r\n                                }}>\r\n                                <Tooltip formatter={(value: number) => value.toFixed(fractionDigits) + ' ' + unitY}/>\r\n                                <CartesianGrid\r\n                                    vertical={verticalGridLines}\r\n                                    horizontal={horizontalGridLines}\r\n                                    stroke={\"rgba(128, 128, 128, 0.3)\"}\r\n                                />\r\n                                <ReferenceLine\r\n                                    x={referenceX}\r\n                                    stroke=\"orange\"\r\n                                    strokeWidth={2}\r\n                                />\r\n                                <XAxis dataKey={labelX}>\r\n                                    <Label\r\n                                        value={labelX + (unitX ? ' (' + unitX + ')' : '')}\r\n                                        offset={0}\r\n                                        position=\"bottom\"\r\n                                    />\r\n                                </XAxis>\r\n                                <YAxis domain={[yMin, yMax]}>\r\n                                    <Label\r\n                                        dx={-15}\r\n                                        value={labelY + (unitY ? ' (' + unitY + ')' : '')}\r\n                                        offset={0}\r\n                                        angle={-90}\r\n                                        position=\"center\"\r\n                                    />\r\n                                </YAxis>\r\n                                {getBars}\r\n                                {dataSetCount > 1 &&\r\n                                <Legend iconType='plainline'\r\n                                        verticalAlign='top'\r\n                                        height={36}\r\n                                        onMouseLeave={onMouseLeaveLegend}\r\n                                        onMouseEnter={onMouseEnterLegend}/>}\r\n                            </BarChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BarGraph;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo, useState} from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Label,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport {createSymbol, SYMBOLS} from \"./symbols\";\r\nimport {PRESET_COLORS} from \"../constants\";\r\nimport {GraphDataType, DatumEntry} from \"../types\";\r\nimport {CurveType} from \"recharts/types/shape/Curve\";\r\n\r\nexport interface LineGraphProps {\r\n    type: GraphDataType;\r\n    dataSource: DatumEntry[];\r\n    height: number;\r\n    labelX?: string,\r\n    labelY?: string,\r\n    unitX?: string;\r\n    unitY?: string;\r\n    yMin?: string | number;\r\n    yMax?: string | number;\r\n    curveType?: CurveType;\r\n    referenceX?: number | string;\r\n    fractionDigits?: number;\r\n    symbolCount?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst LineGraph = ({\r\n                       type,\r\n                       dataSource,\r\n                       height,\r\n                       labelX,\r\n                       labelY,\r\n                       unitX,\r\n                       unitY,\r\n                       yMin = 'auto',\r\n                       yMax = 'auto',\r\n                       curveType = 'linear',\r\n                       referenceX,\r\n                       fractionDigits = 2,\r\n                       symbolCount = 12,\r\n                       ...rest\r\n                   }: LineGraphProps) => {\r\n\r\n    const [lineCount, setLineCount] = useState<number>(0);\r\n    const [horizontalGridLines, setHorizontalGridLines] = useState<boolean>(true);\r\n    const [verticalGridLines, setVerticalGridLines] = useState<boolean>(true);\r\n    const [legendDataKey, setLegendDataKey] = useState<string | null>(null);\r\n    const [lineWidth, setLineWidth] = useState<number>(2);\r\n    const [symbolSize, setSymbolSize] = useState<number>(1);\r\n\r\n    //init\r\n    useEffect(() => {\r\n        if (!dataSource) {\r\n            return;\r\n        }\r\n        const len = Array.isArray(dataSource) ? Object.keys(dataSource[0]).length - 1 : Object.keys(dataSource).length - 1;\r\n        if (lineCount !== len) {\r\n            setLineCount(len);\r\n        }\r\n    }, [dataSource]);\r\n\r\n    const getLines = useMemo(() => {\r\n        const lines = [];\r\n        let defaultSymbol;\r\n        for (let i = 0; i < lineCount; i++) {\r\n            let name = '';\r\n            switch (type) {\r\n                case GraphDataType.MonthlyTemperatures:\r\n                    name = i === 0 ? `Low` : 'High';\r\n                    break;\r\n                case GraphDataType.SunshineHours:\r\n                    name = 'Sunshine';\r\n                    break;\r\n                case GraphDataType.HourlyTemperatures:\r\n                    name = 'Temperature';\r\n                    break;\r\n                case GraphDataType.DaylightData:\r\n                    name = 'Daylight';\r\n                    break;\r\n                case GraphDataType.ClearnessData:\r\n                    name = 'Clearness';\r\n                    break;\r\n                case GraphDataType.DailyRadiationSensorData:\r\n                case GraphDataType.YearlyRadiationSensorData:\r\n                    name = 'Radiation' + (i + 1);\r\n                    break;\r\n            }\r\n            const opacity = legendDataKey === null ? 1 : (legendDataKey === name ? 1 : 0.25);\r\n            const symbol = createSymbol(\r\n                SYMBOLS[i],\r\n                symbolSize,\r\n                symbolCount,\r\n                opacity\r\n            );\r\n            if (i === 0) defaultSymbol = symbol;\r\n            lines.push(\r\n                <Line\r\n                    key={i}\r\n                    type={curveType}\r\n                    name={name}\r\n                    dataKey={name}\r\n                    stroke={PRESET_COLORS[i]}\r\n                    opacity={opacity}\r\n                    strokeWidth={lineWidth}\r\n                    dot={symbolCount > 0 ? (symbol ? symbol : defaultSymbol) : false}\r\n                    isAnimationActive={false}\r\n                />,\r\n            );\r\n        }\r\n        return lines;\r\n    }, [lineCount, lineWidth, symbolCount, symbolSize, legendDataKey]);\r\n\r\n    // @ts-ignore\r\n    const onMouseDown = (e) => {\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseEnterLegend = (o) => {\r\n        setLegendDataKey(o.dataKey);\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseLeaveLegend = (o) => {\r\n        setLegendDataKey(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {dataSource && (\r\n                // need two div wrappers to disable the responsiveness of ResponsiveContainer\r\n                <div id={'line-graph-' + labelX + '-' + labelY}\r\n                     style={{width: '100%', height: `${height}%`, position: 'relative'}}>\r\n                    <div\r\n                        style={{\r\n                            userSelect: 'none',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0\r\n                        }}\r\n                    >\r\n                        <ResponsiveContainer width=\"100%\" height={`100%`}>\r\n                            <LineChart\r\n                                data={dataSource}\r\n                                onMouseDown={onMouseDown}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 30,\r\n                                }}>\r\n                                <Tooltip formatter={(value: number) => value.toFixed(fractionDigits) + ' ' + unitY}/>\r\n                                <CartesianGrid\r\n                                    vertical={verticalGridLines}\r\n                                    horizontal={horizontalGridLines}\r\n                                    stroke={\"rgba(128, 128, 128, 0.3)\"}\r\n                                />\r\n                                <ReferenceLine\r\n                                    x={referenceX}\r\n                                    stroke=\"orange\"\r\n                                    strokeWidth={2}\r\n                                />\r\n                                <XAxis dataKey={labelX}>\r\n                                    <Label\r\n                                        value={labelX + (unitX ? ' (' + unitX + ')' : '')}\r\n                                        offset={0}\r\n                                        position=\"bottom\"\r\n                                    />\r\n                                </XAxis>\r\n                                <YAxis domain={[yMin, yMax]}>\r\n                                    <Label\r\n                                        dx={-15}\r\n                                        value={labelY + (unitY ? ' (' + unitY + ')' : '')}\r\n                                        offset={0}\r\n                                        angle={-90}\r\n                                        position=\"center\"\r\n                                    />\r\n                                </YAxis>\r\n                                {getLines}\r\n                                {lineCount > 1 &&\r\n                                <Legend iconType='plainline'\r\n                                        verticalAlign='top'\r\n                                        height={36}\r\n                                        onMouseLeave={onMouseLeaveLegend}\r\n                                        onMouseEnter={onMouseEnterLegend}/>}\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LineGraph;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useState} from 'react';\r\nimport BarGraph from \"../components/barGraph\";\r\nimport LineGraph from '../components/lineGraph';\r\nimport {GraphDataType} from \"../types\";\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {MONTHS} from \"../constants\";\r\nimport {Util} from \"../util\";\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 500px;\r\n  height: 500px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface WeatherPanelProps {\r\n\r\n    city: string | null;\r\n    graphs: GraphDataType[];\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst WeatherPanel = ({\r\n                          city,\r\n                          graphs,\r\n                          ...rest\r\n                      }: WeatherPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getWeather = useStore(state => state.getWeather);\r\n    const now = useStore(state => state.date);\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const responsiveHeight = useMemo(() => {\r\n        return graphs ? Math.floor(100 / graphs.length) : 100;\r\n    }, [graphs]);\r\n\r\n    const getData = useMemo(() => {\r\n        if (!graphs) {\r\n            return;\r\n        }\r\n        const result: any = {};\r\n        if (city) {\r\n            const weather = getWeather(city);\r\n            if (weather) {\r\n                graphs.forEach(g => {\r\n                    result[g] = [];\r\n                    switch (g) {\r\n                        case GraphDataType.MonthlyTemperatures:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Low: weather.lowestTemperatures[i],\r\n                                        High: weather.highestTemperatures[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                        case GraphDataType.SunshineHours:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Sunshine: weather.sunshineHours[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    }, [graphs, city]);\r\n\r\n    const yNames = ['Temperature', 'Temperature', 'Sunshine'];\r\n    const yUnits = ['°C', '°C', 'Hours'];\r\n    const referenceX = MONTHS[Math.floor(Util.daysIntoYear(now) / 365 * 12)];\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Weather: {city}</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showWeatherPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <>\r\n                        {graphs.map(g => {\r\n                            if (g === GraphDataType.SunshineHours) {\r\n                                return (\r\n                                    <BarGraph\r\n                                        key={g}\r\n                                        type={g}\r\n                                        dataSource={getData[g]}\r\n                                        height={responsiveHeight}\r\n                                        labelX={'Month'}\r\n                                        labelY={yNames[g]}\r\n                                        unitY={yUnits[g]}\r\n                                        yMin={0}\r\n                                        fractionDigits={0}\r\n                                        referenceX={referenceX}\r\n                                        color={'#FFD700'}\r\n                                        {...rest}\r\n                                    />\r\n                                );\r\n                            }\r\n                            return (\r\n                                <LineGraph\r\n                                    key={g}\r\n                                    type={g}\r\n                                    dataSource={getData[g]}\r\n                                    height={responsiveHeight}\r\n                                    labelX={'Month'}\r\n                                    labelY={yNames[g]}\r\n                                    unitY={yUnits[g]}\r\n                                    fractionDigits={0}\r\n                                    referenceX={referenceX}\r\n                                    {...rest}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </>\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n\r\n};\r\n\r\nexport default WeatherPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport LineGraph from '../components/lineGraph';\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {GraphDataType} from \"../types\";\r\nimport {MONTHS} from \"../constants\";\r\nimport {Util} from \"../util\";\r\nimport BarGraph from \"../components/barGraph\";\r\nimport ReactDraggable, {DraggableEventHandler} from \"react-draggable\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 500px;\r\n  height: 650px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface YearlyLightSensorPanelProps {\r\n\r\n    city: string | null;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst YearlyLightSensorPanel = ({\r\n                                    city,\r\n                                    ...rest\r\n                                }: YearlyLightSensorPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const sensorData = useStore(state => state.yearlyLightSensorData);\r\n    const now = useStore(state => state.date);\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const responsiveHeight = 100;\r\n    const referenceX = MONTHS[Math.floor(Util.daysIntoYear(now) / 365 * 12)];\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Light Sensor: {city}</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showYearlyLightSensorPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <LineGraph\r\n                        type={GraphDataType.DaylightData}\r\n                        dataSource={sensorData.map(e => ({Month: e.Month, Daylight: e.Daylight}))}\r\n                        height={responsiveHeight}\r\n                        labelX={'Month'}\r\n                        labelY={'Daylight'}\r\n                        unitY={'Hours'}\r\n                        yMin={0}\r\n                        curveType={'natural'}\r\n                        fractionDigits={1}\r\n                        referenceX={referenceX}\r\n                        {...rest}\r\n                    />\r\n                    <BarGraph\r\n                        type={GraphDataType.ClearnessData}\r\n                        dataSource={sensorData.map(e => ({Month: e.Month, Clearness: e.Clearness}))}\r\n                        height={responsiveHeight}\r\n                        labelX={'Month'}\r\n                        labelY={'Clearness'}\r\n                        unitY={'%'}\r\n                        yMin={0}\r\n                        yMax={100}\r\n                        fractionDigits={1}\r\n                        referenceX={referenceX}\r\n                        color={'#66CDAA'}\r\n                        {...rest}\r\n                    />\r\n                    <LineGraph\r\n                        type={GraphDataType.YearlyRadiationSensorData}\r\n                        dataSource={sensorData.map(({Daylight, Clearness, ...item}) => item)}\r\n                        height={responsiveHeight}\r\n                        labelX={'Month'}\r\n                        labelY={'Radiation'}\r\n                        unitY={'kWh/m²/day'}\r\n                        yMin={0}\r\n                        curveType={'natural'}\r\n                        fractionDigits={2}\r\n                        referenceX={referenceX}\r\n                        {...rest}\r\n                    />\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n\r\n};\r\n\r\nexport default YearlyLightSensorPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport LineGraph from '../components/lineGraph';\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {GraphDataType} from \"../types\";\r\nimport moment from \"moment\";\r\nimport ReactDraggable, {DraggableEventHandler} from 'react-draggable';\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 600px;\r\n  height: 300px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface DailyLightSensorPanelProps {\r\n\r\n    city: string | null;\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst DailyLightSensorPanel = ({\r\n                                   city,\r\n                                   ...rest\r\n                               }: DailyLightSensorPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const sensorData = useStore(state => state.dailyLightSensorData);\r\n    const now = new Date(useStore(state => state.date));\r\n    const [curPosition, setCurPosition] = useState({x: 0, y: 0});\r\n\r\n    const responsiveHeight = 100;\r\n\r\n    const onDrag: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n        setCurPosition({\r\n            x: ui.x,\r\n            y: ui.y,\r\n        });\r\n    };\r\n\r\n    const onDragStart: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    const onDragEnd: DraggableEventHandler = (e, ui) => {\r\n        // TODO\r\n    };\r\n\r\n    return (\r\n        <ReactDraggable\r\n            handle={'.handle'}\r\n            bounds={'parent'}\r\n            axis='both'\r\n            position={curPosition}\r\n            onDrag={onDrag}\r\n            onStart={onDragStart}\r\n            onStop={onDragEnd}\r\n        >\r\n            <Container>\r\n                <ColumnWrapper>\r\n                    <Header className='handle'>\r\n                        <span>Light Sensor: {city} | {moment(now).format('MM/DD')}</span>\r\n                        <span style={{cursor: 'pointer'}} onClick={() => {\r\n                            setCommonStore((state) => {\r\n                                state.showDailyLightSensorPanel = false;\r\n                            });\r\n                        }}>Close</span>\r\n                    </Header>\r\n                    <LineGraph\r\n                        type={GraphDataType.DailyRadiationSensorData}\r\n                        dataSource={sensorData}\r\n                        height={responsiveHeight}\r\n                        labelX={'Hour'}\r\n                        labelY={'Radiation'}\r\n                        unitY={'kWh/m²/day'}\r\n                        yMin={0}\r\n                        curveType={'linear'}\r\n                        fractionDigits={2}\r\n                        symbolCount={24}\r\n                        referenceX={now.getHours()}\r\n                        {...rest}\r\n                    />\r\n                </ColumnWrapper>\r\n            </Container>\r\n        </ReactDraggable>\r\n    );\r\n\r\n};\r\n\r\nexport default DailyLightSensorPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo} from \"react\";\r\nimport {calculateDiffuseAndReflectedRadiation, calculatePeakRadiation, getSunDirection} from \"./sunTools\";\r\nimport {Object3D, Raycaster, Vector3} from \"three\";\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DatumEntry, ObjectType} from \"../types\";\r\nimport {Util} from \"../util\";\r\nimport {AirMass} from \"./analysisConstants\";\r\nimport {MONTHS} from \"../constants\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\n\r\nexport interface SimulationProps {\r\n\r\n    city: string | null;\r\n    dailyLightSensorDataFlag: boolean;\r\n    yearlyLightSensorDataFlag: boolean;\r\n\r\n}\r\n\r\nconst Simulation = ({\r\n                        city,\r\n                        dailyLightSensorDataFlag,\r\n                        yearlyLightSensorDataFlag,\r\n                    }: SimulationProps) => {\r\n\r\n    const world = useStore(state => state.world);\r\n    const elements = useStore(state => state.elements);\r\n    const getWeather = useStore(state => state.getWeather);\r\n    const now = new Date(useStore(state => state.date));\r\n    const latitude = useStore(state => state.latitude);\r\n    const timesPerHour = useStore(state => state.timesPerHour);\r\n    const setDailyLightSensorData = useStore(state => state.setDailyLightSensorData);\r\n    const setYearlyLightSensorData = useStore(state => state.setYearlyLightSensorData);\r\n    const {scene} = useThree();\r\n    const weather = getWeather(city ?? 'Boston MA, USA');\r\n    const elevation = city ? getWeather(city).elevation : 0;\r\n    const interval = 60 / timesPerHour;\r\n    const ray = useMemo(() => new Raycaster(), []);\r\n\r\n    useEffect(() => {\r\n        if (elements && elements.length > 0) {\r\n            collectAllDailyLightSensorData();\r\n        }\r\n    }, [dailyLightSensorDataFlag]);\r\n\r\n    useEffect(() => {\r\n        if (elements && elements.length > 0) {\r\n            collectAllYearlyLightSensorData();\r\n        }\r\n    }, [yearlyLightSensorDataFlag]);\r\n\r\n    const inShadow = (time: Date, position: Vector3, sunDirection: Vector3) => {\r\n        // convert the position and direction from physics model to the coordinate system of three.js\r\n        ray.set(Util.modelToView(position), Util.modelToView(sunDirection));\r\n        const content = scene.children.filter(c => c.name === 'Content');\r\n        if (content.length > 0) {\r\n            const components = content[0].children;\r\n            const objects: Object3D[] = [];\r\n            for (const c of components) {\r\n                objects.push(...c.children.filter(x => x.castShadow));\r\n            }\r\n            const intersects = ray.intersectObjects(objects);\r\n            return intersects.length > 0;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const collectAllDailyLightSensorData = () => {\r\n        const map = new Map<string, number[]>();\r\n        let index = 0;\r\n        for (const e of elements) {\r\n            if (e.type === ObjectType.Sensor) {\r\n                map.set('Radiation' + (index + 1), collectDailyLightSensorData(e as SensorModel));\r\n                index++;\r\n            }\r\n        }\r\n        const data = [];\r\n        for (let i = 0; i < 24; i++) {\r\n            const datum: DatumEntry = {};\r\n            datum['Hour'] = i;\r\n            for (let k = 1; k <= index; k++) {\r\n                const key = 'Radiation' + k;\r\n                datum[key] = map.get(key)?.[i];\r\n            }\r\n            data.push(datum);\r\n        }\r\n        setDailyLightSensorData(data);\r\n    }\r\n\r\n    const collectDailyLightSensorData = (sensor: SensorModel) => {\r\n        const position = new Vector3(sensor.cx, sensor.cy, sensor.cz);\r\n        const normal = new Vector3(sensor.normal[0], sensor.normal[1], sensor.normal[2]);\r\n        const result = new Array(24).fill(0);\r\n        const year = now.getFullYear();\r\n        const month = now.getMonth();\r\n        const date = now.getDate();\r\n        const dayOfYear = Util.dayOfYear(now);\r\n        let count = 0;\r\n        for (let i = 0; i < 24; i++) {\r\n            for (let j = 0; j < timesPerHour; j++) {\r\n                const cur = new Date(year, month, date, i, j * interval);\r\n                const sunDirection = getSunDirection(cur, latitude);\r\n                if (sunDirection.z > 0) {\r\n                    // when the sun is out\r\n                    count++;\r\n                    const peakRadiation = calculatePeakRadiation(sunDirection, dayOfYear, elevation, AirMass.SPHERE_MODEL);\r\n                    const dot = normal.dot(sunDirection);\r\n                    if (dot > 0) {\r\n                        if (!inShadow(cur, position, sunDirection)) {\r\n                            // direct radiation\r\n                            result[i] += dot * peakRadiation;\r\n                        }\r\n                    }\r\n                    // indirect radiation\r\n                    result[i] += calculateDiffuseAndReflectedRadiation(world.ground, month, normal, peakRadiation);\r\n                }\r\n            }\r\n        }\r\n        // apply clearness and convert the unit of time step from minute to hour so that we get kWh\r\n        const daylight = count * interval / 60;\r\n        const clearness = weather.sunshineHours[month] / (30 * daylight);\r\n        return result.map(x => x * clearness / timesPerHour);\r\n    };\r\n\r\n    const collectAllYearlyLightSensorData = () => {\r\n        const resultArr = [];\r\n        for (const e of elements) {\r\n            if (e.type === ObjectType.Sensor) {\r\n                resultArr.push(collectYearlyLightSensorData(e as SensorModel));\r\n            }\r\n        }\r\n        const results = [];\r\n        for (let month = 0; month < 12; month++) {\r\n            const r: DatumEntry = {};\r\n            r['Month'] = MONTHS[month];\r\n            for (const [i, a] of resultArr.entries()) {\r\n                r['Daylight'] = a[month].Daylight;\r\n                r['Clearness'] = a[month].Clearness;\r\n                r['Radiation' + (i + 1)] = a[month].Radiation;\r\n            }\r\n            results.push(r);\r\n        }\r\n        setYearlyLightSensorData(results);\r\n    }\r\n\r\n    const collectYearlyLightSensorData = (sensor: SensorModel) => {\r\n        const data = [];\r\n        const position = new Vector3(sensor.cx, sensor.cy, sensor.cz);\r\n        const normal = new Vector3(sensor.normal[0], sensor.normal[1], sensor.normal[2]);\r\n        const year = now.getFullYear();\r\n        const date = 15;\r\n        for (let month = 0; month < 12; month++) {\r\n            const midMonth = new Date(year, month, date);\r\n            const dayOfYear = Util.dayOfYear(midMonth);\r\n            let total = 0;\r\n            let count = 0;\r\n            for (let hour = 0; hour < 24; hour++) {\r\n                for (let step = 0; step < timesPerHour; step++) {\r\n                    const cur = new Date(year, month, date, hour, step * interval);\r\n                    const sunDirection = getSunDirection(cur, latitude);\r\n                    if (sunDirection.z > 0) {\r\n                        // when the sun is out\r\n                        count++;\r\n                        const peakRadiation = calculatePeakRadiation(sunDirection, dayOfYear, elevation, AirMass.SPHERE_MODEL);\r\n                        const dot = normal.dot(sunDirection);\r\n                        if (dot > 0) {\r\n                            if (!inShadow(cur, position, sunDirection)) {\r\n                                // direct radiation\r\n                                total += dot * peakRadiation;\r\n                            }\r\n                        }\r\n                        // indirect radiation\r\n                        total += calculateDiffuseAndReflectedRadiation(world.ground, month, normal, peakRadiation);\r\n                    }\r\n                }\r\n            }\r\n            const daylight = count * interval / 60;\r\n            const clearness = weather.sunshineHours[midMonth.getMonth()] / (30 * daylight);\r\n            total *= clearness; // apply clearness\r\n            total /= timesPerHour; // convert the unit of timeStep from minute to hour so that we get kWh\r\n            data.push({\r\n                Month: MONTHS[month],\r\n                Daylight: daylight,\r\n                Clearness: clearness * 100,\r\n                Radiation: total\r\n            } as DatumEntry);\r\n        }\r\n        return data;\r\n    };\r\n\r\n    return <></>;\r\n\r\n};\r\n\r\nexport default Simulation;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport {Button, Space, Switch} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport styled from \"styled-components\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 4px;\r\n  left: 50px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nexport interface MainToolBarProps {\r\n    orbitControls?: OrbitControls;\r\n}\r\n\r\nconst MainToolBar = ({orbitControls}: MainToolBarProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const autoRotate = useStore(state => state.autoRotate);\r\n    const heliodon = useStore(state => state.showHeliodonPanel);\r\n\r\n    return (\r\n        <Container>\r\n            <Space direction='horizontal'>\r\n                <div>\r\n                    <span style={{paddingRight: '10px'}}>Spin</span>\r\n                    <Switch title={'Spin view'} checked={autoRotate} onChange={(checked) => {\r\n                        setCommonStore((state) => {\r\n                            state.autoRotate = checked;\r\n                        });\r\n                    }}/>\r\n                </div>\r\n                <div>\r\n                    <span style={{paddingRight: '10px', paddingLeft: '10px'}}>Heliodon</span>\r\n                    <Switch title={'Show heliodon'} checked={heliodon} onChange={(checked) => {\r\n                        setCommonStore((state) => {\r\n                            state.showHeliodonPanel = checked;\r\n                        });\r\n                    }}/>\r\n                </div>\r\n                <div>\r\n                    <Button type=\"primary\" title={'Reset view'} onClick={() => {\r\n                        if (orbitControls) {\r\n                            orbitControls.reset();\r\n                        }\r\n                    }}> Reset </Button>\r\n                </div>\r\n            </Space>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default MainToolBar;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nexport interface TeamProps {\r\n    top: number;\r\n    height?: number;\r\n    color?: string;\r\n}\r\n\r\nconst Team = ({top, height, color}: TeamProps) => {\r\n    const linePos = top + 56 + 'px';\r\n    const top110 = top + 110 + 'px';\r\n    const top250 = top + 220 + 'px';\r\n    return <div>\r\n        <div style={{\r\n            position: 'absolute',\r\n            borderRadius: '20px',\r\n            border: 'thin',\r\n            textAlign: 'center',\r\n            left: '15%',\r\n            right: '15%',\r\n            top: top + 'px',\r\n            height: (height ?? 300) + 'px'\r\n        }}>\r\n            <h2 style={{marginTop: '20px', color: color}}>This product is brought to you by</h2>\r\n            <p style={{fontSize: '12px', color: color}}>\r\n                <a target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://intofuture.org/aladdin-terms.html\"\r\n                   style={{color: color}}>\r\n                    Terms of Service\r\n                </a>\r\n                &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\r\n                <a target=\"_blank\"\r\n                   rel=\"noopener noreferrer\"\r\n                   href=\"https://intofuture.org/aladdin-privacy.html\"\r\n                   style={{color: color}}>\r\n                    Privacy Policy\r\n                </a>\r\n            </p>\r\n        </div>\r\n        <div>\r\n            <hr style={{position: 'absolute', left: '10%', width: '80%', marginTop: linePos, color: color}}/>\r\n            <table style={{\r\n                position: 'absolute',\r\n                border: 'none',\r\n                top: top110,\r\n                left: '10%',\r\n                width: '80%',\r\n                fontSize: 'small',\r\n                color: color\r\n            }}>\r\n                <tbody>\r\n                <tr style={{\r\n                    verticalAlign: 'top'\r\n                }}>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Software</h3>\r\n                        Charles Xie<br/>\r\n                    </td>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Content</h3>\r\n                        Rundong Jiang<br/>\r\n                        Charles Xie<br/>\r\n                    </td>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Research</h3>\r\n                        Shannon Sung<br/>\r\n                        Charles Xie<br/>\r\n                    </td>\r\n                    <td>\r\n                        <h3 style={{color: color}}>Support</h3>\r\n                        Rundong Jiang<br/>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <div style={{\r\n            position: 'absolute',\r\n            left: '10%',\r\n            marginRight: '10%',\r\n            top: top250,\r\n            fontSize: 'small',\r\n            textAlign: 'justify',\r\n            color: color\r\n        }}>The National Science Foundation (NSF) of the United States generously provided funding for the research\r\n            and development of this product through grant numbers 1918847, 2105695, and 2131097. Any opinions,\r\n            findings, and conclusions or recommendations expressed in this product, however, are those of the authors\r\n            and do not necessarily reflect the views of NSF.\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Team;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport Team from \"./team\";\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  top: 80px;\r\n  left: 10px;\r\n  display: flex;\r\n  width: 600px;\r\n  height: 400px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  z-index: 9;\r\n  border-radius: 10px;\r\n  background: dimgray;\r\n  box-shadow: 3px 3px 3px 3px black;\r\n`;\r\n\r\nexport interface AboutProps {\r\n    openAboutUs: (on: boolean) => void;\r\n}\r\n\r\nconst About = ({openAboutUs}: AboutProps) => {\r\n\r\n    return (\r\n        <Container>\r\n            <Team top={10} color={'antiquewhite'}/>\r\n            <div style={{\r\n                position: 'absolute',\r\n                fontSize: 'medium',\r\n                color: 'antiquewhite',\r\n                cursor: 'pointer',\r\n                bottom: '10px'\r\n            }} onClick={() => {\r\n                openAboutUs(false);\r\n            }}>\r\n                Close\r\n            </div>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default About;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n *\r\n * @author Charles Xie\r\n */\r\n\r\nimport React, {Suspense, useEffect, useMemo, useRef, useState} from 'react';\r\nimport './app.css';\r\nimport {Canvas} from '@react-three/fiber';\r\nimport OrbitController from \"./orbitController\";\r\nimport Sky from \"./views/sky\";\r\nimport Axes from \"./views/axes\";\r\nimport Compass from \"./views/compass\";\r\nimport ElementsRenderer from \"./elementsRenderer\";\r\nimport Ground from \"./views/ground\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {Euler, Vector3} from \"three\";\r\nimport Heliodon from \"./views/heliodon\";\r\nimport {Util} from \"./util\";\r\nimport {computeDeclinationAngle, computeHourAngle, computeSunLocation} from \"./analysis/sunTools\";\r\nimport aladdinLogo from './assets/aladdin-logo.png';\r\nimport ifiLogo from './assets/ifi-logo.png';\r\nimport MainMenu from \"./mainMenu\";\r\nimport GroundPanel from \"./panels/groundPanel\";\r\nimport HeliodonPanel from \"./panels/heliodonPanel\";\r\nimport {VERSION} from \"./constants\";\r\nimport {visitIFI} from \"./helpers\";\r\nimport AcceptCookie from \"./acceptCookie\";\r\nimport GroundImage from \"./views/groundImage\";\r\nimport {Dropdown} from \"antd\";\r\nimport ContextMenu from \"./contextMenu\";\r\nimport WeatherPanel from \"./panels/weatherPanel\";\r\nimport {GraphDataType} from \"./types\";\r\nimport YearlyLightSensorPanel from \"./panels/yearlyLightSensorPanel\";\r\nimport DailyLightSensorPanel from \"./panels/dailyLightSensorPanel\";\r\nimport Simulation from \"./analysis/simulation\";\r\nimport MainToolBar from \"./mainToolBar\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport About from \"./about\";\r\n\r\nconst App = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const world = useStore(state => state.world);\r\n    const loadWeatherData = useStore(state => state.loadWeatherData);\r\n    const getClosestCity = useStore(state => state.getClosestCity);\r\n\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const showDailyLightSensorPanel = useStore(state => state.showDailyLightSensorPanel);\r\n    const showYearlyLightSensorPanel = useStore(state => state.showYearlyLightSensorPanel);\r\n    const autoRotate = useStore(state => state.autoRotate);\r\n\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const enableOrbitController = useStore(state => state.enableOrbitController);\r\n    const groundImage = useStore(state => state.groundImage);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const theme = useStore(state => state.theme);\r\n    const heliodon = useStore(state => state.heliodon);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const weatherData = useStore(state => state.weatherData);\r\n    const now = new Date(useStore(state => state.date));\r\n\r\n    const [hourAngle, setHourAngle] = useState<number>(0);\r\n    const [declinationAngle, setDeclinationAngle] = useState<number>(0);\r\n    const [sunlightDirection, setSunlightDirection] = useState<Vector3>(new Vector3(0, 2, 2));\r\n    const [animateSun, setAnimateSun] = useState<boolean>(false);\r\n    const [city, setCity] = useState<string | null>('Boston MA, USA');\r\n    const [dailyLightSensorDataFlag, setDailyLightSensorDataFlag] = useState<boolean>(false);\r\n    const [yearlyLightSensorDataFlag, setYearlyLightSensorDataFlag] = useState<boolean>(false);\r\n    const [aboutUs, setAboutUs] = useState(false);\r\n    const orbitControlsRef = useRef<OrbitControls>();\r\n    const radius = 10;\r\n\r\n    useEffect(() => {\r\n        loadWeatherData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setSunlightDirection(computeSunLocation(radius, hourAngle, declinationAngle, Util.toRadians(latitude))\r\n            .applyEuler(new Euler(-Math.PI / 2, 0, 0)));\r\n    }, [latitude, hourAngle, declinationAngle]);\r\n\r\n    useEffect(() => {\r\n        setCity(getClosestCity(latitude, longitude));\r\n    }, [latitude, longitude, weatherData]);\r\n\r\n    const nowString = now.toString();\r\n    useMemo(() => {\r\n        setHourAngle(computeHourAngle(now));\r\n        setDeclinationAngle(computeDeclinationAngle(now));\r\n    }, [nowString]);\r\n\r\n    const cameraPosition = new Vector3(0, 0, 5);\r\n    const panCenter = new Vector3();\r\n    if (world) {\r\n        cameraPosition.set(world.cameraPosition.x, world.cameraPosition.y, world.cameraPosition.z);\r\n        panCenter.set(world.panCenter.x, world.panCenter.y, world.panCenter.z);\r\n    }\r\n\r\n    const setGrid = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.grid = on;\r\n        });\r\n    };\r\n\r\n    const setGroundImage = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.groundImage = on;\r\n        });\r\n    };\r\n\r\n    const setGroundColor = (color: string) => {\r\n        setCommonStore(state => {\r\n            state.groundColor = color;\r\n        });\r\n    };\r\n\r\n    const setHeliodon = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.heliodon = on;\r\n        });\r\n    };\r\n\r\n    // animation state should not be persisted\r\n    const setSunAnimation = (on: boolean) => {\r\n        setAnimateSun(on);\r\n    };\r\n\r\n    const changeDate = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setFullYear(date.getFullYear());\r\n        d.setMonth(date.getMonth());\r\n        d.setDate(date.getDate());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeTime = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setHours(date.getHours(), date.getMinutes());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeLatitude = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n        });\r\n    };\r\n\r\n    const changeLatitudeAndRemoveAddress = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n            state.address = '';\r\n        });\r\n    };\r\n\r\n    const changeLongitude = (longitude: number) => {\r\n        setCommonStore(state => {\r\n            state.longitude = longitude;\r\n        });\r\n    };\r\n\r\n    const changeMapZoom = (zoom: number) => {\r\n        setCommonStore(state => {\r\n            state.mapZoom = zoom;\r\n        });\r\n    };\r\n\r\n    const changeMapTilt = (tilt: number) => {\r\n        setCommonStore(state => {\r\n            state.mapTilt = tilt;\r\n        });\r\n    };\r\n\r\n    const changeMapType = (type: string) => {\r\n        setCommonStore(state => {\r\n            state.mapType = type;\r\n        });\r\n    };\r\n\r\n    const sunAboveHorizon = sunlightDirection.y > 0;\r\n\r\n    const collectDailyLightSensorData = () => {\r\n        setCommonStore(state => {\r\n            state.timesPerHour = 20;\r\n        });\r\n        setDailyLightSensorDataFlag(!dailyLightSensorDataFlag);\r\n        setCommonStore(state => {\r\n            state.showDailyLightSensorPanel = true;\r\n        });\r\n    };\r\n\r\n    const collectYearlyLightSensorData = async () => {\r\n        setCommonStore(state => {\r\n            state.timesPerHour = 20;\r\n        });\r\n        setYearlyLightSensorDataFlag(!yearlyLightSensorDataFlag);\r\n        setCommonStore(state => {\r\n            state.showYearlyLightSensorPanel = true;\r\n        });\r\n    };\r\n\r\n    const openAboutUs = (on: boolean) => {\r\n        setAboutUs(on);\r\n    };\r\n\r\n    console.log('x')\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div style={{\r\n                backgroundColor: 'lightblue',\r\n                height: '72px',\r\n                paddingTop: '10px',\r\n                fontSize: '30px'\r\n            }}>\r\n                <img alt='Aladdin Logo' src={aladdinLogo} height='50px' style={{verticalAlign: 'middle'}}/>\r\n                <span style={{paddingLeft: '20px', verticalAlign: 'middle'}}>Aladdin</span>\r\n            </div>\r\n            <div style={{\r\n                position: 'absolute',\r\n                bottom: '10px',\r\n                left: '10px',\r\n                zIndex: 999,\r\n                fontSize: '12px',\r\n                color: 'white'\r\n            }}>\r\n                <img alt='IFI Logo'\r\n                     src={ifiLogo}\r\n                     height='40px'\r\n                     style={{verticalAlign: 'bottom', cursor: 'pointer'}}\r\n                     title={'Go to Institute for Future Intelligence'}\r\n                     onClick={visitIFI}/>\r\n                &nbsp;&nbsp; Institute for Future Intelligence, &copy;{new Date().getFullYear()}. Version {VERSION}\r\n            </div>\r\n            <MainMenu\r\n                collectDailyLightSensorData={collectDailyLightSensorData}\r\n                collectYearlyLightSensorData={collectYearlyLightSensorData}\r\n                openAboutUs={openAboutUs}\r\n            />\r\n            <MainToolBar orbitControls={orbitControlsRef.current}/>\r\n            {showGroundPanel &&\r\n            <GroundPanel grid={grid}\r\n                         groundImage={groundImage}\r\n                         groundColor={groundColor}\r\n                         setGrid={setGrid}\r\n                         setGroundImage={setGroundImage}\r\n                         setGroundColor={setGroundColor}\r\n                         changeLatitude={changeLatitude}\r\n                         changeLongitude={changeLongitude}\r\n                         changeMapZoom={changeMapZoom}\r\n                         changeMapTilt={changeMapTilt}\r\n                         changeMapType={changeMapType}\r\n            />}\r\n            {showHeliodonPanel &&\r\n            <HeliodonPanel latitude={latitude}\r\n                           date={now}\r\n                           heliodon={heliodon}\r\n                           animateSun={animateSun}\r\n                           changeDate={changeDate}\r\n                           changeTime={changeTime}\r\n                           changeLatitude={changeLatitudeAndRemoveAddress}\r\n                           setHeliodon={setHeliodon}\r\n                           setSunAnimation={setSunAnimation}\r\n            />}\r\n            {showYearlyLightSensorPanel && <YearlyLightSensorPanel city={city}/>}\r\n            {showDailyLightSensorPanel && <DailyLightSensorPanel city={city}/>}\r\n            {showWeatherPanel &&\r\n            <WeatherPanel city={city}\r\n                          graphs={[GraphDataType.MonthlyTemperatures, GraphDataType.SunshineHours]}\r\n            />}\r\n            {aboutUs && <About openAboutUs={openAboutUs}/>}\r\n            <Dropdown key={'canvas-context-menu'}\r\n                      trigger={['contextMenu']}\r\n                      overlay={\r\n                          <ContextMenu\r\n                              city={city}\r\n                              collectDailyLightSensorData={collectDailyLightSensorData}\r\n                              collectYearlyLightSensorData={collectYearlyLightSensorData}\r\n                          />\r\n                      }>\r\n                <div>\r\n                    <Canvas shadows={true}\r\n                            camera={{\r\n                                position: cameraPosition,\r\n                                fov: 45,\r\n                            }}\r\n                            style={{height: 'calc(100vh - 70px)', backgroundColor: 'black'}}>\r\n                        <OrbitController\r\n                            enabled={enableOrbitController}\r\n                            autoRotate={autoRotate}\r\n                            panCenter={panCenter}\r\n                            orbitControlsRef={orbitControlsRef}\r\n                        />\r\n                        <Suspense fallback={null}>\r\n                            <ElementsRenderer/>\r\n                            <ambientLight intensity={0.25} name={'Ambient Light'}/>\r\n                            <directionalLight\r\n                                name={'Directional Light'}\r\n                                color='white'\r\n                                position={[sunlightDirection.x, sunlightDirection.y, sunlightDirection.z]}\r\n                                intensity={sunAboveHorizon ? 0.5 : 0}\r\n                                castShadow\r\n                                shadow-mapSize-height={512}\r\n                                shadow-mapSize-width={512}\r\n                            />\r\n                            {(grid || !enableOrbitController) &&\r\n                            <gridHelper name={'Grid'} args={[100, 100, 'gray', 'gray']}/>\r\n                            }\r\n                            <Compass/>\r\n                            {/*<Obj/>*/}\r\n                            <Simulation city={city}\r\n                                        dailyLightSensorDataFlag={dailyLightSensorDataFlag}\r\n                                        yearlyLightSensorDataFlag={yearlyLightSensorDataFlag}/>\r\n                            {axes && <Axes/>}\r\n                            <Ground/>\r\n                            {groundImage && <GroundImage/>}\r\n                            <Sky theme={theme} night={!sunAboveHorizon}/>\r\n                            {heliodon &&\r\n                            <Heliodon\r\n                                hourAngle={hourAngle}\r\n                                declinationAngle={declinationAngle}\r\n                                radius={radius}\r\n                                date={now}\r\n                                latitude={Util.toRadians(latitude)}\r\n                            />}\r\n                        </Suspense>\r\n                    </Canvas>\r\n                </div>\r\n            </Dropdown>\r\n            <AcceptCookie/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}