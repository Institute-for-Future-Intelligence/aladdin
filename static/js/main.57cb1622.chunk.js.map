{"version":3,"sources":["types.ts","resources/weather.csv","util.ts","stores/common.ts","assets/menu.svg","orbitController.tsx","resources/daysky.jpg","resources/nightsky.jpg","resources/desert.jpg","resources/desert-night.jpg","resources/grassland.jpg","resources/grassland-night.jpg","views/sky.tsx","views/axes.tsx","assets/compass.obj","fonts/helvetiker_regular.typeface.fnt","views/compass.tsx","views/foundation.tsx","views/sensor.tsx","views/cuboid.tsx","scene.tsx","views/ground.tsx","views/sunTools.ts","views/heliodon.tsx","assets/aladdin-logo.png","assets/ifi-logo.png","components/symbols.tsx","mainMenu.tsx","components/maps.tsx","components/spinner.tsx","groundPanel.tsx","heliodonPanel.tsx","constants.ts","helpers.ts","acceptCookie.tsx","views/groundImage.tsx","contextMenu.tsx","components/barGraph.tsx","components/lineGraph.tsx","weatherPanel.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["WeatherDataType","Theme","ObjectType","Util","Vector3","Math","PI","degrees","radians","sphereCoords","a","x","cos","z","y","sin","set","lng1","lat1","lng2","lat2","toRadians","acos","abs","date","now","Date","start","getFullYear","diff","getTime","floor","extend","TextSprite","OrbitControls","enableMapSet","_defs","_path","_path2","_path3","_path4","_path5","_path6","useStore","create","devtools","persist","get","api","immerSet","fn","produce","showGroundPanel","showHeliodonPanel","showWeatherPanel","grid","axes","groundImage","groundColor","theme","heliodon","address","latitude","longitude","mapZoom","mapType","mapTilt","mapWeatherStations","toString","weatherData","worlds","getWorld","name","createNewWorld","state","elements","e1","type","Foundation","cx","cy","lx","ly","height","id","e2","Cuboid","e3","Sensor","light","heatFlux","push","world","cameraPosition","clickObjectType","getSelectedElement","e","selected","loadWeatherData","data","Papa","parse","weather","download","complete","results","row","Array","isArray","length","lows","highs","sun","i","parseFloat","trim","wm","city","country","elevation","lowestTemperatures","highestTemperatures","sunshineHours","getWeather","location","getClosestCity","lat","lng","distance","min","Number","MAX_VALUE","wd","hasOwnProperty","getDistance","OrbitController","setCommonStore","useThree","camera","domElement","gl","controls","useRef","useEffect","c","current","target","addEventListener","onInteractionEnd","removeEventListener","w","position","ref","args","enableZoom","maxAzimuthAngle","minAzimuthAngle","Sky","night","props","meshRef","texture","useMemo","loader","TextureLoader","load","DesertNightSkyImage","DesertDaySkyImage","GrasslandNightSkyImage","GrasslandDaySkyImage","DefaultNightSkyImage","DefaultDaySkyImage","clickSky","intersections","object","scale","onContextMenu","onClick","map","side","DoubleSide","opacity","color","Axes","lineWidth","endPoint","Line","points","Compass","model","useLoader","OBJLoader","compassObj","font","FontLoader","helvetikerFont","mesh","textGeometryParams","size","textMaterial","MeshBasicMaterial","compassMaterial","useFrame","v","unproject","rotation","Euler","material","lineColor","hovered","baseRef","handleLLRef","handleULRef","handleLRRef","handleURRef","positionLL","positionUL","positionLR","positionUR","selectMe","hoverMe","on","castShadow","receiveShadow","onPointerOver","onPointerOut","attach","text","fontSize","fontFace","textHeight","showLabel","handleRef","handleLLTopRef","handleULTopRef","handleLRTopRef","handleURTopRef","handleLLBotRef","handleULBotRef","handleLRBotRef","handleURBotRef","positionLLTop","positionULTop","positionLRTop","positionURTop","positionLLBot","positionULBot","positionLRBot","positionURBot","Scene","filter","Ground","planeRef","selectNone","TILT_ANGLE","computeDeclinationAngle","days","TWO_PI","computeHourAngle","getHours","getMinutes","computeSunLocation","radius","hourAngle","declinationAngle","cosDec","sinDec","cosLat","sinLat","cosHou","sinHou","altitudeAngle","asin","xAzm","yAzm","azimuthAngle","atan2","coords","sphericalToCartesianZ","Heliodon","basePoints","tickPoints","step","counter","angle","theta","width","p","ZERO_TOLERANCE","basePositions","Float32Array","baseNormals","baseColors","j","sunPathPoints","h","getSunPathPointsByDate","d","pointArraySunPaths","dMin","delta","arr","sunPosition","sunbeltGeometry","declinationStep","hourStep","geometry","BufferGeometry","verticesCount","vertices","indices","h2","d2","v1","v2","v3","v4","setFromPoints","setIndex","BufferAttribute","Uint16Array","attachObject","count","array","itemSize","vertexColors","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","index","Color","transparent","clippingPlanes","Plane","UNIT_VECTOR_POS_Y","SphereGeometry","_extends","Object","assign","arguments","source","key","prototype","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgMenu","_ref","svgRef","title","titleId","t","className","viewBox","xmlns","xmlnsXlink","Direction","ForwardRef","StyledMenuSVG","styled","MenuSVG","MainMenu","menu","Item","checked","onChange","overlay","trigger","containerStyle","border","Maps","setLatitude","setLongitude","setZoom","setTilt","setType","zoom","tilt","useState","setMap","bounds","cities","updateFlag","setUpdateFlag","onLoad","useCallback","onUnmount","latLng","mapContainerStyle","mapTypeId","center","onBoundsChanged","getBounds","pos","google","maps","LatLng","contains","loadCities","onCenterChanged","getCenter","onZoomChanged","getZoom","onTiltChanged","getTilt","onMapTypeIdChanged","typeId","getMapTypeId","icon","path","SymbolPath","CIRCLE","strokeColor","strokeWeight","memo","Spin","libraries","Container","div","ColumnWrapper","Header","GroundPanel","setGrid","setGroundImage","setGroundColor","changeLatitude","changeLongitude","changeMapZoom","changeMapTilt","changeMapType","searchBox","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","style","cursor","direction","padding","align","onChangeComplete","colorResult","hex","s","onPlacesChanged","places","getPlaces","formatted_address","placeholder","boxSizing","borderRadius","boxShadow","outline","textOverflow","toFixed","HeliodonPanel","animateSun","setHeliodon","setSunAnimation","changeDate","changeTime","requestRef","previousFrameTime","requestAnimationFrame","animate","cancelAnimationFrame","currentFrameTime","day","getDate","setHours","setDate","value","moment","toDate","format","marks","0","90","max","tooltipVisible","defaultValue","PRESET_COLORS","MONTHS","visitIFI","window","open","AcceptCookie","buttonText","cookieName","background","textAlign","zIndex","buttonStyle","expires","GroundImage","useTexture","StyledMenu","Menu","SubMenu","radioStyle","display","paddingLeft","lineHeight","ContextMenu","selectedElement","margin","Group","Default","Desert","Grassland","BarGraph","dataSource","labelX","labelY","unitX","unitY","fractionDigits","dataSetCount","setDataSetCount","horizontalGridLines","verticalGridLines","legendDataKey","setLegendDataKey","len","getBars","bars","MonthlyTemperatures","SunshineHours","HourlyTemperatures","Bar","dataKey","fill","isAnimationActive","userSelect","top","left","ResponsiveContainer","BarChart","onMouseDown","right","bottom","Tooltip","formatter","CartesianGrid","vertical","horizontal","stroke","ReferenceLine","daysIntoYear","strokeWidth","XAxis","Label","offset","YAxis","domain","dx","Legend","iconType","verticalAlign","onMouseLeave","o","onMouseEnter","SYMBOLS","CircleSymbol","numberOfSymbols","interval","round","r","SquareSymbol","TriangleSymbol","pointsString","UP","LEFT","RIGHT","DiamondSymbol","StarSymbol","HexagonSymbol","createSymbol","DOWN","LineGraph","lineCount","setLineCount","symbolCount","symbolSize","getLines","defaultSymbol","lines","symbol","dot","LineChart","WeatherPanel","graphs","rest","responsiveHeight","getData","result","forEach","g","Month","Low","High","Sunshine","yNames","yUnits","App","setHourAngle","setDeclinationAngle","sunlightDirection","setSunlightDirection","setAnimateSun","setCity","applyEuler","nowString","console","log","sunAboveHorizon","backgroundColor","paddingTop","alt","src","aladdinLogo","ifiLogo","setFullYear","setMonth","getMonth","shadows","fov","fallback","intensity","shadow-mapSize-height","shadow-mapSize-width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57cb1622.chunk.js","sourcesContent":["/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {extend, Object3DNode} from \"@react-three/fiber\";\r\nimport TextSprite from \"three-spritetext\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\n// Extend makes these JSX elements (with the first character lower-cased)\r\nextend({TextSprite});\r\nextend({OrbitControls});\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            'textSprite': Object3DNode<TextSprite, typeof TextSprite>;\r\n            'orbitControls': Object3DNode<OrbitControls, typeof OrbitControls>;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface GraphDatumEntry {\r\n    [key: string]: number | undefined;\r\n}\r\n\r\nexport enum WeatherDataType {\r\n    HourlyTemperatures = 0,\r\n    MonthlyTemperatures = 1,\r\n    SunshineHours = 2,\r\n}\r\n\r\nexport enum Theme {\r\n    Default = 'Default',\r\n    Desert = 'Desert',\r\n    Grassland = 'Grassland',\r\n}\r\n\r\nexport enum ObjectType {\r\n    Sky = 'Sky',\r\n    Ground = 'Ground',\r\n    Foundation = 'Foundation',\r\n    Sensor = 'Sensor',\r\n    Cuboid = 'Cuboid',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/weather.55ddf5ca.csv\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Vector3} from \"three\";\r\n\r\nexport class Util {\r\n\r\n    static get UNIT_VECTOR_POS_X() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_X() {\r\n        return new Vector3(-1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Y() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Y() {\r\n        return new Vector3(0, -1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Z() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Z() {\r\n        return new Vector3(0, 0, -1);\r\n    }\r\n\r\n    static get ZERO_TOLERANCE() {\r\n        return 0.0001;\r\n    }\r\n\r\n    static get HALF_PI() {\r\n        return Math.PI / 2;\r\n    }\r\n\r\n    static get TWO_PI() {\r\n        return Math.PI * 2;\r\n    }\r\n\r\n    static toRadians(degrees: number) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    static toDegrees(radians: number) {\r\n        return radians * (180 / Math.PI);\r\n    }\r\n\r\n    static sphericalToCartesianZ(sphereCoords: Vector3) {\r\n        let a = sphereCoords.x * Math.cos(sphereCoords.z);\r\n        let x = a * Math.cos(sphereCoords.y);\r\n        let y = a * Math.sin(sphereCoords.y);\r\n        let z = sphereCoords.x * Math.sin(sphereCoords.z);\r\n        sphereCoords.set(x, y, z);\r\n        return sphereCoords;\r\n    }\r\n\r\n    // the spherical law of cosines: https://en.wikipedia.org/wiki/Spherical_law_of_cosines\r\n    static getDistance(lng1: number, lat1: number, lng2: number, lat2: number) {\r\n        lng1 = Util.toRadians(lng1);\r\n        lat1 = Util.toRadians(lat1);\r\n        lng2 = Util.toRadians(lng2);\r\n        lat2 = Util.toRadians(lat2);\r\n        return Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(Math.abs(lng1 - lng2)));\r\n    }\r\n\r\n    static daysIntoYear(date: string) {\r\n        const now = new Date(date);\r\n        const start = new Date(now.getFullYear(), 0, 0);\r\n        const diff = now.getTime() - start.getTime();\r\n        const oneDay = 1000 * 60 * 60 * 24;\r\n        return Math.floor(diff / oneDay);\r\n    }\r\n\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport create from 'zustand';\r\nimport {devtools, persist} from 'zustand/middleware';\r\nimport produce, {enableMapSet} from 'immer';\r\nimport {WorldModel} from \"../models/worldModel\";\r\nimport {Vector3} from \"three\";\r\nimport {ElementModel} from \"../models/elementModel\";\r\nimport {WeatherModel} from \"../models/weatherModel\";\r\nimport weather from '../resources/weather.csv';\r\nimport Papa from \"papaparse\";\r\nimport {Util} from \"../util\";\r\nimport {ObjectType} from \"../types\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\nimport {CuboidModel} from \"../models/cuboidModel\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\n\r\nenableMapSet();\r\n\r\nexport interface CommonStoreState {\r\n    set: (fn: (state: CommonStoreState) => void) => void;\r\n    worlds: { [key: string]: WorldModel };\r\n    createNewWorld: () => void;\r\n    getWorld: (name: string) => WorldModel;\r\n\r\n    showGroundPanel: boolean;\r\n    showHeliodonPanel: boolean;\r\n    showWeatherPanel: boolean;\r\n\r\n    grid: boolean;\r\n    axes: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    theme: string;\r\n    heliodon: boolean;\r\n    address: string;\r\n    latitude: number;\r\n    longitude: number;\r\n    mapZoom: number;\r\n    mapType: string;\r\n    mapTilt: number;\r\n    mapWeatherStations: boolean;\r\n    date: string;\r\n\r\n    weatherData: { [key: string]: WeatherModel };\r\n    getWeather: (location: string) => WeatherModel;\r\n    loadWeatherData: () => void;\r\n    getClosestCity: (lat: number, lng: number) => string | null;\r\n\r\n    clickObjectType: string | null;\r\n    getSelectedElement: () => ElementModel | null;\r\n\r\n}\r\n\r\nexport const useStore = create<CommonStoreState>(devtools(persist((\r\n    set,\r\n    get,\r\n    api,\r\n) => {\r\n\r\n    const immerSet: CommonStoreState['set'] = fn => set(produce(fn));\r\n\r\n    return {\r\n\r\n        set: immerSet,\r\n\r\n        showGroundPanel: false,\r\n        showHeliodonPanel: false,\r\n        showWeatherPanel: false,\r\n\r\n        grid: false,\r\n        axes: true,\r\n        groundImage: false,\r\n        groundColor: 'forestgreen',\r\n        theme: 'Default',\r\n        heliodon: false,\r\n\r\n        address: 'Natick, MA',\r\n        latitude: 42.2844063,\r\n        longitude: -71.3488548,\r\n        mapZoom: 16,\r\n        mapType: 'roadmap',\r\n        mapTilt: 0,\r\n        mapWeatherStations: false,\r\n        date: new Date(2021, 5, 22, 12).toString(),\r\n        weatherData: {},\r\n\r\n\r\n        worlds: {},\r\n        getWorld(name: string) {\r\n            return get().worlds[name];\r\n        },\r\n        createNewWorld() {\r\n            immerSet((state: CommonStoreState) => {\r\n                const elements: ElementModel[] = [];\r\n                const e1 = {\r\n                    type: ObjectType.Foundation,\r\n                    cx: 0,\r\n                    cy: 0,\r\n                    lx: 2,\r\n                    ly: 2,\r\n                    height: 0.1,\r\n                    id: 'f1'\r\n                } as FoundationModel;\r\n                const e2 = {\r\n                    type: ObjectType.Cuboid,\r\n                    cx: 0,\r\n                    cy: 3,\r\n                    lx: 2,\r\n                    ly: 2,\r\n                    height: 4,\r\n                    id: 'c1'\r\n                } as CuboidModel;\r\n                const e3 = {\r\n                    type: ObjectType.Sensor,\r\n                    cx: 2,\r\n                    cy: 2,\r\n                    lx: 0.05,\r\n                    ly: 0.05,\r\n                    height: 0.01,\r\n                    id: 's1',\r\n                    light: true,\r\n                    heatFlux: false\r\n                } as SensorModel;\r\n                elements.push(e1);\r\n                elements.push(e2);\r\n                elements.push(e3);\r\n                const world = {\r\n                    name: 'default',\r\n                    elements: elements,\r\n                    cameraPosition: new Vector3(0, 0, 5)\r\n                };\r\n                state.worlds[world.name] = world;\r\n            })\r\n        },\r\n\r\n        clickObjectType: null,\r\n        getSelectedElement() {\r\n            const elements = get().worlds['default'].elements;\r\n            for (const e of elements) {\r\n                if (e.selected) {\r\n                    return e;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        loadWeatherData() {\r\n            const data: WeatherModel[] = [];\r\n            Papa.parse(weather, {\r\n                download: true,\r\n                complete: function (results) {\r\n                    for (const row of results.data) {\r\n                        if (Array.isArray(row) && row.length > 1) {\r\n                            const lows: number[] = [];\r\n                            const highs: number[] = [];\r\n                            const sun: number[] = [];\r\n                            for (let i = 5; i < 29; i++) {\r\n                                if ((i - 5) % 2 === 0) {\r\n                                    lows.push(parseFloat(row[i].trim()));\r\n                                } else {\r\n                                    highs.push(parseFloat(row[i].trim()));\r\n                                }\r\n                            }\r\n                            for (let i = 29; i < 41; i++) {\r\n                                sun.push(parseFloat(row[i].trim()));\r\n                            }\r\n                            const wm = {\r\n                                city: row[0].trim(),\r\n                                country: row[1].trim(),\r\n                                longitude: parseFloat(row[2].trim()),\r\n                                latitude: parseFloat(row[3].trim()),\r\n                                elevation: parseFloat(row[4].trim()),\r\n                                lowestTemperatures: lows,\r\n                                highestTemperatures: highs,\r\n                                sunshineHours: sun\r\n                            } as WeatherModel;\r\n                            data.push(wm);\r\n                        }\r\n                    }\r\n                    immerSet((state: CommonStoreState) => {\r\n                        for (const row of data) {\r\n                            state.weatherData[row.city + ', ' + row.country] = row;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        getWeather(location: string) {\r\n            return get().weatherData[location];\r\n        },\r\n        getClosestCity(lat: number, lng: number) {\r\n            let min: number = Number.MAX_VALUE;\r\n            let city = null;\r\n            let distance: number;\r\n            const wd = get().weatherData;\r\n            for (const name in wd) {\r\n                if (wd.hasOwnProperty(name)) {\r\n                    distance = Util.getDistance(lng, lat, wd[name].longitude, wd[name].latitude);\r\n                    if (distance < min) {\r\n                        min = distance;\r\n                        city = name;\r\n                    }\r\n                }\r\n            }\r\n            return city;\r\n        }\r\n    };\r\n}, {name: 'aladdin-storage'})));\r\n\r\n","var _defs, _path, _path2, _path3, _path4, _path5, _path6;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgMenu(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    t: 1613755944969,\n    className: \"icon\",\n    viewBox: \"0 0 1024 1024\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"p-id\": 5967,\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 200,\n    height: 200,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 235.50871m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5968\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 165.510915h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5969\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 512.1129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5970\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 442.115105h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5971\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 788.49129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5972\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 718.719294h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5973\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMenu);\nexport default __webpack_public_path__ + \"static/media/menu.c2982aed.svg\";\nexport { ForwardRef as ReactComponent };","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {useThree} from \"@react-three/fiber\";\r\nimport {useStore} from \"./stores/common\";\r\n\r\nexport interface OrbitControllerProps {\r\n    [key: string]: any;\r\n}\r\n\r\n// Get a reference to the Three.js Camera, and the canvas html element.\r\n// We need these to setup the OrbitControls class.\r\n// https://threejs.org/docs/#examples/en/controls/OrbitControls\r\nconst OrbitController = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const {camera, gl: {domElement}} = useThree();\r\n    // Ref to the controls, so that we can update them on every frame using useFrame\r\n    const controls = useRef<OrbitControls>(null);\r\n\r\n    useEffect(() => {\r\n        const c = controls.current;\r\n        if (c) {\r\n            c.target.set(0, 0, 0);\r\n            c.addEventListener('end', onInteractionEnd);\r\n        }\r\n        return () => {\r\n            c?.removeEventListener('end', onInteractionEnd);\r\n        }\r\n    });\r\n\r\n    const onInteractionEnd = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                // FIXME: why can't set function be used?\r\n                w.cameraPosition.x = camera.position.x;\r\n                w.cameraPosition.y = camera.position.y;\r\n                w.cameraPosition.z = camera.position.z;\r\n            }\r\n        });\r\n    };\r\n\r\n    // animation\r\n    // useFrame((state) => {\r\n    //     if (controls.current) {\r\n    //         controls.current.update();\r\n    //     }\r\n    // });\r\n\r\n    return (\r\n        <orbitControls\r\n            ref={controls}\r\n            args={[camera, domElement]}\r\n            enableZoom={true}\r\n            maxAzimuthAngle={Math.PI}\r\n            minAzimuthAngle={-Math.PI}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default OrbitController;\r\n","export default __webpack_public_path__ + \"static/media/daysky.66925efd.jpg\";","export default __webpack_public_path__ + \"static/media/nightsky.2ee37da6.jpg\";","export default __webpack_public_path__ + \"static/media/desert.e1e10657.jpg\";","export default __webpack_public_path__ + \"static/media/desert-night.6f0f274c.jpg\";","export default __webpack_public_path__ + \"static/media/grassland.d74bba81.jpg\";","export default __webpack_public_path__ + \"static/media/grassland-night.fa2ff11e.jpg\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useRef} from \"react\";\r\nimport DefaultDaySkyImage from \"../resources/daysky.jpg\";\r\nimport DefaultNightSkyImage from \"../resources/nightsky.jpg\";\r\nimport DesertDaySkyImage from \"../resources/desert.jpg\";\r\nimport DesertNightSkyImage from \"../resources/desert-night.jpg\";\r\nimport GrasslandDaySkyImage from \"../resources/grassland.jpg\";\r\nimport GrasslandNightSkyImage from \"../resources/grassland-night.jpg\";\r\nimport {DoubleSide, Mesh, TextureLoader} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {ObjectType} from \"../types\";\r\nimport {ThreeEvent} from \"@react-three/fiber\";\r\n\r\nexport interface SkyProps {\r\n    theme?: string,\r\n    night?: boolean,\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Sky = ({\r\n                 theme = 'Default',\r\n                 night = false,\r\n                 ...props\r\n             }: SkyProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const meshRef = useRef<Mesh>(null!);\r\n    const texture = useMemo(() => {\r\n        const loader = new TextureLoader();\r\n        let texture;\r\n        switch (theme) {\r\n            case 'Desert':\r\n                texture = loader.load(night ? DesertNightSkyImage : DesertDaySkyImage);\r\n                break;\r\n            case 'Grassland':\r\n                texture = loader.load(night ? GrasslandNightSkyImage : GrasslandDaySkyImage);\r\n                break;\r\n            default:\r\n                texture = loader.load(night ? DefaultNightSkyImage : DefaultDaySkyImage);\r\n        }\r\n        return texture;\r\n    }, [theme, night]);\r\n\r\n    const selectNone = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const clickSky = (e: ThreeEvent<MouseEvent>) => {\r\n        if (e.intersections.length > 0) {\r\n            const skyClicked = e.intersections[0].object === meshRef.current;\r\n            if (skyClicked) {\r\n                selectNone();\r\n                setCommonStore((state) => {\r\n                    state.clickObjectType = ObjectType.Sky;\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={meshRef}\r\n            name={'Sky'}\r\n            scale={1}\r\n            onContextMenu={(e) => {\r\n                clickSky(e);\r\n            }}\r\n            onClick={(e) => {\r\n                clickSky(e);\r\n            }}\r\n        >\r\n            <sphereGeometry args={[1000, 16, 16, 0, 2 * Math.PI, 0, Math.PI / 2 + 0.01]}/>\r\n            <meshBasicMaterial map={texture}\r\n                               side={DoubleSide}\r\n                               opacity={1}\r\n                               color={'skyblue'}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Sky;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {Vector3} from \"three\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface AxesProps {\r\n    lineWidth?: number,\r\n    endPoint?: number,\r\n}\r\n\r\nconst Axes = ({lineWidth = 1, endPoint = 1000}: AxesProps) => {\r\n    return (\r\n        <mesh>\r\n            <Line points={[new Vector3(-endPoint, 0, 0), new Vector3(endPoint, 0, 0)]}\r\n                  color={'red'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, -endPoint, 0), new Vector3(0, endPoint, 0)]}\r\n                  color={'green'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, 0, -endPoint), new Vector3(0, 0, endPoint)]}\r\n                  color={'blue'}\r\n                  lineWidth={lineWidth}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Axes;\r\n","export default __webpack_public_path__ + \"static/media/compass.7ded737e.obj\";","export default __webpack_public_path__ + \"static/media/helvetiker_regular.typeface.9a3651b4.fnt\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {useFrame, useLoader, useThree} from '@react-three/fiber'\r\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\r\nimport {Euler, FontLoader, Mesh, MeshBasicMaterial, TextGeometryParameters, Vector3} from \"three\";\r\nimport compassObj from '../assets/compass.obj';\r\nimport helvetikerFont from '../fonts/helvetiker_regular.typeface.fnt';\r\n\r\nexport interface CompassProps {\r\n    scale?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Compass = ({\r\n                     scale = 0.01,\r\n                     ...props\r\n                 }: CompassProps) => {\r\n    const model = useLoader(OBJLoader, compassObj);\r\n    const font = useLoader(FontLoader, helvetikerFont);\r\n    const mesh = useRef<Mesh>(null!);\r\n    const textGeometryParams = {font: font, height: 0.00, size: 0.005} as TextGeometryParameters;\r\n    const textMaterial = new MeshBasicMaterial({color: 'white'});\r\n    const compassMaterial = new MeshBasicMaterial({color: 'red'});\r\n\r\n    // FIXME: This is not the right way to fix the compass\r\n    const {camera} = useThree();\r\n    useFrame((state) => {\r\n        if (mesh.current) {\r\n            const v = new Vector3(0.88, -0.8, 0.1).unproject(camera);\r\n            mesh.current.position.set(v.x, v.y, v.z);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={mesh}\r\n            rotation={new Euler(-Math.PI / 2, 0, 0)}\r\n        >\r\n            <mesh position={[-0.001, 0.02, 0]} material={textMaterial}>\r\n                <textGeometry args={['N', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.0015, -0.025, 0]} material={textMaterial}>\r\n                <textGeometry args={['S', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.025, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['W', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[0.02, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['E', textGeometryParams]}/>\r\n            </mesh>\r\n            <primitive object={model} scale={scale} material={compassMaterial}/>\r\n        </mesh>\r\n    );\r\n};\r\n\r\nexport default Compass;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\n\r\nconst Foundation = ({\r\n                        id,\r\n                        cx,\r\n                        cy,\r\n                        lx = 1,\r\n                        ly = 1,\r\n                        height = 0.1,\r\n                        color = 'gray',\r\n                        lineColor = 'black',\r\n                        lineWidth = 0.1,\r\n                        hovered = false,\r\n                        selected = false,\r\n                    }: FoundationModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n\r\n    const baseRef = useRef();\r\n    const handleLLRef = useRef();\r\n    const handleULRef = useRef();\r\n    const handleLRRef = useRef();\r\n    const handleURRef = useRef();\r\n\r\n    const positionLL = new Vector3(cx - lx / 2, height / 2, cy - ly / 2);\r\n    const positionUL = new Vector3(cx - lx / 2, height / 2, cy + ly / 2);\r\n    const positionLR = new Vector3(cx + lx / 2, height / 2, cy - ly / 2);\r\n    const positionUR = new Vector3(cx + lx / 2, height / 2, cy + ly / 2);\r\n\r\n    const selectMe = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const hoverMe = (on: boolean) => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    if (e.id === id) {\r\n                        e.hovered = on;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group>\r\n\r\n            {/* draw rectangle */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Foundation'}\r\n                 onClick={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onContextMenu={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             hoverMe(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     hoverMe(false);\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}>\r\n                <meshStandardMaterial attach=\"material\" color={color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLL.x, height, positionLL.z], [positionLR.x, height, positionLR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, height, positionLR.z], [positionUR.x, height, positionUR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, height, positionUR.z], [positionUL.x, height, positionUL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, height, positionUL.z], [positionLL.x, height, positionLL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line points={[[positionLL.x, 0, positionLL.z], [positionLR.x, 0, positionLR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, 0, positionLR.z], [positionUR.x, 0, positionUR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, 0, positionUR.z], [positionUL.x, 0, positionUL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, 0, positionUL.z], [positionLL.x, 0, positionLL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line points={[[positionLL.x, 0, positionLL.z], [positionLL.x, height, positionLL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, 0, positionLR.z], [positionLR.x, height, positionLR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, 0, positionUL.z], [positionUL.x, height, positionUL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, 0, positionUR.z], [positionUR.x, height, positionUR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n            </>\r\n\r\n            {/* draw handles */}\r\n            {selected &&\r\n            <>\r\n                <Sphere ref={handleLLRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleULRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionUL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleLRRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleURRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionUR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n            </>\r\n            }\r\n\r\n            {hovered &&\r\n            <textSprite\r\n                text={'Foundation'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[1, 0.2, 0.2]}\r\n                position={[cx, height + 0.2, cy]}\r\n            />\r\n            }\r\n\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Foundation;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {SensorModel} from \"../models/sensorModel\";\r\n\r\nconst Sensor = ({\r\n                    id,\r\n                    cx,\r\n                    cy,\r\n                    lx = 1,\r\n                    ly = 1,\r\n                    height = 0.1,\r\n                    color = 'gray',\r\n                    lineColor = 'black',\r\n                    lineWidth = 0.1,\r\n                    hovered = false,\r\n                    selected = false,\r\n                    showLabel = true,\r\n                    light = true,\r\n                    heatFlux = false,\r\n                }: SensorModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n\r\n    const baseRef = useRef();\r\n    const handleRef = useRef();\r\n\r\n    const position = new Vector3(cx, height / 2, cy);\r\n    const positionLL = new Vector3(cx - lx / 2, height / 2, cy - ly / 2);\r\n    const positionUL = new Vector3(cx - lx / 2, height / 2, cy + ly / 2);\r\n    const positionLR = new Vector3(cx + lx / 2, height / 2, cy - ly / 2);\r\n    const positionUR = new Vector3(cx + lx / 2, height / 2, cy + ly / 2);\r\n\r\n    const selectMe = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const hoverMe = (on: boolean) => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    if (e.id === id) {\r\n                        e.hovered = on;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group>\r\n\r\n            {/* draw rectangle */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Foundation'}\r\n                 onClick={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onContextMenu={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             hoverMe(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     hoverMe(false);\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}\r\n            >\r\n                <meshStandardMaterial attach=\"material\" color={color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLL.x, height, positionLL.z], [positionLR.x, height, positionLR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, height, positionLR.z], [positionUR.x, height, positionUR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, height, positionUR.z], [positionUL.x, height, positionUL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, height, positionUL.z], [positionLL.x, height, positionLL.z]]}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line points={[[positionLL.x, 0, positionLL.z], [positionLR.x, 0, positionLR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, 0, positionLR.z], [positionUR.x, 0, positionUR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, 0, positionUR.z], [positionUL.x, 0, positionUL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, 0, positionUL.z], [positionLL.x, 0, positionLL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line points={[[positionLL.x, 0, positionLL.z], [positionLL.x, height, positionLL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, 0, positionLR.z], [positionLR.x, height, positionLR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, 0, positionUL.z], [positionUL.x, height, positionUL.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, 0, positionUR.z], [positionUR.x, height, positionUR.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n            </>\r\n\r\n            {/* draw handle */}\r\n            {selected &&\r\n            <Sphere\r\n                ref={handleRef}\r\n                args={[0.1, 6, 6]}\r\n                position={position}>\r\n                <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n            </Sphere>\r\n            }\r\n            {(hovered || showLabel) &&\r\n            <textSprite\r\n                text={'Sensor'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[0.5, 0.2, 0.2]}\r\n                position={[cx, height + 0.2, cy]}\r\n            />\r\n            }\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Sensor;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {CuboidModel} from \"../models/cuboidModel\";\r\n\r\nconst Cuboid = ({\r\n                    id,\r\n                    cx,\r\n                    cy,\r\n                    lx = 1,\r\n                    ly = 1,\r\n                    height = 1,\r\n                    color = 'white',\r\n                    lineColor = 'black',\r\n                    lineWidth = 0.1,\r\n                    hovered = false,\r\n                    selected = false,\r\n                }: CuboidModel) => {\r\n\r\n    cy = -cy; // we want positive y to point north\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n\r\n    const baseRef = useRef();\r\n    const handleLLTopRef = useRef();\r\n    const handleULTopRef = useRef();\r\n    const handleLRTopRef = useRef();\r\n    const handleURTopRef = useRef();\r\n    const handleLLBotRef = useRef();\r\n    const handleULBotRef = useRef();\r\n    const handleLRBotRef = useRef();\r\n    const handleURBotRef = useRef();\r\n\r\n    const positionLLTop = new Vector3(cx - lx / 2, height, cy - ly / 2);\r\n    const positionULTop = new Vector3(cx - lx / 2, height, cy + ly / 2);\r\n    const positionLRTop = new Vector3(cx + lx / 2, height, cy - ly / 2);\r\n    const positionURTop = new Vector3(cx + lx / 2, height, cy + ly / 2);\r\n\r\n    const positionLLBot = new Vector3(cx - lx / 2, 0, cy - ly / 2);\r\n    const positionULBot = new Vector3(cx - lx / 2, 0, cy + ly / 2);\r\n    const positionLRBot = new Vector3(cx + lx / 2, 0, cy - ly / 2);\r\n    const positionURBot = new Vector3(cx + lx / 2, 0, cy + ly / 2);\r\n\r\n    const selectMe = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const hoverMe = (on: boolean) => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    if (e.id === id) {\r\n                        e.hovered = on;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group>\r\n\r\n            {/* draw rectangular cuboid */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Foundation'}\r\n                 onClick={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onContextMenu={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             hoverMe(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     hoverMe(false);\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}>\r\n                <meshStandardMaterial attach=\"material\" color={color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLLTop.x, height, positionLLTop.z], [positionLRTop.x, height, positionLRTop.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLRTop.x, height, positionLRTop.z], [positionURTop.x, height, positionURTop.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionURTop.x, height, positionURTop.z], [positionULTop.x, height, positionULTop.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionULTop.x, height, positionULTop.z], [positionLLTop.x, height, positionLLTop.z]]}\r\n                      lineWidth={lineWidth}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line\r\n                    points={[[positionLLTop.x, 0, positionLLTop.z], [positionLRTop.x, 0, positionLRTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[[positionLRTop.x, 0, positionLRTop.z], [positionURTop.x, 0, positionURTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[[positionURTop.x, 0, positionURTop.z], [positionULTop.x, 0, positionULTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[[positionULTop.x, 0, positionULTop.z], [positionLLTop.x, 0, positionLLTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line\r\n                    points={[[positionLLTop.x, 0, positionLLTop.z], [positionLLTop.x, height, positionLLTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[[positionLRTop.x, 0, positionLRTop.z], [positionLRTop.x, height, positionLRTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[[positionULTop.x, 0, positionULTop.z], [positionULTop.x, height, positionULTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n                <Line\r\n                    points={[[positionURTop.x, 0, positionURTop.z], [positionURTop.x, height, positionURTop.z]]}\r\n                    lineWidth={lineWidth}\r\n                    color={lineColor}/>\r\n            </>\r\n\r\n            {/* draw handles */}\r\n            {selected &&\r\n            <>\r\n                <Sphere ref={handleLLTopRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLLTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleULTopRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionULTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleLRTopRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLRTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleURTopRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionURTop}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleLLBotRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLLBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleULBotRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionULBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleLRBotRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLRBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleURBotRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionURBot}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n            </>\r\n            }\r\n\r\n            {hovered &&\r\n            <textSprite\r\n                text={'Box'}\r\n                fontSize={90}\r\n                fontFace={'Times Roman'}\r\n                textHeight={1}\r\n                scale={[0.4, 0.2, 0.2]}\r\n                position={[cx, height + 0.2, cy]}\r\n            />\r\n            }\r\n\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Cuboid;\r\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport Foundation from \"./views/foundation\";\nimport Sensor from \"./views/sensor\";\nimport Cuboid from \"./views/cuboid\";\nimport {WorldModel} from \"./models/worldModel\";\nimport {ObjectType} from \"./types\";\nimport {FoundationModel} from \"./models/foundationModel\";\nimport {SensorModel} from \"./models/sensorModel\";\nimport {CuboidModel} from \"./models/cuboidModel\";\n\nconst Scene: React.FC<{ world: WorldModel }> = ({world}) => {\n    return (\n        <group>\n            {world.elements\n                .filter(e => e.type === ObjectType.Foundation)\n                .map(e => <Foundation key={e.id} {...e as FoundationModel}/>)}\n            {world.elements\n                .filter(e => e.type === ObjectType.Sensor)\n                .map(e => <Sensor key={e.id} {...e as SensorModel}/>)}\n            {world.elements\n                .filter(e => e.type === ObjectType.Cuboid)\n                .map(e => <Cuboid key={e.id} {...e as CuboidModel}/>)}\n        </group>\n    );\n};\n\nexport default Scene;\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Plane} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide} from \"three\";\r\nimport {ObjectType} from \"../types\";\r\n\r\nconst Ground = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const planeRef = useRef();\r\n\r\n    const selectNone = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Plane receiveShadow\r\n               ref={planeRef}\r\n               name={'Ground'}\r\n               onContextMenu={(e) => {\r\n                   if (e.intersections.length > 0) {\r\n                       const groundClicked = e.intersections[0].object === planeRef.current;\r\n                       if (groundClicked) {\r\n                           selectNone();\r\n                           setCommonStore((state) => {\r\n                               state.clickObjectType = ObjectType.Ground;\r\n                           });\r\n                       }\r\n                   }\r\n               }}\r\n               onClick={(e) => {\r\n                   if (e.intersections.length > 0) {\r\n                       const groundClicked = e.intersections[0].object === planeRef.current;\r\n                       if (groundClicked) {\r\n                           setCommonStore((state) => {\r\n                               state.clickObjectType = ObjectType.Ground;\r\n                           });\r\n                           selectNone();\r\n                       }\r\n                   }\r\n               }}\r\n               rotation={[-Math.PI / 2, 0, 0]}\r\n               position={[0, -0.01, 0]}\r\n               args={[10000, 10000]}>\r\n            <meshStandardMaterial side={DoubleSide} attach=\"material\" color={groundColor}/>\r\n        </Plane>\r\n    )\r\n};\r\n\r\nexport default Ground;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport {Vector3} from \"three\";\r\n\r\nexport const TILT_ANGLE = 23.45 / 180.0 * Math.PI;\r\n\r\nexport const computeDeclinationAngle = (date: Date) => {\r\n    const days = Math.floor((date.getTime()\r\n        - new Date(date.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\r\n    return TILT_ANGLE * Math.sin(Util.TWO_PI * (284 + days) / 365.25);\r\n};\r\n\r\nexport const computeHourAngle = (date: Date) => {\r\n    const minutes = date.getHours() * 60 + date.getMinutes() - 12 * 60;\r\n    return minutes / (12.0 * 60.0) * Math.PI;\r\n}\r\n\r\nexport const getSunDirection = (date: Date, latitude: number) => {\r\n    return computeSunLocation\r\n    (1, computeHourAngle(date), computeDeclinationAngle(date), Util.toRadians(latitude)).normalize();\r\n};\r\n\r\nexport const computeSunLocation = (radius: number,\r\n                                   hourAngle: number,\r\n                                   declinationAngle: number,\r\n                                   latitude: number) => {\r\n    const cosDec = Math.cos(declinationAngle);\r\n    const sinDec = Math.sin(declinationAngle);\r\n    const cosLat = Math.cos(latitude);\r\n    const sinLat = Math.sin(latitude);\r\n    const cosHou = Math.cos(hourAngle);\r\n    const sinHou = Math.sin(hourAngle);\r\n    const altitudeAngle = Math.asin(sinDec * sinLat + cosDec * cosHou * cosLat);\r\n    const xAzm = sinHou * cosDec;\r\n    const yAzm = cosLat * sinDec - cosHou * cosDec * sinLat;\r\n    const azimuthAngle = Math.atan2(yAzm, xAzm);\r\n    const coords = new Vector3(radius, azimuthAngle, altitudeAngle);\r\n    Util.sphericalToCartesianZ(coords);\r\n    // reverse the x so that sun moves from east to west\r\n    coords.x = -coords.x;\r\n    return coords;\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport React, {useEffect, useMemo} from \"react\";\r\nimport {\r\n    BufferAttribute,\r\n    BufferGeometry,\r\n    Color,\r\n    DoubleSide,\r\n    Euler,\r\n    MeshBasicMaterial,\r\n    Plane,\r\n    SphereGeometry,\r\n    Vector3\r\n} from \"three\";\r\nimport {\r\n    computeDeclinationAngle,\r\n    computeSunLocation,\r\n    TILT_ANGLE\r\n} from \"./sunTools\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface HeliodonProps {\r\n    radius: number;\r\n    hourAngle: number;\r\n    declinationAngle: number;\r\n    date: Date;\r\n    latitude: number; // in radian\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst HOUR_DIVISIONS = 96;\r\nconst BASE_DIVISIONS = 72;\r\nconst DECLINATION_DIVISIONS = 12;\r\n\r\nconst Heliodon = ({\r\n                      hourAngle,\r\n                      declinationAngle,\r\n                      radius = 10,\r\n                      date = new Date(),\r\n                      latitude = 42 / 180.0 * Math.PI,\r\n                  }: HeliodonProps) => {\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // remove listeners if any\r\n        }\r\n    }, [date, latitude]);\r\n\r\n    const nRibLines = 5;\r\n\r\n    const [basePositions, baseNormals, baseColors, tickPoints] = useMemo(() => {\r\n        const basePoints: Vector3[] = [];\r\n        const tickPoints: Vector3[] = [];\r\n        const step = Math.PI * 2 / BASE_DIVISIONS;\r\n        let counter = 0;\r\n        for (let angle = 0; angle < Util.TWO_PI + step / 2.0; angle += step) {\r\n            const theta = Math.min(angle, Util.TWO_PI);\r\n            let width = 0.05 * radius;\r\n            // TODO: This is inefficient. We should use indexed buffer to share vertices\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            let p;\r\n            if (Util.TWO_PI - theta > Util.ZERO_TOLERANCE) {\r\n                width = 0.05 * radius + (counter % 3 === 0 ? 0.2 : 0);\r\n                p = new Vector3(radius, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n                p = new Vector3(radius + width, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n            }\r\n            counter++;\r\n        }\r\n\r\n        // attributes\r\n        const length = basePoints.length * 3;\r\n        const basePositions = new Float32Array(length);\r\n        const baseNormals = new Float32Array(length);\r\n        const baseColors = new Float32Array(length);\r\n\r\n        for (let i = 0; i < basePoints.length; i++) {\r\n            const j = i * 3;\r\n            basePositions[j] = basePoints[i].x;\r\n            basePositions[j + 1] = basePoints[i].y;\r\n            basePositions[j + 2] = basePoints[i].z;\r\n            baseNormals[j] = 0;\r\n            baseNormals[j + 1] = 1;\r\n            baseNormals[j + 2] = 0;\r\n            const c = (Math.floor(i / 18)) % 2 === 0 ? 0.2 : 1.0;\r\n            baseColors[j] = c;\r\n            baseColors[j + 1] = c;\r\n            baseColors[j + 2] = c;\r\n        }\r\n\r\n        return [basePositions, baseNormals, baseColors, tickPoints];\r\n    }, [radius]);\r\n\r\n    const sunPathPoints = useMemo(() => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, declinationAngle, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    }, [latitude, radius, declinationAngle]);\r\n\r\n    const getSunPathPointsByDate = (d: number) => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, d, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    };\r\n\r\n    const pointArraySunPaths = useMemo(() => {\r\n        const dMin = computeDeclinationAngle(new Date(2021, 11, 22));\r\n        const dMax = computeDeclinationAngle(new Date(2021, 5, 22));\r\n        const delta = (dMax - dMin) / nRibLines;\r\n        const arr = [];\r\n        for (let i = 0; i <= nRibLines; i++) {\r\n            arr.push(getSunPathPointsByDate(dMin + i * delta));\r\n        }\r\n        return arr;\r\n    }, [latitude, radius]);\r\n\r\n    const sunPosition = useMemo(() => {\r\n        return computeSunLocation(radius, hourAngle, declinationAngle, latitude);\r\n    }, [latitude, declinationAngle, hourAngle, radius]);\r\n\r\n    const sunbeltGeometry = useMemo(() => {\r\n        const declinationStep = 2.0 * TILT_ANGLE / DECLINATION_DIVISIONS;\r\n        const hourStep = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const geometry = new BufferGeometry();\r\n        let verticesCount = 0;\r\n        const vertices: Vector3[] = [];\r\n        const indices = [];\r\n        for (let d = -TILT_ANGLE; d < TILT_ANGLE - declinationStep / 2.0; d += declinationStep) {\r\n            for (let h = -Math.PI; h < Math.PI - hourStep / 2.0; h += hourStep) {\r\n                let h2 = h + hourStep;\r\n                let d2 = d + declinationStep;\r\n                if (h2 > Math.PI) {\r\n                    h2 = Math.PI;\r\n                }\r\n                if (d2 > TILT_ANGLE) {\r\n                    d2 = TILT_ANGLE;\r\n                }\r\n                const v1 = computeSunLocation(radius, h, d, latitude);\r\n                const v2 = computeSunLocation(radius, h2, d, latitude);\r\n                const v3 = computeSunLocation(radius, h2, d2, latitude);\r\n                const v4 = computeSunLocation(radius, h, d2, latitude);\r\n                if (v1.z >= 0 || v2.z >= 0 || v3.z >= 0 || v4.z >= 0) {\r\n                    vertices.push(v1, v2, v3, v4);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 1);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount + 3);\r\n                    verticesCount += 4;\r\n                }\r\n            }\r\n        }\r\n        geometry.setFromPoints(vertices);\r\n        geometry.setIndex(new BufferAttribute(new Uint16Array(indices), 1));\r\n        return geometry;\r\n    }, [latitude, radius]);\r\n\r\n    return (\r\n        <mesh rotation={new Euler(-Math.PI / 2, 0, 0)}>\r\n            {/* draw base */}\r\n            <mesh>\r\n                <bufferGeometry attach='geometry'>\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"position\"]}\r\n                        count={basePositions.length / 3}\r\n                        array={basePositions}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"normal\"]}\r\n                        count={baseNormals.length / 3}\r\n                        array={baseNormals}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"color\"]}\r\n                        count={baseColors.length / 3}\r\n                        array={baseColors}\r\n                        itemSize={3}\r\n                    />\r\n                </bufferGeometry>\r\n                <meshBasicMaterial side={DoubleSide}\r\n                                   vertexColors={true}\r\n                                   polygonOffset={true}\r\n                                   polygonOffsetFactor={-0.7}\r\n                                   polygonOffsetUnits={-2}/>\r\n            </mesh>\r\n            <lineSegments\r\n                args={[new BufferGeometry().setFromPoints(tickPoints),\r\n                    new MeshBasicMaterial({color: 0x000000})]}/>\r\n            {/* draw sun path*/}\r\n            <mesh>\r\n                {sunPathPoints.length > 3 && <Line lineWidth={2} points={sunPathPoints} color={'yellow'}/>}\r\n                {pointArraySunPaths\r\n                    .filter(a => a.length > 3)\r\n                    .map((a, index) => {\r\n                        return <Line key={index}\r\n                                     opacity={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     lineWidth={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     points={a}\r\n                                     color={'#999'}/>;\r\n                    })\r\n                }\r\n                <mesh\r\n                    args={[sunbeltGeometry,\r\n                        new MeshBasicMaterial({\r\n                            side: DoubleSide,\r\n                            color: new Color(1, 1, 0),\r\n                            transparent: true,\r\n                            opacity: 0.5,\r\n                            clippingPlanes: [new Plane(Util.UNIT_VECTOR_POS_Y, 0)]\r\n                        })\r\n                    ]}\r\n                />\r\n                <mesh\r\n                    position={sunPosition}\r\n                    args={[new SphereGeometry(0.25, 20, 20),\r\n                        new MeshBasicMaterial({color: 0xffffff00})\r\n                    ]}\r\n                />\r\n            </mesh>\r\n        </mesh>\r\n    );\r\n\r\n};\r\n\r\nexport default Heliodon;\r\n","export default __webpack_public_path__ + \"static/media/aladdin-logo.96b59d24.png\";","export default __webpack_public_path__ + \"static/media/ifi-logo.eb360016.png\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nexport const SYMBOLS = [\r\n    'circle',\r\n    'square',\r\n    'triangle up',\r\n    'triangle down',\r\n    'triangle right',\r\n    'triangle left',\r\n    'star',\r\n    'diamond',\r\n    'hexagon'\r\n];\r\n\r\nexport enum Direction {\r\n    DOWN, UP, LEFT, RIGHT\r\n}\r\n\r\nconst strokeWidth = 1;\r\n\r\nexport const CircleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <circle cx=\"0\" cy=\"0\" r=\"3\"\r\n                        style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const SquareSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <rect x=\"-3\" y=\"-3\" width=\"6\" height=\"6\"\r\n                      style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const TriangleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols, direction} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        let pointsString;\r\n        switch (direction) {\r\n            case Direction.UP:\r\n                pointsString = \"-4,2.5,4,2.5,0,-3.5\";\r\n                break;\r\n            case Direction.LEFT:\r\n                pointsString = \"2.5,4,2.5,-4,-3.5,0\";\r\n                break;\r\n            case Direction.RIGHT:\r\n                pointsString = \"-2.5,4,-2.5,-4,3.5,0\";\r\n                break;\r\n            default:\r\n                pointsString = \"-4,-2.5,4,-2.5,0,3.5\";\r\n        }\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points={pointsString}\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const DiamondSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points=\"-3,0,0,5,3,0,0,-5\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const StarSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // we need to scale down by 50% first before applying the scale factor as the original svg is too large\r\n        const s = 0.05 * scale;\r\n        return (\r\n            // strokeWidth needs to be doubled as the view box is too large\r\n            <svg x={cx - 100 * s} y={cy - 100 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon points=\"100,10 40,180 190,60 10,60 160,180\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: stroke, strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const HexagonSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        const s = 0.02 * scale;\r\n        return (\r\n            <svg x={cx - 150 * s} y={cy - 150 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon className=\"hex\" points=\"300,150 225,280 75,280 0,150 75,20 225,20\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const createSymbol = (type: string, size: number, count: number, opacity: number) => {\r\n    switch (type) {\r\n        case 'circle':\r\n            return <CircleSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'square':\r\n            return <SquareSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'triangle up':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.UP} opacity={opacity}/>;\r\n        case 'triangle down':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.DOWN} opacity={opacity}/>;\r\n        case 'triangle right':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.RIGHT} opacity={opacity}/>;\r\n        case 'triangle left':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.LEFT} opacity={opacity}/>;\r\n        case 'star':\r\n            return <StarSymbol scale={1.25 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'diamond':\r\n            return <DiamondSymbol scale={1.1 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'hexagon':\r\n            return <HexagonSymbol scale={1.3 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n    }\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Menu, Dropdown, Checkbox} from 'antd';\r\nimport {ReactComponent as MenuSVG} from './assets/menu.svg';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst StyledMenuSVG = styled(MenuSVG)`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  height: 40px;\r\n  width: 40px;\r\n  transition: 0.5s;\r\n  fill: brown;\r\n\r\n  &:hover {\r\n    fill: white;\r\n  }\r\n`;\r\n\r\nconst MainMenu = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n\r\n    // @ts-ignore\r\n    const onChangeShowGroundPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showGroundPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onChangeShowWeatherPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showWeatherPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onChangeShowHeliodonPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showHeliodonPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item key={'ground-panel-check-box'}>\r\n                <Checkbox checked={showGroundPanel} onChange={onChangeShowGroundPanel}>\r\n                    Ground Settings\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <Menu.Item key={'heliodon-panel-check-box'}>\r\n                <Checkbox checked={showHeliodonPanel} onChange={onChangeShowHeliodonPanel}>\r\n                    Heliodon Settings\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <Menu.Item key={'weather-panel-check-box'}>\r\n                <Checkbox checked={showWeatherPanel} onChange={onChangeShowWeatherPanel}>\r\n                    Weather Data\r\n                </Checkbox>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <Dropdown overlay={menu} trigger={['click']}>\r\n            <StyledMenuSVG/>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {memo, useCallback, useEffect, useRef, useState} from \"react\";\r\nimport {GoogleMap, Marker} from '@react-google-maps/api';\r\nimport {useStore} from \"../stores/common\";\r\n\r\nexport interface MapsProp {\r\n\r\n    setLatitude?: (value: number) => void;\r\n    setLongitude?: (value: number) => void;\r\n    setZoom?: (value: number) => void;\r\n    setTilt?: (value: number) => void;\r\n    setType?: (value: string) => void;\r\n\r\n}\r\n\r\nconst containerStyle = {\r\n    border: '1px solid',\r\n    width: '400px',\r\n    height: '400px'\r\n};\r\n\r\nconst Maps = ({\r\n                  setLatitude,\r\n                  setLongitude,\r\n                  setZoom,\r\n                  setTilt,\r\n                  setType,\r\n              }: MapsProp) => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const zoom = useStore(state => state.mapZoom);\r\n    const type = useStore(state => state.mapType);\r\n    const tilt = useStore(state => state.mapTilt);\r\n    const [map, setMap] = useState<google.maps.Map | null>(null);\r\n    const bounds = useRef<google.maps.LatLngBounds | null | undefined>();\r\n    const cities = useRef<google.maps.LatLng[]>([]);\r\n    const weatherData = useStore(state => state.weatherData);\r\n    const mapWeatherStations = useStore(state => state.mapWeatherStations);\r\n    const [updateFlag, setUpdateFlag] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n    }, [updateFlag]);\r\n\r\n    const onLoad = useCallback((map: google.maps.Map) => {\r\n        setMap(map);\r\n    }, []);\r\n\r\n    const onUnmount = useCallback(function callback(map) {\r\n        setMap(null);\r\n    }, []);\r\n\r\n    const loadCities = () => {\r\n        if (bounds.current) {\r\n            cities.current.length = 0;\r\n            for (const x in weatherData) {\r\n                if (weatherData.hasOwnProperty(x)) {\r\n                    const w = weatherData[x];\r\n                    const pos = new google.maps.LatLng(w.latitude, w.longitude);\r\n                    if (bounds.current.contains(pos)) {\r\n                        cities.current.push(pos);\r\n                    }\r\n                }\r\n            }\r\n            setUpdateFlag(!updateFlag);\r\n        }\r\n    };\r\n\r\n    const onBoundsChanged = () => {\r\n        if (map) {\r\n            bounds.current = map.getBounds();\r\n            if (mapWeatherStations) {\r\n                loadCities();\r\n            }\r\n        }\r\n    };\r\n\r\n    const onCenterChanged = () => {\r\n        if (map) {\r\n            const center = map.getCenter();\r\n            const lat = center.lat();\r\n            if (lat !== latitude) {\r\n                setLatitude?.(lat);\r\n            }\r\n            const lng = center.lng();\r\n            if (lng !== longitude) {\r\n                setLongitude?.(lng);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onZoomChanged = () => {\r\n        if (map) {\r\n            const z = map.getZoom();\r\n            if (z !== zoom) {\r\n                setZoom?.(z);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onTiltChanged = () => {\r\n        if (map) {\r\n            const t = map.getTilt();\r\n            if (t !== tilt) {\r\n                setTilt?.(t);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onMapTypeIdChanged = () => {\r\n        if (map) {\r\n            const typeId = map.getMapTypeId();\r\n            if (typeId !== type) {\r\n                setType?.(typeId);\r\n            }\r\n        }\r\n    };\r\n\r\n    const latLng = {lat: latitude, lng: longitude};\r\n\r\n    return (\r\n        <GoogleMap\r\n            mapContainerStyle={containerStyle}\r\n            mapTypeId={type}\r\n            center={latLng}\r\n            zoom={zoom}\r\n            tilt={tilt}\r\n            onLoad={onLoad}\r\n            onBoundsChanged={onBoundsChanged}\r\n            onUnmount={onUnmount}\r\n            onCenterChanged={onCenterChanged}\r\n            onZoomChanged={onZoomChanged}\r\n            onTiltChanged={onTiltChanged}\r\n            onMapTypeIdChanged={onMapTypeIdChanged}\r\n        >\r\n            { /* Child components, such as markers, info windows, etc. */}\r\n            <>\r\n                {mapWeatherStations &&\r\n                cities.current.map((c, index) => {\r\n                    const scale = 0.2 * zoom;\r\n                    return (\r\n                        <Marker\r\n                            key={index}\r\n                            icon={{\r\n                                path: google.maps.SymbolPath.CIRCLE,\r\n                                strokeColor: 'red',\r\n                                strokeWeight: scale + 2,\r\n                                scale: scale,\r\n                            }}\r\n                            position={c}\r\n                        />\r\n                    )\r\n                })}\r\n            </>\r\n        </GoogleMap>\r\n    );\r\n};\r\n\r\nexport default memo(Maps);\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Spin} from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nexport default styled(Spin)`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  z-index: 999;\r\n`;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch} from \"antd\";\r\nimport {CompactPicker} from 'react-color';\r\nimport Maps from \"./components/maps\";\r\nimport {StandaloneSearchBox, useJsApiLoader} from \"@react-google-maps/api\";\r\nimport {Libraries} from \"@react-google-maps/api/dist/utils/make-load-script-url\";\r\nimport Spinner from './components/spinner';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst libraries = ['places'] as Libraries;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 420px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface GroundPanelProps {\r\n    grid: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    setGrid?: (on: boolean) => void;\r\n    setGroundImage?: (on: boolean) => void;\r\n    setGroundColor?: (color: string) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeLongitude?: (longitude: number) => void;\r\n    changeMapZoom?: (zoom: number) => void;\r\n    changeMapTilt?: (tilt: number) => void;\r\n    changeMapType?: (type: string) => void;\r\n}\r\n\r\nconst GroundPanel = ({\r\n                         grid,\r\n                         groundImage,\r\n                         groundColor,\r\n                         setGrid,\r\n                         setGroundImage,\r\n                         setGroundColor,\r\n                         changeLatitude,\r\n                         changeLongitude,\r\n                         changeMapZoom,\r\n                         changeMapTilt,\r\n                         changeMapType,\r\n                     }: GroundPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n    const mapWeatherStations = useStore(state => state.mapWeatherStations);\r\n    const address = useStore(state => state.address);\r\n    const searchBox = useRef<google.maps.places.SearchBox>();\r\n\r\n    const {isLoaded, loadError} = useJsApiLoader({\r\n        id: 'google-map-script',\r\n        googleMapsApiKey: process.env.REACT_APP_MAPS_API_KEY as string,\r\n        libraries: libraries\r\n    });\r\n\r\n    const onPlacesChanged = () => {\r\n        const places = searchBox.current?.getPlaces();\r\n        if (places && places.length > 0) {\r\n            setCommonStore((state) => {\r\n                const geometry = places[0].geometry;\r\n                if (geometry) {\r\n                    state.latitude = geometry.location.lat();\r\n                    state.longitude = geometry.location.lng();\r\n                }\r\n                state.address = places[0].formatted_address as string;\r\n            });\r\n        }\r\n    };\r\n\r\n    const onLoad = (s: google.maps.places.SearchBox) => {\r\n        searchBox.current = s;\r\n    };\r\n\r\n    const setMapWeatherStations = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.mapWeatherStations = on;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <ColumnWrapper>\r\n                <Header>\r\n                    <span>Ground Settings</span>\r\n                    <span style={{cursor: 'pointer'}} onClick={() => {\r\n                        setCommonStore((state) => {\r\n                            state.showGroundPanel = false;\r\n                        });\r\n                    }}>Close</span>\r\n                </Header>\r\n                <Space direction={'vertical'}>\r\n                    <Space style={{padding: '20px'}} align={'center'} size={20}>\r\n                        <Space direction={'vertical'}>\r\n                            <Space>\r\n                                <Space style={{width: '60px'}}>Grid:</Space>\r\n                                <Switch title={'Show ground grid'}\r\n                                        checked={grid}\r\n                                        onChange={(checked) => {\r\n                                            setGrid?.(checked);\r\n                                        }}\r\n                                />\r\n                            </Space>\r\n                            <Space>\r\n                                <Space style={{width: '60px'}}>Image:</Space>\r\n                                <Switch title={'Show ground image'}\r\n                                        checked={groundImage}\r\n                                        onChange={(checked) => {\r\n                                            setGroundImage?.(checked);\r\n                                        }}\r\n                                />\r\n                            </Space>\r\n                            <Space>\r\n                                <Space style={{width: '60px'}}>Stations:</Space>\r\n                                <Switch title={'Show weather stations'}\r\n                                        checked={mapWeatherStations}\r\n                                        onChange={(checked) => {\r\n                                            setMapWeatherStations(checked);\r\n                                        }}\r\n                                />\r\n                            </Space>\r\n                        </Space>\r\n                        <div>Ground Color<br/>\r\n                            <CompactPicker color={groundColor} onChangeComplete={(colorResult) => {\r\n                                setGroundColor?.(colorResult.hex);\r\n                            }}/>\r\n                        </div>\r\n                    </Space>\r\n                    {isLoaded &&\r\n                    <Space>\r\n                        <div>\r\n                            <StandaloneSearchBox onLoad={onLoad}\r\n                                                 onPlacesChanged={onPlacesChanged}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder={address}\r\n                                    style={{\r\n                                        boxSizing: `border-box`,\r\n                                        border: `1px solid transparent`,\r\n                                        width: `400px`,\r\n                                        height: `32px`,\r\n                                        padding: `0 12px`,\r\n                                        borderRadius: `3px`,\r\n                                        boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n                                        fontSize: `14px`,\r\n                                        outline: `none`,\r\n                                        textOverflow: `ellipses`,\r\n                                        position: \"relative\"\r\n                                    }}\r\n                                />\r\n                            </StandaloneSearchBox>\r\n                        </div>\r\n                    </Space>\r\n                    }\r\n                    {isLoaded ?\r\n                        <Space>\r\n                            <div>\r\n                                <Maps setLatitude={changeLatitude}\r\n                                      setLongitude={changeLongitude}\r\n                                      setZoom={changeMapZoom}\r\n                                      setTilt={changeMapTilt}\r\n                                      setType={changeMapType}\r\n                                />\r\n                                Coordinates: ({latitude.toFixed(4)}°, {longitude.toFixed(4)}°),\r\n                                Zoom: {mapZoom}\r\n                            </div>\r\n                        </Space>\r\n                        :\r\n                        <Spinner/>\r\n                    }\r\n                    {loadError &&\r\n                    <Space>\r\n                        <div>Map cannot be loaded right now, sorry.</div>\r\n                    </Space>\r\n                    }\r\n                </Space>\r\n            </ColumnWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default GroundPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef} from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch, Slider, DatePicker, TimePicker} from \"antd\";\r\nimport moment from 'moment';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 640px;\r\n  padding: 0;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface HeliodonPanelProps {\r\n    heliodon: boolean;\r\n    latitude: number;\r\n    date: Date;\r\n    animateSun?: boolean;\r\n    setHeliodon?: (on: boolean) => void;\r\n    setSunAnimation?: (on: boolean) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeDate?: (date: Date) => void;\r\n    changeTime?: (date: Date) => void;\r\n}\r\n\r\nconst HeliodonPanel = ({\r\n                           heliodon,\r\n                           latitude,\r\n                           date,\r\n                           animateSun,\r\n                           setHeliodon,\r\n                           setSunAnimation,\r\n                           changeLatitude,\r\n                           changeDate,\r\n                           changeTime,\r\n                       }: HeliodonPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const requestRef = useRef<number>(0);\r\n    const previousFrameTime = useRef<number>(-1);\r\n\r\n    useEffect(() => {\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => {\r\n            cancelAnimationFrame(requestRef.current);\r\n        }\r\n    }, [animateSun]);\r\n\r\n    const animate = () => {\r\n        if (animateSun) {\r\n            requestRef.current = requestAnimationFrame(animate);\r\n            const currentFrameTime = Date.now();\r\n            if (currentFrameTime - previousFrameTime.current > 100) {\r\n                const day = date.getDate();\r\n                date.setHours(date.getHours(), date.getMinutes() + 15);\r\n                date.setDate(day)\r\n                changeTime?.(date);\r\n                previousFrameTime.current = currentFrameTime;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <ColumnWrapper>\r\n                <Header>\r\n                    <span>Heliodon Settings</span>\r\n                    <span style={{cursor: 'pointer'}} onClick={() => {\r\n                        setCommonStore((state) => {\r\n                            state.showHeliodonPanel = false;\r\n                        });\r\n                    }}>Close</span>\r\n                </Header>\r\n                <Space style={{padding: '20px'}} align={'baseline'} size={20}>\r\n                    <div>\r\n                        Show<br/>\r\n                        <Switch checked={heliodon} onChange={(checked) => {\r\n                            setHeliodon?.(checked);\r\n                        }}/>\r\n                    </div>\r\n                    <div>\r\n                        Animate<br/>\r\n                        <Switch checked={animateSun} onChange={(checked) => {\r\n                            setSunAnimation?.(checked);\r\n                        }}/>\r\n                    </div>\r\n                    <div>\r\n                        Date<br/>\r\n                        <DatePicker value={moment(date)}\r\n                                    onChange={(moment) => {\r\n                                        if (moment) changeDate?.(moment.toDate());\r\n                                    }}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        Time<br/>\r\n                        <TimePicker value={moment(date, 'HH:mm')}\r\n                                    format={'HH:mm'}\r\n                                    onChange={(moment) => {\r\n                                        if (moment) changeTime?.(moment.toDate());\r\n                                    }}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        Latitude: {latitude.toFixed(4)}°\r\n                        <Slider\r\n                            style={{width: '150px'}}\r\n                            marks={{'-90': '-90°', 0: '0°', 90: '90°'}}\r\n                            min={-90}\r\n                            max={90}\r\n                            tooltipVisible={false}\r\n                            defaultValue={latitude}\r\n                            onChange={(value: number) => {\r\n                                changeLatitude?.(value);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Space>\r\n            </ColumnWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default HeliodonPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nexport const VERSION = '0.0.1';\r\n\r\nexport const isProd = process.env.NODE_ENV === 'production';\r\n\r\nexport const HOME_URL: string = isProd ? 'https://aladdin.intofuture.org' : 'http://aladdin.dev';\r\n\r\nexport const PRESET_COLORS = [\r\n    '#8884d8',\r\n    '#f97356',\r\n    '#1bc32c',\r\n    '#c6502d',\r\n    '#82ca9d',\r\n    '#3eaec0',\r\n    '#627682',\r\n    '#445111'\r\n];\r\n\r\nexport const MONTHS = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec'\r\n];\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {message} from \"antd\";\r\n\r\nexport const visitIFI = () => {\r\n    window.open(\"https://intofuture.org\", '_blank');\r\n};\r\n\r\nexport const getMapImage = (size: number, lat: number, lng: number, zoom: number) => {\r\n    return \"https://maps.googleapis.com/maps/api/staticmap?maptype=satellite&center=\" + lat + \",\" + lng\r\n        + \"&zoom=\" + zoom + \"&size=\" + size + \"x\" + size + \"&scale=2&key=\" + process.env.REACT_APP_MAPS_API_KEY;\r\n}\r\n\r\nexport const showSuccess = (msg: string) => {\r\n    message.success({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showInfo = (msg: string) => {\r\n    message.info({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showWarning = (msg: string) => {\r\n    message.warning({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showError = (msg: string) => {\r\n    message.error({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const fahrenheitToCelsius = (temp: number) => {\r\n    return ((temp - 32) * 5) / 9;\r\n};\r\n\r\nexport const celsiusToFahrenheit = (temp: number) => {\r\n    return temp * (9 / 5) + 32;\r\n};\r\n\r\nexport const openInNewTab = (url: string) => {\r\n    const win = window.open(url, '_blank');\r\n    if (win) {\r\n        win.focus();\r\n    }\r\n};\r\n\r\nexport const extractText = (html: string) => {\r\n    return new DOMParser().parseFromString(html, \"text/html\").documentElement.textContent;\r\n};\r\n\r\nexport const containedInDOMRect = (rect: DOMRect, x: number, y: number, margin: number) => {\r\n    return x > rect.x - margin && x < rect.x + rect.width + margin\r\n        && y > rect.y - margin && y < rect.y + rect.height + margin;\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport CookieConsent from \"react-cookie-consent\";\r\n\r\nconst AcceptCookie = () => {\r\n    return <CookieConsent\r\n        location=\"bottom\"\r\n        buttonText=\"Accept\"\r\n        cookieName=\"AladdinCookieName\"\r\n        style={{background: \"#2B373B\", textAlign: 'center', zIndex: 99999}}\r\n        buttonStyle={{color: \"#4e503b\", fontSize: \"12px\"}}\r\n        expires={150}\r\n    >\r\n        By clicking Accept, you agree to our use of cookies to improve your experience with Aladdin.\r\n    </CookieConsent>;\r\n};\r\n\r\nexport default AcceptCookie;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {useTexture} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide} from \"three\";\r\nimport {getMapImage} from \"../helpers\";\r\n\r\nconst GroundImage = () => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n\r\n    const texture = useTexture(getMapImage(640, latitude, longitude, mapZoom));\r\n\r\n    return (\r\n        <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\r\n            <planeBufferGeometry args={[100, 100]}/>\r\n            <meshStandardMaterial attach=\"material\" side={DoubleSide} map={texture} opacity={1}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default GroundImage;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {Menu, Checkbox, Radio} from 'antd';\r\nimport {ObjectType, Theme} from \"./types\";\r\nimport 'antd/dist/antd.css';\r\n\r\n// TODO: Reduce the space between menu items\r\nconst StyledMenu = styled(Menu)`\r\n  padding: 0;\r\n  margin: 0;\r\n`;\r\n\r\nconst {SubMenu} = StyledMenu;\r\n\r\nconst radioStyle = {\r\n    display: 'block',\r\n    height: '30px',\r\n    paddingLeft: '10px',\r\n    lineHeight: '30px',\r\n};\r\n\r\nconst ContextMenu = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getSelectedElement = useStore(state => state.getSelectedElement);\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const theme = useStore(state => state.theme);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const clickObjectType = useStore(state => state.clickObjectType);\r\n\r\n    //@ts-ignore\r\n    const selectTheme = (e) => {\r\n        setCommonStore(state => {\r\n            state.theme = e.target.value;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeAxes = (e) => {\r\n        setCommonStore(state => {\r\n            state.axes = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeShowWeatherPanel = (e) => {\r\n        setCommonStore(state => {\r\n            state.showWeatherPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeShowHeliodonPanel = (e) => {\r\n        setCommonStore(state => {\r\n            state.showHeliodonPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeGrid = (e) => {\r\n        setCommonStore(state => {\r\n            state.grid = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeShowGroundPanel = (e) => {\r\n        setCommonStore(state => {\r\n            state.showGroundPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    const selectedElement = getSelectedElement();\r\n\r\n    //@ts-ignore\r\n    const changeSensorLight = (e) => {\r\n        setCommonStore(state => {\r\n            //const s = state.getSelectedElement();\r\n            //if (s) s.light = e.target.checked;\r\n        });\r\n    };\r\n\r\n    switch (selectedElement ? selectedElement.type : clickObjectType) {\r\n        case ObjectType.Sky:\r\n            return (\r\n                <StyledMenu style={{padding: 0, margin: 0}}>\r\n                    <Menu.Item key={'axes'}>\r\n                        <Checkbox checked={axes} onChange={changeAxes}>\r\n                            Axes\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'heliodon-settings'}>\r\n                        <Checkbox checked={showHeliodonPanel} onChange={changeShowHeliodonPanel}>\r\n                            Heliodon Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'weather-data'}>\r\n                        <Checkbox checked={showWeatherPanel} onChange={changeShowWeatherPanel}>\r\n                            Weather Data\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    {<SubMenu key={'theme'} title={'Theme'}>\r\n                        <Radio.Group onChange={selectTheme} value={theme} style={{height: '105px'}}>\r\n                            <Radio style={radioStyle} value={Theme.Default}>Default</Radio>\r\n                            <Radio style={radioStyle} value={Theme.Desert}>Desert</Radio>\r\n                            <Radio style={radioStyle} value={Theme.Grassland}>Grassland</Radio>\r\n                        </Radio.Group>\r\n                    </SubMenu>}\r\n                </StyledMenu>);\r\n        case ObjectType.Foundation:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'foundation-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'foundation-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n        case ObjectType.Sensor:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'cuboid-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'cuboid-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'sensor-light'}>\r\n                        <Checkbox checked={selectedElement?.light} onChange={changeSensorLight}>\r\n                            Light\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n        case ObjectType.Cuboid:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'cuboid-copy'}>\r\n                        Copy\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'cuboid-cut'}>\r\n                        Cut\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n        default:\r\n            return (\r\n                <StyledMenu>\r\n                    <Menu.Item key={'ground-grid'}>\r\n                        <Checkbox checked={grid} onChange={changeGrid}>\r\n                            Grid\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'ground-settings'}>\r\n                        <Checkbox checked={showGroundPanel} onChange={changeShowGroundPanel}>\r\n                            Ground Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'ground-paste'}>\r\n                        Paste\r\n                    </Menu.Item>\r\n                </StyledMenu>\r\n            );\r\n    }\r\n\r\n};\r\n\r\nexport default ContextMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo, useState} from 'react';\r\nimport {\r\n    Bar,\r\n    BarChart,\r\n    CartesianGrid,\r\n    Label,\r\n    Legend,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport {MONTHS, PRESET_COLORS} from \"../constants\";\r\nimport {WeatherDataType, GraphDatumEntry} from \"../types\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {Util} from \"../util\";\r\n\r\nexport interface BarGraphProps {\r\n    type: WeatherDataType;\r\n    dataSource: GraphDatumEntry[];\r\n    height: number;\r\n    labelX?: string,\r\n    labelY?: string,\r\n    unitX?: string;\r\n    unitY?: string;\r\n    fractionDigits?: number;\r\n    color?: string;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst BarGraph = ({\r\n                      type,\r\n                      dataSource,\r\n                      height,\r\n                      labelX,\r\n                      labelY,\r\n                      unitX,\r\n                      unitY,\r\n                      fractionDigits = 2,\r\n                      color,\r\n                      ...rest\r\n                  }: BarGraphProps) => {\r\n\r\n    const [dataSetCount, setDataSetCount] = useState<number>(0);\r\n    const [horizontalGridLines, setHorizontalGridLines] = useState<boolean>(true);\r\n    const [verticalGridLines, setVerticalGridLines] = useState<boolean>(true);\r\n    const [legendDataKey, setLegendDataKey] = useState<string | null>(null);\r\n    const now = useStore(state => state.date);\r\n\r\n    //init\r\n    useEffect(() => {\r\n        if (!dataSource) {\r\n            return;\r\n        }\r\n        const len = Array.isArray(dataSource) ? Object.keys(dataSource[0]).length - 1 : Object.keys(dataSource).length - 1;\r\n        if (dataSetCount !== len) {\r\n            setDataSetCount(len);\r\n        }\r\n    }, [dataSource]);\r\n\r\n    const getBars = useMemo(() => {\r\n        const bars = [];\r\n        for (let i = 0; i < dataSetCount; i++) {\r\n            let name = '';\r\n            switch (type) {\r\n                case WeatherDataType.MonthlyTemperatures:\r\n                    name = i === 0 ? `Low` : 'High';\r\n                    break;\r\n                case WeatherDataType.SunshineHours:\r\n                    name = 'Sunshine';\r\n                    break;\r\n                case WeatherDataType.HourlyTemperatures:\r\n                    name = 'Temperature';\r\n                    break;\r\n            }\r\n            const opacity = legendDataKey === null ? 1 : (legendDataKey === name ? 1 : 0.25);\r\n            bars.push(\r\n                <Bar\r\n                    key={i}\r\n                    name={name}\r\n                    dataKey={name}\r\n                    fill={color ? color : PRESET_COLORS[i]}\r\n                    opacity={opacity}\r\n                    isAnimationActive={false}\r\n                />,\r\n            );\r\n        }\r\n        return bars;\r\n    }, [dataSetCount, legendDataKey]);\r\n\r\n    // @ts-ignore\r\n    const onMouseDown = (e) => {\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseEnterLegend = (o) => {\r\n        setLegendDataKey(o.dataKey);\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseLeaveLegend = (o) => {\r\n        setLegendDataKey(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {dataSource && (\r\n                // need two div wrappers to disable the responsiveness of ResponsiveContainer\r\n                <div id={'bar-graph-' + labelX + '-' + labelY}\r\n                     style={{width: '100%', height: `${height}%`, position: 'relative'}}>\r\n                    <div\r\n                        style={{\r\n                            userSelect: 'none',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0\r\n                        }}\r\n                    >\r\n                        <ResponsiveContainer width=\"100%\" height={`100%`}>\r\n                            <BarChart\r\n                                data={dataSource}\r\n                                onMouseDown={onMouseDown}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 30,\r\n                                }}>\r\n                                <Tooltip formatter={(value: number) => value.toFixed(fractionDigits) + ' ' + unitY}/>\r\n                                <CartesianGrid\r\n                                    vertical={verticalGridLines}\r\n                                    horizontal={horizontalGridLines}\r\n                                    stroke={\"rgba(128, 128, 128, 0.3)\"}\r\n                                />\r\n                                <ReferenceLine\r\n                                    x={MONTHS[Math.floor(Util.daysIntoYear(now) / 365 * 12)]}\r\n                                    stroke=\"orange\"\r\n                                    strokeWidth={2}\r\n                                />\r\n                                <XAxis dataKey={labelX}>\r\n                                    <Label\r\n                                        value={labelX + (unitX ? ' (' + unitX + ')' : '')}\r\n                                        offset={0}\r\n                                        position=\"bottom\"\r\n                                    />\r\n                                </XAxis>\r\n                                <YAxis domain={[0, 'auto']}>\r\n                                    <Label\r\n                                        dx={-15}\r\n                                        value={labelY + (unitY ? ' (' + unitY + ')' : '')}\r\n                                        offset={0}\r\n                                        angle={-90}\r\n                                        position=\"center\"\r\n                                    />\r\n                                </YAxis>\r\n                                {getBars}\r\n                                {dataSetCount > 1 &&\r\n                                <Legend iconType='plainline'\r\n                                        verticalAlign='top'\r\n                                        height={36}\r\n                                        onMouseLeave={onMouseLeaveLegend}\r\n                                        onMouseEnter={onMouseEnterLegend}/>}\r\n                            </BarChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BarGraph;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo, useState} from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Label,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport {createSymbol, SYMBOLS} from \"./symbols\";\r\nimport {MONTHS, PRESET_COLORS} from \"../constants\";\r\nimport {WeatherDataType, GraphDatumEntry} from \"../types\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {Util} from \"../util\";\r\n\r\nexport interface LineGraphProps {\r\n    type: WeatherDataType;\r\n    dataSource: GraphDatumEntry[];\r\n    height: number;\r\n    labelX?: string,\r\n    labelY?: string,\r\n    unitX?: string;\r\n    unitY?: string;\r\n    fractionDigits?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst LineGraph = ({\r\n                       type,\r\n                       dataSource,\r\n                       height,\r\n                       labelX,\r\n                       labelY,\r\n                       unitX,\r\n                       unitY,\r\n                       fractionDigits = 2,\r\n                       ...rest\r\n                   }: LineGraphProps) => {\r\n\r\n    const [lineCount, setLineCount] = useState<number>(0);\r\n    const [horizontalGridLines, setHorizontalGridLines] = useState<boolean>(true);\r\n    const [verticalGridLines, setVerticalGridLines] = useState<boolean>(true);\r\n    const [legendDataKey, setLegendDataKey] = useState<string | null>(null);\r\n    const [lineWidth, setLineWidth] = useState<number>(2);\r\n    const [symbolCount, setSymbolCount] = useState<number>(12);\r\n    const [symbolSize, setSymbolSize] = useState<number>(1);\r\n    const now = useStore(state => state.date);\r\n\r\n    //init\r\n    useEffect(() => {\r\n        if (!dataSource) {\r\n            return;\r\n        }\r\n        const len = Array.isArray(dataSource) ? Object.keys(dataSource[0]).length - 1 : Object.keys(dataSource).length - 1;\r\n        if (lineCount !== len) {\r\n            setLineCount(len);\r\n        }\r\n    }, [dataSource]);\r\n\r\n    const getLines = useMemo(() => {\r\n        const lines = [];\r\n        let defaultSymbol;\r\n        for (let i = 0; i < lineCount; i++) {\r\n            let name = '';\r\n            switch (type) {\r\n                case WeatherDataType.MonthlyTemperatures:\r\n                    name = i === 0 ? `Low` : 'High';\r\n                    break;\r\n                case WeatherDataType.SunshineHours:\r\n                    name = 'Sunshine';\r\n                    break;\r\n                case WeatherDataType.HourlyTemperatures:\r\n                    name = 'Temperature';\r\n                    break;\r\n            }\r\n            const opacity = legendDataKey === null ? 1 : (legendDataKey === name ? 1 : 0.25);\r\n            const symbol = createSymbol(\r\n                SYMBOLS[i],\r\n                symbolSize,\r\n                symbolCount,\r\n                opacity\r\n            );\r\n            if (i === 0) defaultSymbol = symbol;\r\n            lines.push(\r\n                <Line\r\n                    key={i}\r\n                    type=\"natural\"\r\n                    name={name}\r\n                    dataKey={name}\r\n                    stroke={PRESET_COLORS[i]}\r\n                    opacity={opacity}\r\n                    strokeWidth={lineWidth}\r\n                    dot={symbolCount > 0 ? (symbol ? symbol : defaultSymbol) : false}\r\n                    isAnimationActive={false}\r\n                />,\r\n            );\r\n        }\r\n        return lines;\r\n    }, [lineCount, lineWidth, symbolCount, symbolSize, legendDataKey]);\r\n\r\n    // @ts-ignore\r\n    const onMouseDown = (e) => {\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseEnterLegend = (o) => {\r\n        setLegendDataKey(o.dataKey);\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseLeaveLegend = (o) => {\r\n        setLegendDataKey(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {dataSource && (\r\n                // need two div wrappers to disable the responsiveness of ResponsiveContainer\r\n                <div id={'line-graph-' + labelX + '-' + labelY}\r\n                     style={{width: '100%', height: `${height}%`, position: 'relative'}}>\r\n                    <div\r\n                        style={{\r\n                            userSelect: 'none',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0\r\n                        }}\r\n                    >\r\n                        <ResponsiveContainer width=\"100%\" height={`100%`}>\r\n                            <LineChart\r\n                                data={dataSource}\r\n                                onMouseDown={onMouseDown}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 30,\r\n                                }}>\r\n                                <Tooltip formatter={(value: number) => value.toFixed(fractionDigits) + ' ' + unitY}/>\r\n                                <CartesianGrid\r\n                                    vertical={verticalGridLines}\r\n                                    horizontal={horizontalGridLines}\r\n                                    stroke={\"rgba(128, 128, 128, 0.3)\"}\r\n                                />\r\n                                <ReferenceLine\r\n                                    x={MONTHS[Math.floor(Util.daysIntoYear(now) / 365 * 12)]}\r\n                                    stroke=\"orange\"\r\n                                    strokeWidth={2}\r\n                                />\r\n                                <XAxis dataKey={labelX}>\r\n                                    <Label\r\n                                        value={labelX + (unitX ? ' (' + unitX + ')' : '')}\r\n                                        offset={0}\r\n                                        position=\"bottom\"\r\n                                    />\r\n                                </XAxis>\r\n                                <YAxis domain={['dataMin - 5', 'auto']}>\r\n                                    <Label\r\n                                        dx={-15}\r\n                                        value={labelY + (unitY ? ' (' + unitY + ')' : '')}\r\n                                        offset={0}\r\n                                        angle={-90}\r\n                                        position=\"center\"\r\n                                    />\r\n                                </YAxis>\r\n                                {getLines}\r\n                                {lineCount > 1 &&\r\n                                <Legend iconType='plainline'\r\n                                        verticalAlign='top'\r\n                                        height={36}\r\n                                        onMouseLeave={onMouseLeaveLegend}\r\n                                        onMouseEnter={onMouseEnterLegend}/>}\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LineGraph;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo} from 'react';\r\nimport BarGraph from \"./components/barGraph\";\r\nimport LineGraph from './components/lineGraph';\r\nimport {WeatherDataType} from \"./types\";\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {MONTHS} from \"./constants\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 500px;\r\n  height: 500px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface WeatherPanelProps {\r\n\r\n    city: string | null;\r\n    graphs: WeatherDataType[];\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst WeatherPanel = ({\r\n                          city,\r\n                          graphs,\r\n                          ...rest\r\n                      }: WeatherPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getWeather = useStore(state => state.getWeather);\r\n\r\n    const responsiveHeight = useMemo(() => {\r\n        return graphs ? Math.floor(100 / graphs.length) : 100;\r\n    }, [graphs]);\r\n\r\n    const getData = useMemo(() => {\r\n        if (!graphs) {\r\n            return;\r\n        }\r\n        const result: any = {};\r\n        if (city) {\r\n            const weather = getWeather(city);\r\n            if (weather) {\r\n                graphs.forEach(g => {\r\n                    result[g] = [];\r\n                    switch (g) {\r\n                        case WeatherDataType.MonthlyTemperatures:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Low: weather.lowestTemperatures[i],\r\n                                        High: weather.highestTemperatures[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                        case WeatherDataType.SunshineHours:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Sunshine: weather.sunshineHours[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    }, [graphs, city]);\r\n\r\n    const yNames = ['Temperature', 'Temperature', 'Sunshine'];\r\n    const yUnits = ['°C', '°C', 'Hours'];\r\n\r\n    return (\r\n        <Container>\r\n            <ColumnWrapper>\r\n                <Header>\r\n                    <span>Weather</span>\r\n                    <span style={{cursor: 'pointer'}} onClick={() => {\r\n                        setCommonStore((state) => {\r\n                            state.showWeatherPanel = false;\r\n                        });\r\n                    }}>Close</span>\r\n                </Header>\r\n                <>\r\n                    {graphs.map(g => {\r\n                        if (g === WeatherDataType.SunshineHours) {\r\n                            return (\r\n                                <BarGraph\r\n                                    key={g}\r\n                                    type={g}\r\n                                    dataSource={getData[g]}\r\n                                    height={responsiveHeight}\r\n                                    labelX={'Month'}\r\n                                    labelY={yNames[g]}\r\n                                    unitY={yUnits[g]}\r\n                                    fractionDigits={0}\r\n                                    color={'#FFD700'}\r\n                                    {...rest}\r\n                                />\r\n                            );\r\n                        }\r\n                        return (\r\n                            <LineGraph\r\n                                key={g}\r\n                                type={g}\r\n                                dataSource={getData[g]}\r\n                                height={responsiveHeight}\r\n                                labelX={'Month'}\r\n                                labelY={yNames[g]}\r\n                                unitY={yUnits[g]}\r\n                                fractionDigits={0}\r\n                                {...rest}\r\n                            />\r\n                        );\r\n                    })}\r\n                    <div>\r\n                        <span>{city}</span>\r\n                    </div>\r\n                </>\r\n            </ColumnWrapper>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default WeatherPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n *\r\n * @author Charles Xie\r\n */\r\n\r\nimport React, {Suspense, useEffect, useMemo, useState} from 'react';\r\nimport './app.css';\r\nimport {Canvas} from '@react-three/fiber';\r\nimport OrbitController from \"./orbitController\";\r\nimport Sky from \"./views/sky\";\r\nimport Axes from \"./views/axes\";\r\nimport Compass from \"./views/compass\";\r\nimport Scene from \"./scene\";\r\nimport Ground from \"./views/ground\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {Euler, Vector3} from \"three\";\r\nimport Heliodon from \"./views/heliodon\";\r\nimport {Util} from \"./util\";\r\nimport {computeDeclinationAngle, computeHourAngle, computeSunLocation} from \"./views/sunTools\";\r\nimport aladdinLogo from './assets/aladdin-logo.png';\r\nimport ifiLogo from './assets/ifi-logo.png';\r\nimport MainMenu from \"./mainMenu\";\r\nimport GroundPanel from \"./groundPanel\";\r\nimport HeliodonPanel from \"./heliodonPanel\";\r\nimport {VERSION} from \"./constants\";\r\nimport {visitIFI} from \"./helpers\";\r\nimport AcceptCookie from \"./acceptCookie\";\r\nimport GroundImage from \"./views/groundImage\";\r\nimport {Dropdown} from \"antd\";\r\nimport ContextMenu from \"./contextMenu\";\r\nimport WeatherPanel from \"./weatherPanel\";\r\nimport {WeatherDataType} from \"./types\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const worlds = useStore(state => state.worlds);\r\n    const getWorld = useStore(state => state.getWorld);\r\n    const createNewWorld = useStore(state => state.createNewWorld);\r\n    const loadWeatherData = useStore(state => state.loadWeatherData);\r\n    const getClosestCity = useStore(state => state.getClosestCity);\r\n\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const groundImage = useStore(state => state.groundImage);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const theme = useStore(state => state.theme);\r\n    const heliodon = useStore(state => state.heliodon);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const weatherData = useStore(state => state.weatherData);\r\n    const now = new Date(useStore(state => state.date));\r\n\r\n    const [hourAngle, setHourAngle] = useState<number>(0);\r\n    const [declinationAngle, setDeclinationAngle] = useState<number>(0);\r\n    const [sunlightDirection, setSunlightDirection] = useState<Vector3>(new Vector3(0, 2, 2));\r\n    const [animateSun, setAnimateSun] = useState<boolean>(false);\r\n    const [city, setCity] = useState<string | null>('Boston MA, USA');\r\n\r\n    const world = worlds['default']; // currently we have only one world, which is default\r\n    const radius = 10;\r\n\r\n    useEffect(() => {\r\n        const defaultWorld = getWorld('default');\r\n        if (!defaultWorld) {\r\n            createNewWorld();\r\n        }\r\n        loadWeatherData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setSunlightDirection(computeSunLocation(radius, hourAngle, declinationAngle, Util.toRadians(latitude))\r\n            .applyEuler(new Euler(-Math.PI / 2, 0, 0)));\r\n    }, [latitude, hourAngle, declinationAngle]);\r\n\r\n    useEffect(() => {\r\n        setCity(getClosestCity(latitude, longitude));\r\n    }, [latitude, longitude, weatherData]);\r\n\r\n    const nowString = now.toString();\r\n    useMemo(() => {\r\n        setHourAngle(computeHourAngle(now));\r\n        setDeclinationAngle(computeDeclinationAngle(now));\r\n    }, [nowString]);\r\n\r\n    const cameraPosition = new Vector3(0, 0, 5);\r\n    if (world) {\r\n        cameraPosition.set(world.cameraPosition.x, world.cameraPosition.y, world.cameraPosition.z);\r\n    }\r\n\r\n    console.log('x')\r\n\r\n    const setGrid = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.grid = on;\r\n        });\r\n    };\r\n\r\n    const setGroundImage = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.groundImage = on;\r\n        });\r\n    };\r\n\r\n    const setGroundColor = (color: string) => {\r\n        setCommonStore(state => {\r\n            state.groundColor = color;\r\n        });\r\n    };\r\n\r\n    const setHeliodon = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.heliodon = on;\r\n        });\r\n    };\r\n\r\n    // animation state should not be persisted\r\n    const setSunAnimation = (on: boolean) => {\r\n        setAnimateSun(on);\r\n    };\r\n\r\n    const changeDate = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setFullYear(date.getFullYear());\r\n        d.setMonth(date.getMonth());\r\n        d.setDate(date.getDate());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeTime = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setHours(date.getHours(), date.getMinutes());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeLatitude = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n        });\r\n    };\r\n\r\n    const changeLatitudeAndRemoveAddress = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n            state.address = '';\r\n        });\r\n    };\r\n\r\n    const changeLongitude = (longitude: number) => {\r\n        setCommonStore(state => {\r\n            state.longitude = longitude;\r\n        });\r\n    };\r\n\r\n    const changeMapZoom = (zoom: number) => {\r\n        setCommonStore(state => {\r\n            state.mapZoom = zoom;\r\n        });\r\n    };\r\n\r\n    const changeMapTilt = (tilt: number) => {\r\n        setCommonStore(state => {\r\n            state.mapTilt = tilt;\r\n        });\r\n    };\r\n\r\n    const changeMapType = (type: string) => {\r\n        setCommonStore(state => {\r\n            state.mapType = type;\r\n        });\r\n    };\r\n\r\n    const sunAboveHorizon = sunlightDirection.y > 0;\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div style={{\r\n                backgroundColor: 'lightblue',\r\n                height: '72px',\r\n                paddingTop: '10px',\r\n                fontSize: '30px'\r\n            }}>\r\n                <img alt='Aladdin Logo' src={aladdinLogo} height='50px' style={{verticalAlign: 'middle'}}/>\r\n                <span style={{paddingLeft: '20px', verticalAlign: 'middle'}}>Aladdin</span>\r\n            </div>\r\n            <div style={{\r\n                position: 'absolute',\r\n                bottom: '10px',\r\n                left: '10px',\r\n                zIndex: 999,\r\n                fontSize: '12px',\r\n                color: 'white'\r\n            }}>\r\n                <img alt='IFI Logo'\r\n                     src={ifiLogo}\r\n                     height='40px'\r\n                     style={{verticalAlign: 'bottom', cursor: 'pointer'}}\r\n                     title={'Go to Institute for Future Intelligence'}\r\n                     onClick={visitIFI}/>\r\n                &nbsp;&nbsp; Institute for Future Intelligence, &copy;{new Date().getFullYear()}. Version {VERSION}\r\n            </div>\r\n            <MainMenu/>\r\n            {showGroundPanel &&\r\n            <GroundPanel grid={grid}\r\n                         groundImage={groundImage}\r\n                         groundColor={groundColor}\r\n                         setGrid={setGrid}\r\n                         setGroundImage={setGroundImage}\r\n                         setGroundColor={setGroundColor}\r\n                         changeLatitude={changeLatitude}\r\n                         changeLongitude={changeLongitude}\r\n                         changeMapZoom={changeMapZoom}\r\n                         changeMapTilt={changeMapTilt}\r\n                         changeMapType={changeMapType}\r\n            />}\r\n            {showHeliodonPanel &&\r\n            <HeliodonPanel latitude={latitude}\r\n                           date={now}\r\n                           heliodon={heliodon}\r\n                           animateSun={animateSun}\r\n                           changeDate={changeDate}\r\n                           changeTime={changeTime}\r\n                           changeLatitude={changeLatitudeAndRemoveAddress}\r\n                           setHeliodon={setHeliodon}\r\n                           setSunAnimation={setSunAnimation}\r\n            />}\r\n            {showWeatherPanel &&\r\n            <WeatherPanel city={city}\r\n                          graphs={[WeatherDataType.MonthlyTemperatures, WeatherDataType.SunshineHours]}\r\n            />}\r\n            <Dropdown key={'canvas-context-menu'} overlay={<ContextMenu/>} trigger={['contextMenu']}>\r\n                <div>\r\n                    <Canvas shadows={true}\r\n                            camera={{\r\n                                position: cameraPosition,\r\n                                fov: 90\r\n                            }}\r\n                            style={{height: 'calc(100vh - 70px)', backgroundColor: 'black'}}>\r\n                        <Suspense fallback={null}>\r\n                            <OrbitController/>\r\n                            <ambientLight intensity={0.25}/>\r\n                            <directionalLight\r\n                                color='white'\r\n                                position={[sunlightDirection.x, sunlightDirection.y, sunlightDirection.z]}\r\n                                intensity={sunAboveHorizon ? 0.5 : 0}\r\n                                castShadow\r\n                                shadow-mapSize-height={512}\r\n                                shadow-mapSize-width={512}\r\n                            />\r\n                            {grid && <gridHelper args={[500, 100, 'gray', 'gray']}/>}\r\n                            <Compass/>\r\n                            {/*<Sample/>*/}\r\n                            {axes && <Axes/>}\r\n                            <Ground/>\r\n                            {groundImage && <GroundImage/>}\r\n                            <Sky theme={theme} night={!sunAboveHorizon}/>\r\n                            {heliodon &&\r\n                            <Heliodon\r\n                                hourAngle={hourAngle}\r\n                                declinationAngle={declinationAngle}\r\n                                radius={radius}\r\n                                date={now}\r\n                                latitude={Util.toRadians(latitude)}\r\n                            />}\r\n                            {world && <Scene world={world}/>}\r\n                        </Suspense>\r\n                    </Canvas>\r\n                </div>\r\n            </Dropdown>\r\n            <AcceptCookie/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}