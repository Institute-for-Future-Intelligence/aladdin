{"version":3,"sources":["resources/weather.csv","util.ts","stores/common.ts","orbitController.tsx","types.ts","resources/daysky.jpg","resources/nightsky.jpg","resources/desert.jpg","resources/desert-night.jpg","resources/grassland.jpg","resources/grassland-night.jpg","views/sky.tsx","assets/menu.svg","views/axes.tsx","assets/compass.obj","fonts/helvetiker_regular.typeface.fnt","views/compass.tsx","views/foundation.tsx","scene.tsx","views/ground.tsx","views/sunTools.ts","views/heliodon.tsx","assets/aladdin-logo.png","assets/ifi-logo.png","components/symbols.tsx","mainMenu.tsx","maps.tsx","components/spinner.tsx","groundPanel.tsx","heliodonPanel.tsx","constants.ts","helpers.ts","acceptCookie.tsx","views/groundImage.tsx","contextMenu.tsx","components/linePlot.tsx","weatherPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Util","Vector3","Math","PI","degrees","radians","sphereCoords","a","x","cos","z","y","sin","set","lng1","lat1","lng2","lat2","toRadians","acos","abs","date","now","Date","start","getFullYear","diff","getTime","floor","enableMapSet","useStore","create","devtools","persist","get","api","immerSet","fn","produce","showGroundPanel","showHeliodonPanel","showWeatherPanel","grid","axes","groundImage","groundColor","theme","heliodon","address","latitude","longitude","mapZoom","mapType","mapTilt","toString","weatherData","clickObjectType","worlds","getWorld","name","createNewWorld","state","elements","push","type","cx","cy","lx","ly","height","id","world","cameraPosition","loadWeatherData","data","Papa","parse","weather","download","complete","results","row","Array","isArray","length","lows","highs","sun","i","parseFloat","trim","wm","city","country","elevation","lowestTemperatures","highestTemperatures","sunshineHours","getWeather","location","getClosestCity","lat","lng","distance","min","Number","MAX_VALUE","wd","hasOwnProperty","getDistance","extend","OrbitControls","GraphType","Theme","ClickObjectType","OrbitController","setCommonStore","useThree","camera","domElement","gl","controls","useRef","useEffect","c","current","target","addEventListener","onInteractionEnd","removeEventListener","w","position","ref","args","enableZoom","maxAzimuthAngle","minAzimuthAngle","_defs","_path","_path2","_path3","_path4","_path5","_path6","Sky","night","props","meshRef","texture","useMemo","loader","TextureLoader","load","DesertNightSkyImage","DesertDaySkyImage","GrasslandNightSkyImage","GrasslandDaySkyImage","DefaultNightSkyImage","DefaultDaySkyImage","clickSky","e","intersections","object","sky","scale","onContextMenu","onClick","map","side","DoubleSide","opacity","color","Axes","lineWidth","endPoint","Line","points","Compass","model","useLoader","OBJLoader","compassObj","font","FontLoader","helvetikerFont","mesh","textGeometryParams","size","textMaterial","MeshBasicMaterial","compassMaterial","useFrame","v","unproject","rotation","Euler","material","Foundation","lineColor","hovered","selected","baseRef","handleLLRef","handleULRef","handleLRRef","handleURRef","positionLL","positionUL","positionLR","positionUR","yOffset","hoverMe","on","castShadow","receiveShadow","onPointerOver","onPointerOut","attach","Scene","filter","Ground","planeRef","ground","TILT_ANGLE","computeDeclinationAngle","days","TWO_PI","computeSunLocation","radius","hourAngle","declinationAngle","observerLatitude","altitudeAngle","asin","xAzm","yAzm","azimuthAngle","atan2","coords","sphericalToCartesianZ","setX","Heliodon","basePoints","tickPoints","step","counter","angle","theta","width","p","ZERO_TOLERANCE","basePositions","Float32Array","baseNormals","baseColors","j","sunPathPoints","h","getSunPathPointsByDate","d","pointArraySunPaths","dMin","delta","arr","sunPosition","sunbeltGeometry","declinationStep","hourStep","geometry","BufferGeometry","verticesCount","vertices","indices","h2","d2","v1","v2","v3","v4","setFromPoints","setIndex","BufferAttribute","Uint16Array","attachObject","count","array","itemSize","vertexColors","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","index","Color","transparent","clippingPlanes","Plane","UNIT_VECTOR_POS_Y","SphereGeometry","_extends","Object","assign","arguments","source","key","prototype","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgMenu","_ref","svgRef","title","titleId","t","className","viewBox","xmlns","xmlnsXlink","Direction","ForwardRef","StyledMenuSVG","styled","MenuSVG","MainMenu","menu","Item","checked","onChange","overlay","trigger","containerStyle","border","Maps","setLatitude","setLongitude","setZoom","setTilt","setType","zoom","tilt","useState","setMap","onLoad","useCallback","onUnmount","latLng","mapContainerStyle","mapTypeId","center","onCenterChanged","getCenter","onZoomChanged","getZoom","onTiltChanged","getTilt","onMapTypeIdChanged","typeId","getMapTypeId","memo","Spin","libraries","Container","div","ColumnWrapper","Header","GroundPanel","setGrid","setGroundImage","setGroundColor","changeLatitude","changeLongitude","changeMapZoom","changeMapTilt","changeMapType","searchBox","useJsApiLoader","googleMapsApiKey","process","isLoaded","loadError","style","cursor","direction","padding","align","onChangeComplete","colorResult","hex","s","onPlacesChanged","places","getPlaces","formatted_address","placeholder","boxSizing","borderRadius","boxShadow","fontSize","outline","textOverflow","toFixed","HeliodonPanel","animateSun","setHeliodon","setSunAnimation","changeDate","changeTime","requestRef","previousFrameTime","requestAnimationFrame","animate","cancelAnimationFrame","currentFrameTime","day","getDate","setHours","getHours","getMinutes","setDate","value","moment","toDate","format","marks","0","90","max","tooltipVisible","defaultValue","PRESET_COLORS","MONTHS","visitIFI","window","open","AcceptCookie","buttonText","cookieName","background","textAlign","zIndex","buttonStyle","expires","GroundImage","useTexture","SubMenu","Menu","radioStyle","display","paddingLeft","lineHeight","ContextMenu","Group","default","desert","grassland","SYMBOLS","CircleSymbol","stroke","numberOfSymbols","interval","round","r","fill","strokeWidth","SquareSymbol","TriangleSymbol","pointsString","UP","LEFT","RIGHT","DiamondSymbol","StarSymbol","HexagonSymbol","createSymbol","DOWN","LinePlot","dataSource","labelX","labelY","unitX","unitY","lineCount","setLineCount","horizontalGridLines","verticalGridLines","legendDataKey","setLegendDataKey","symbolCount","symbolSize","len","getLines","defaultSymbol","lines","monthlyTemperatures","hourlyTemperatures","symbol","dataKey","dot","isAnimationActive","userSelect","top","left","ResponsiveContainer","LineChart","onMouseDown","margin","right","bottom","Tooltip","formatter","CartesianGrid","vertical","horizontal","ReferenceLine","daysIntoYear","XAxis","Label","offset","YAxis","domain","dx","Legend","iconType","verticalAlign","onMouseLeave","o","onMouseEnter","WeatherPanel","graphs","rest","responsiveHeight","getData","result","forEach","g","Month","Low","High","Sunshine","yNames","yUnits","App","setHourAngle","setDeclinationAngle","sunlightDirection","setSunlightDirection","setAnimateSun","setCity","applyEuler","nowString","console","log","sunAboveHorizon","backgroundColor","paddingTop","alt","src","aladdinLogo","ifiLogo","setFullYear","setMonth","getMonth","shadows","fov","fallback","intensity","shadow-mapSize-height","shadow-mapSize-width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d60674d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/weather.55ddf5ca.csv\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Vector3} from \"three\";\r\n\r\nexport class Util {\r\n\r\n    static get UNIT_VECTOR_POS_X() {\r\n        return new Vector3(1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_X() {\r\n        return new Vector3(-1, 0, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Y() {\r\n        return new Vector3(0, 1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Y() {\r\n        return new Vector3(0, -1, 0);\r\n    }\r\n\r\n    static get UNIT_VECTOR_POS_Z() {\r\n        return new Vector3(0, 0, 1);\r\n    }\r\n\r\n    static get UNIT_VECTOR_NEG_Z() {\r\n        return new Vector3(0, 0, -1);\r\n    }\r\n\r\n    static get ZERO_TOLERANCE() {\r\n        return 0.0001;\r\n    }\r\n\r\n    static get HALF_PI() {\r\n        return Math.PI / 2;\r\n    }\r\n\r\n    static get TWO_PI() {\r\n        return Math.PI * 2;\r\n    }\r\n\r\n    static toRadians(degrees: number) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    static toDegrees(radians: number) {\r\n        return radians * (180 / Math.PI);\r\n    }\r\n\r\n    static sphericalToCartesianZ(sphereCoords: THREE.Vector3) {\r\n        let a = sphereCoords.x * Math.cos(sphereCoords.z);\r\n        let x = a * Math.cos(sphereCoords.y);\r\n        let y = a * Math.sin(sphereCoords.y);\r\n        let z = sphereCoords.x * Math.sin(sphereCoords.z);\r\n        sphereCoords.set(x, y, z);\r\n        return sphereCoords;\r\n    }\r\n\r\n    // the spherical law of cosines: https://en.wikipedia.org/wiki/Spherical_law_of_cosines\r\n    static getDistance(lng1: number, lat1: number, lng2: number, lat2: number) {\r\n        lng1 = Util.toRadians(lng1);\r\n        lat1 = Util.toRadians(lat1);\r\n        lng2 = Util.toRadians(lng2);\r\n        lat2 = Util.toRadians(lat2);\r\n        return Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(Math.abs(lng1 - lng2)));\r\n    }\r\n\r\n    static daysIntoYear(date: string) {\r\n        const now = new Date(date);\r\n        const start = new Date(now.getFullYear(), 0, 0);\r\n        const diff = now.getTime() - start.getTime();\r\n        const oneDay = 1000 * 60 * 60 * 24;\r\n        return Math.floor(diff / oneDay);\r\n    }\r\n\r\n}\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport create from 'zustand';\r\nimport {devtools, persist} from 'zustand/middleware';\r\nimport produce, {enableMapSet} from 'immer';\r\nimport {WorldModel} from \"../models/worldModel\";\r\nimport {Vector3} from \"three\";\r\nimport {ElementModel} from \"../models/elementModel\";\r\nimport {WeatherModel} from \"../models/weatherModel\";\r\nimport weather from '../resources/weather.csv';\r\nimport Papa from \"papaparse\";\r\nimport {Util} from \"../util\";\r\n\r\nenableMapSet();\r\n\r\nexport interface CommonStoreState {\r\n    set: (fn: (state: CommonStoreState) => void) => void;\r\n    worlds: { [key: string]: WorldModel };\r\n    createNewWorld: () => void;\r\n    getWorld: (name: string) => WorldModel;\r\n\r\n    showGroundPanel: boolean;\r\n    showHeliodonPanel: boolean;\r\n    showWeatherPanel: boolean;\r\n\r\n    grid: boolean;\r\n    axes: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    theme: string;\r\n    heliodon: boolean;\r\n    address: string;\r\n    latitude: number;\r\n    longitude: number;\r\n    mapZoom: number;\r\n    mapType: string;\r\n    mapTilt: number;\r\n    date: string;\r\n\r\n    weatherData: { [key: string]: WeatherModel };\r\n    getWeather: (location: string) => WeatherModel;\r\n    loadWeatherData: () => void;\r\n    getClosestCity: (lat: number, lng: number) => string | null;\r\n\r\n    clickObjectType: string | null;\r\n\r\n}\r\n\r\nexport const useStore = create<CommonStoreState>(devtools(persist((\r\n    set,\r\n    get,\r\n    api,\r\n) => {\r\n\r\n    const immerSet: CommonStoreState['set'] = fn => set(produce(fn));\r\n\r\n    return {\r\n\r\n        set: immerSet,\r\n\r\n        showGroundPanel: false,\r\n        showHeliodonPanel: false,\r\n        showWeatherPanel: false,\r\n\r\n        grid: false,\r\n        axes: true,\r\n        groundImage: false,\r\n        groundColor: 'forestgreen',\r\n        theme: 'Default',\r\n        heliodon: false,\r\n\r\n        address: 'Natick, MA',\r\n        latitude: 42.2844063,\r\n        longitude: -71.3488548,\r\n        mapZoom: 16,\r\n        mapType: 'roadmap',\r\n        mapTilt: 0,\r\n        date: new Date(2021, 5, 22, 12).toString(),\r\n        weatherData: {},\r\n\r\n        clickObjectType: null,\r\n\r\n        worlds: {},\r\n        getWorld(name: string) {\r\n            return get().worlds[name];\r\n        },\r\n        createNewWorld() {\r\n            immerSet((state: CommonStoreState) => {\r\n                const elements: ElementModel[] = [];\r\n                const e1 = {type: 'Foundation', cx: 0, cy: 0, lx: 1, ly: 2, height: 0.1, id: 'f1'};\r\n                const e2 = {type: 'Foundation', cx: 0, cy: 2, lx: 2, ly: 2, height: 0.2, id: 'f2'};\r\n                elements.push(e1);\r\n                elements.push(e2);\r\n                const world = {\r\n                    name: 'default',\r\n                    elements: elements,\r\n                    cameraPosition: new Vector3(0, 0, 5)\r\n                };\r\n                state.worlds[world.name] = world;\r\n            })\r\n        },\r\n\r\n        loadWeatherData() {\r\n            const data: WeatherModel[] = [];\r\n            Papa.parse(weather, {\r\n                download: true,\r\n                complete: function (results) {\r\n                    for (const row of results.data) {\r\n                        if (Array.isArray(row) && row.length > 1) {\r\n                            const lows: number[] = [];\r\n                            const highs: number[] = [];\r\n                            const sun: number[] = [];\r\n                            for (let i = 5; i < 29; i++) {\r\n                                if ((i - 5) % 2 === 0) {\r\n                                    lows.push(parseFloat(row[i].trim()));\r\n                                } else {\r\n                                    highs.push(parseFloat(row[i].trim()));\r\n                                }\r\n                            }\r\n                            for (let i = 29; i < 41; i++) {\r\n                                sun.push(parseFloat(row[i].trim()));\r\n                            }\r\n                            const wm = {\r\n                                city: row[0].trim(),\r\n                                country: row[1].trim(),\r\n                                longitude: parseFloat(row[2].trim()),\r\n                                latitude: parseFloat(row[3].trim()),\r\n                                elevation: parseFloat(row[4].trim()),\r\n                                lowestTemperatures: lows,\r\n                                highestTemperatures: highs,\r\n                                sunshineHours: sun\r\n                            } as WeatherModel;\r\n                            data.push(wm);\r\n                        }\r\n                    }\r\n                    immerSet((state: CommonStoreState) => {\r\n                        for (const row of data) {\r\n                            state.weatherData[row.city + ', ' + row.country] = row;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        getWeather(location: string) {\r\n            return get().weatherData[location];\r\n        },\r\n        getClosestCity(lat: number, lng: number) {\r\n            let min: number = Number.MAX_VALUE;\r\n            let city = null;\r\n            let distance: number;\r\n            const wd = get().weatherData;\r\n            for (const name in wd) {\r\n                if (wd.hasOwnProperty(name)) {\r\n                    distance = Util.getDistance(lng, lat, wd[name].longitude, wd[name].latitude);\r\n                    if (distance < min) {\r\n                        min = distance;\r\n                        city = name;\r\n                    }\r\n                }\r\n            }\r\n            return city;\r\n        }\r\n    };\r\n}, {name: 'aladdin-storage'})));\r\n\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {extend, Object3DNode, useThree} from \"@react-three/fiber\";\r\nimport {useStore} from \"./stores/common\";\r\n\r\n// Extend will make OrbitControls available as a JSX element called orbitControls for us to use.\r\nextend({OrbitControls});\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            'orbitControls': Object3DNode<OrbitControls, typeof OrbitControls>;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface OrbitControllerProps {\r\n    [key: string]: any;\r\n}\r\n\r\n// Get a reference to the Three.js Camera, and the canvas html element.\r\n// We need these to setup the OrbitControls class.\r\n// https://threejs.org/docs/#examples/en/controls/OrbitControls\r\nconst OrbitController = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const {camera, gl: {domElement}} = useThree();\r\n    // Ref to the controls, so that we can update them on every frame using useFrame\r\n    const controls = useRef<OrbitControls>(null);\r\n\r\n    useEffect(() => {\r\n        const c = controls.current;\r\n        if (c) {\r\n            c.target.set(0, 0, 0);\r\n            c.addEventListener('end', onInteractionEnd);\r\n        }\r\n        return () => {\r\n            c?.removeEventListener('end', onInteractionEnd);\r\n        }\r\n    });\r\n\r\n    const onInteractionEnd = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                // FIXME: why can't set function be used?\r\n                w.cameraPosition.x = camera.position.x;\r\n                w.cameraPosition.y = camera.position.y;\r\n                w.cameraPosition.z = camera.position.z;\r\n            }\r\n        });\r\n    };\r\n\r\n    // animation\r\n    // useFrame((state) => {\r\n    //     if (controls.current) {\r\n    //         controls.current.update();\r\n    //     }\r\n    // });\r\n\r\n    return (\r\n        <orbitControls\r\n            ref={controls}\r\n            args={[camera, domElement]}\r\n            enableZoom={true}\r\n            maxAzimuthAngle={Math.PI}\r\n            minAzimuthAngle={-Math.PI}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default OrbitController;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nexport interface RechartsDatumEntry {\r\n    [key: string]: number | undefined;\r\n}\r\n\r\nexport enum GraphType {\r\n    hourlyTemperatures = 0,\r\n    monthlyTemperatures = 1,\r\n    sunshineHours = 2,\r\n}\r\n\r\nexport enum Theme {\r\n    default = 'Default',\r\n    desert = 'Desert',\r\n    grassland = 'Grassland',\r\n}\r\n\r\nexport enum ClickObjectType {\r\n    sky = 'Sky',\r\n    ground = 'Ground',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/daysky.66925efd.jpg\";","export default __webpack_public_path__ + \"static/media/nightsky.2ee37da6.jpg\";","export default __webpack_public_path__ + \"static/media/desert.e1e10657.jpg\";","export default __webpack_public_path__ + \"static/media/desert-night.6f0f274c.jpg\";","export default __webpack_public_path__ + \"static/media/grassland.d74bba81.jpg\";","export default __webpack_public_path__ + \"static/media/grassland-night.fa2ff11e.jpg\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo, useRef} from \"react\";\r\nimport DefaultDaySkyImage from \"../resources/daysky.jpg\";\r\nimport DefaultNightSkyImage from \"../resources/nightsky.jpg\";\r\nimport DesertDaySkyImage from \"../resources/desert.jpg\";\r\nimport DesertNightSkyImage from \"../resources/desert-night.jpg\";\r\nimport GrasslandDaySkyImage from \"../resources/grassland.jpg\";\r\nimport GrasslandNightSkyImage from \"../resources/grassland-night.jpg\";\r\nimport {DoubleSide, Mesh, TextureLoader} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {ClickObjectType} from \"../types\";\r\nimport {ThreeEvent} from \"@react-three/fiber\";\r\n\r\nexport interface SkyProps {\r\n    theme?: string,\r\n    night?: boolean,\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Sky = ({\r\n                 theme = 'Default',\r\n                 night = false,\r\n                 ...props\r\n             }: SkyProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const meshRef = useRef<Mesh>(null!);\r\n    const texture = useMemo(() => {\r\n        const loader = new TextureLoader();\r\n        let texture;\r\n        switch (theme) {\r\n            case 'Desert':\r\n                texture = loader.load(night ? DesertNightSkyImage : DesertDaySkyImage);\r\n                break;\r\n            case 'Grassland':\r\n                texture = loader.load(night ? GrasslandNightSkyImage : GrasslandDaySkyImage);\r\n                break;\r\n            default:\r\n                texture = loader.load(night ? DefaultNightSkyImage : DefaultDaySkyImage);\r\n        }\r\n        return texture;\r\n    }, [theme, night]);\r\n\r\n    const clickSky = (e: ThreeEvent<MouseEvent>) => {\r\n        if (e.intersections.length > 0) {\r\n            const skyClicked = e.intersections[0].object === meshRef.current;\r\n            if (skyClicked) {\r\n                setCommonStore((state) => {\r\n                    state.clickObjectType = ClickObjectType.sky;\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={meshRef}\r\n            name={'Sky'}\r\n            scale={1}\r\n            onContextMenu={(e) => {\r\n                clickSky(e);\r\n            }}\r\n            onClick={(e) => {\r\n                clickSky(e);\r\n            }}\r\n        >\r\n            <sphereGeometry args={[1000, 16, 16, 0, 2 * Math.PI, 0, Math.PI / 2 + 0.01]}/>\r\n            <meshBasicMaterial map={texture}\r\n                               side={DoubleSide}\r\n                               opacity={1}\r\n                               color={'skyblue'}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Sky;\r\n","var _defs, _path, _path2, _path3, _path4, _path5, _path6;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgMenu(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    t: 1613755944969,\n    className: \"icon\",\n    viewBox: \"0 0 1024 1024\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"p-id\": 5967,\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 200,\n    height: 200,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 235.50871m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5968\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 165.510915h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5969\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 512.1129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5970\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 442.115105h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5971\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M194.187431 788.49129m-69.997795 0a69.997795 69.997795 0 1 0 139.99559 0 69.997795 69.997795 0 1 0-139.99559 0Z\",\n    \"p-id\": 5972\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M347.505182 718.719294h552.305182v139.99559H347.505182z\",\n    \"p-id\": 5973\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMenu);\nexport default __webpack_public_path__ + \"static/media/menu.c2982aed.svg\";\nexport { ForwardRef as ReactComponent };","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {Vector3} from \"three\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface AxesProps {\r\n    lineWidth?: number,\r\n    endPoint?: number,\r\n}\r\n\r\nconst Axes = ({lineWidth = 1, endPoint = 1000}: AxesProps) => {\r\n    return (\r\n        <mesh>\r\n            <Line points={[new Vector3(-endPoint, 0, 0), new Vector3(endPoint, 0, 0)]}\r\n                  color={'red'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, -endPoint, 0), new Vector3(0, endPoint, 0)]}\r\n                  color={'green'}\r\n                  lineWidth={lineWidth}/>\r\n            <Line points={[new Vector3(0, 0, -endPoint), new Vector3(0, 0, endPoint)]}\r\n                  color={'blue'}\r\n                  lineWidth={lineWidth}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Axes;\r\n","export default __webpack_public_path__ + \"static/media/compass.7ded737e.obj\";","export default __webpack_public_path__ + \"static/media/helvetiker_regular.typeface.9a3651b4.fnt\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {useFrame, useLoader, useThree} from '@react-three/fiber'\r\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\r\nimport {Euler, FontLoader, Mesh, MeshBasicMaterial, TextGeometryParameters, Vector3} from \"three\";\r\nimport compassObj from '../assets/compass.obj';\r\nimport helvetikerFont from '../fonts/helvetiker_regular.typeface.fnt';\r\n\r\nexport interface CompassProps {\r\n    scale?: number;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst Compass = ({\r\n                     scale = 0.01,\r\n                     ...props\r\n                 }: CompassProps) => {\r\n    const model = useLoader(OBJLoader, compassObj);\r\n    const font = useLoader(FontLoader, helvetikerFont);\r\n    const mesh = useRef<Mesh>(null!);\r\n    const textGeometryParams = {font: font, height: 0.00, size: 0.005} as TextGeometryParameters;\r\n    const textMaterial = new MeshBasicMaterial({color: 'white'});\r\n    const compassMaterial = new MeshBasicMaterial({color: 'red'});\r\n\r\n    // FIXME: This is not the right way to fix the compass\r\n    const {camera} = useThree();\r\n    useFrame((state) => {\r\n        if (mesh.current) {\r\n            const v = new Vector3(0.88, -0.8, 0.1).unproject(camera);\r\n            mesh.current.position.set(v.x, v.y, v.z);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <mesh\r\n            {...props}\r\n            ref={mesh}\r\n            rotation={new Euler(-Math.PI / 2, 0, 0)}\r\n        >\r\n            <mesh position={[-0.001, 0.02, 0]} material={textMaterial}>\r\n                <textGeometry args={['N', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.0015, -0.025, 0]} material={textMaterial}>\r\n                <textGeometry args={['S', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[-0.025, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['W', textGeometryParams]}/>\r\n            </mesh>\r\n            <mesh position={[0.02, -0.002, 0]} material={textMaterial}>\r\n                <textGeometry args={['E', textGeometryParams]}/>\r\n            </mesh>\r\n            <primitive object={model} scale={scale} material={compassMaterial}/>\r\n        </mesh>\r\n    );\r\n};\r\n\r\nexport default Compass;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Box, Line, Sphere} from \"@react-three/drei\";\r\nimport {Vector3} from \"three\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {FoundationModel} from \"../models/foundationModel\";\r\n\r\nconst Foundation = ({\r\n                        id,\r\n                        cx,\r\n                        cy,\r\n                        lx = 1,\r\n                        ly = 1,\r\n                        height = 0.1,\r\n                        color = 'gray',\r\n                        lineColor = 'black',\r\n                        hovered = false,\r\n                        selected = false,\r\n                    }: FoundationModel) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n\r\n    const baseRef = useRef();\r\n    const handleLLRef = useRef();\r\n    const handleULRef = useRef();\r\n    const handleLRRef = useRef();\r\n    const handleURRef = useRef();\r\n\r\n    const positionLL = new Vector3(cx - lx / 2, height / 2, cy - ly / 2);\r\n    const positionUL = new Vector3(cx - lx / 2, height / 2, cy + ly / 2);\r\n    const positionLR = new Vector3(cx + lx / 2, height / 2, cy - ly / 2);\r\n    const positionUR = new Vector3(cx + lx / 2, height / 2, cy + ly / 2);\r\n\r\n    const yOffset = 0.002;\r\n\r\n    const selectMe = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = e.id === id;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const hoverMe = (on: boolean) => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    if (e.id === id) {\r\n                        e.hovered = on;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n\r\n        <group>\r\n\r\n            {/* draw rectangle */}\r\n            <Box castShadow receiveShadow\r\n                 ref={baseRef}\r\n                 name={'Foundation'}\r\n                 onClick={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             selectMe();\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOver={(e) => {\r\n                     if (e.intersections.length > 0) {\r\n                         const intersected = e.intersections[0].object === baseRef.current;\r\n                         if (intersected) {\r\n                             hoverMe(true);\r\n                         }\r\n                     }\r\n                 }}\r\n                 onPointerOut={(e) => {\r\n                     hoverMe(false);\r\n                 }}\r\n                 args={[lx, height, ly]}\r\n                 position={[cx, height / 2, cy]}>\r\n                <meshStandardMaterial attach=\"material\" color={hovered ? 'lightGray' : color}/>\r\n            </Box>\r\n\r\n            <>\r\n                {/* draw wireframe lines upper face */}\r\n                <Line points={[[positionLL.x, height, positionLL.z], [positionLR.x, height, positionLR.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, height, positionLR.z], [positionUR.x, height, positionUR.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, height, positionUR.z], [positionUL.x, height, positionUL.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, height, positionUL.z], [positionLL.x, height, positionLL.z]]}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe lines lower face */}\r\n                <Line points={[[positionLL.x, yOffset, positionLL.z], [positionLR.x, yOffset, positionLR.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, yOffset, positionLR.z], [positionUR.x, yOffset, positionUR.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, yOffset, positionUR.z], [positionUL.x, yOffset, positionUL.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, yOffset, positionUL.z], [positionLL.x, yOffset, positionLL.z]]}\r\n                      color={lineColor}/>\r\n\r\n                {/* draw wireframe vertical lines */}\r\n                <Line points={[[positionLL.x, yOffset, positionLL.z], [positionLL.x, height, positionLL.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionLR.x, yOffset, positionLR.z], [positionLR.x, height, positionLR.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUL.x, yOffset, positionUL.z], [positionUL.x, height, positionUL.z]]}\r\n                      color={lineColor}/>\r\n                <Line points={[[positionUR.x, yOffset, positionUR.z], [positionUR.x, height, positionUR.z]]}\r\n                      color={lineColor}/>\r\n            </>\r\n\r\n            {/* draw handles */}\r\n            {selected &&\r\n            <>\r\n                <Sphere ref={handleLLRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleULRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionUL}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleLRRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionLR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n                <Sphere ref={handleURRef}\r\n                        args={[0.1, 6, 6]}\r\n                        position={positionUR}>\r\n                    <meshStandardMaterial attach=\"material\" color={'white'}/>\r\n                </Sphere>\r\n            </>\r\n            }\r\n\r\n        </group>\r\n    )\r\n};\r\n\r\nexport default Foundation;\r\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport Foundation from \"./views/foundation\";\nimport {Box} from \"@react-three/drei\";\nimport {WorldModel} from \"./models/worldModel\";\nimport {FoundationModel} from \"./models/foundationModel\";\n\nconst Scene: React.FC<{ world: WorldModel }> = ({world}) => {\n    return (\n        <group>\n            <Box castShadow receiveShadow\n                 args={[1, 2, 1]}\n                 position={[2, 1, 2]}>\n                <meshStandardMaterial attach=\"material\" color={'white'}/>\n            </Box>\n            {world.elements\n                .filter(e => e.type === 'Foundation')\n                .map(e => <Foundation key={e.id} {...e as FoundationModel}/>)}\n        </group>\n    );\n};\n\nexport default Scene;\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from \"react\";\r\nimport {Plane} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide} from \"three\";\r\nimport {ClickObjectType} from \"../types\";\r\n\r\nconst Ground = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const planeRef = useRef();\r\n\r\n    const selectNone = () => {\r\n        setCommonStore((state) => {\r\n            const w = state.worlds['default'];\r\n            if (w) {\r\n                for (const e of w.elements) {\r\n                    e.selected = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Plane receiveShadow\r\n               ref={planeRef}\r\n               name={'Ground'}\r\n               onContextMenu={(e) => {\r\n                   if (e.intersections.length > 0) {\r\n                       const groundClicked = e.intersections[0].object === planeRef.current;\r\n                       if (groundClicked) {\r\n                           setCommonStore((state) => {\r\n                               state.clickObjectType = ClickObjectType.ground;\r\n                           });\r\n                       }\r\n                   }\r\n               }}\r\n               onClick={(e) => {\r\n                   if (e.intersections.length > 0) {\r\n                       const groundClicked = e.intersections[0].object === planeRef.current;\r\n                       if (groundClicked) {\r\n                           setCommonStore((state) => {\r\n                               state.clickObjectType = ClickObjectType.ground;\r\n                           });\r\n                           selectNone();\r\n                       }\r\n                   }\r\n               }}\r\n               rotation={[-Math.PI / 2, 0, 0]}\r\n               position={[0, -0.01, 0]}\r\n               args={[10000, 10000]}>\r\n            <meshStandardMaterial side={DoubleSide} attach=\"material\" color={groundColor}/>\r\n        </Plane>\r\n    )\r\n};\r\n\r\nexport default Ground;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport {Vector3} from \"three\";\r\n\r\nexport const TILT_ANGLE = 23.45 / 180.0 * Math.PI;\r\n\r\nexport const computeDeclinationAngle = (date: Date) => {\r\n    const days = Math.floor((date.getTime()\r\n        - new Date(date.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\r\n    return TILT_ANGLE * Math.sin(Util.TWO_PI * (284 + days) / 365.25);\r\n};\r\n\r\nexport const computeHourAngle = (date: Date) => {\r\n    const minutes = date.getHours() * 60 + date.getMinutes() - 12 * 60;\r\n    return minutes / (12.0 * 60.0) * Math.PI;\r\n}\r\n\r\nexport const computeSunLocation = (radius: number,\r\n                                   hourAngle: number,\r\n                                   declinationAngle: number,\r\n                                   observerLatitude: number) => {\r\n    const altitudeAngle = Math.asin(\r\n        Math.sin(declinationAngle) * Math.sin(observerLatitude) +\r\n        Math.cos(declinationAngle) * Math.cos(hourAngle) * Math.cos(observerLatitude)\r\n    );\r\n    const xAzm = Math.sin(hourAngle) * Math.cos(declinationAngle);\r\n    const yAzm = Math.cos(observerLatitude) * Math.sin(declinationAngle)\r\n        - Math.cos(hourAngle) * Math.cos(declinationAngle) * Math.sin(observerLatitude);\r\n    const azimuthAngle = Math.atan2(yAzm, xAzm);\r\n    const coords = new Vector3(radius, azimuthAngle, altitudeAngle);\r\n    Util.sphericalToCartesianZ(coords);\r\n    // reverse the x so that sun moves from east to west\r\n    coords.setX(-coords.x);\r\n    return coords;\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Util} from \"../util\";\r\nimport React, {useEffect, useMemo} from \"react\";\r\nimport {\r\n    BufferAttribute,\r\n    BufferGeometry,\r\n    Color,\r\n    DoubleSide,\r\n    Euler,\r\n    MeshBasicMaterial,\r\n    Plane,\r\n    SphereGeometry,\r\n    Vector3\r\n} from \"three\";\r\nimport {\r\n    computeDeclinationAngle,\r\n    computeSunLocation,\r\n    TILT_ANGLE\r\n} from \"./sunTools\";\r\nimport {Line} from \"@react-three/drei\";\r\n\r\nexport interface HeliodonProps {\r\n    radius: number;\r\n    hourAngle: number;\r\n    declinationAngle: number;\r\n    date: Date;\r\n    latitude: number; // in radian\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst HOUR_DIVISIONS = 96;\r\nconst BASE_DIVISIONS = 72;\r\nconst DECLINATION_DIVISIONS = 12;\r\n\r\nconst Heliodon = ({\r\n                      hourAngle,\r\n                      declinationAngle,\r\n                      radius = 10,\r\n                      date = new Date(),\r\n                      latitude = 42 / 180.0 * Math.PI,\r\n                  }: HeliodonProps) => {\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // remove listeners if any\r\n        }\r\n    }, [date, latitude]);\r\n\r\n    const nRibLines = 5;\r\n\r\n    const [basePositions, baseNormals, baseColors, tickPoints] = useMemo(() => {\r\n        const basePoints: Vector3[] = [];\r\n        const tickPoints: Vector3[] = [];\r\n        const step = Math.PI * 2 / BASE_DIVISIONS;\r\n        let counter = 0;\r\n        for (let angle = 0; angle < Util.TWO_PI + step / 2.0; angle += step) {\r\n            const theta = Math.min(angle, Util.TWO_PI);\r\n            let width = 0.05 * radius;\r\n            // TODO: This is inefficient. We should use indexed buffer to share vertices\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius + width, theta + step, 0)));\r\n            basePoints.push(Util.sphericalToCartesianZ(new Vector3(radius, theta + step, 0)));\r\n            let p;\r\n            if (Util.TWO_PI - theta > Util.ZERO_TOLERANCE) {\r\n                width = 0.05 * radius + (counter % 3 === 0 ? 0.2 : 0);\r\n                p = new Vector3(radius, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n                p = new Vector3(radius + width, theta, 0);\r\n                p.z = 0.002;\r\n                tickPoints.push(Util.sphericalToCartesianZ(p));\r\n            }\r\n            counter++;\r\n        }\r\n\r\n        // attributes\r\n        const length = basePoints.length * 3;\r\n        const basePositions = new Float32Array(length);\r\n        const baseNormals = new Float32Array(length);\r\n        const baseColors = new Float32Array(length);\r\n\r\n        for (let i = 0; i < basePoints.length; i++) {\r\n            const j = i * 3;\r\n            basePositions[j] = basePoints[i].x;\r\n            basePositions[j + 1] = basePoints[i].y;\r\n            basePositions[j + 2] = basePoints[i].z;\r\n            baseNormals[j] = 0;\r\n            baseNormals[j + 1] = 1;\r\n            baseNormals[j + 2] = 0;\r\n            const c = (Math.floor(i / 18)) % 2 === 0 ? 0.2 : 1.0;\r\n            baseColors[j] = c;\r\n            baseColors[j + 1] = c;\r\n            baseColors[j + 2] = c;\r\n        }\r\n\r\n        return [basePositions, baseNormals, baseColors, tickPoints];\r\n    }, [radius]);\r\n\r\n    const sunPathPoints = useMemo(() => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, declinationAngle, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    }, [latitude, radius, declinationAngle]);\r\n\r\n    const getSunPathPointsByDate = (d: number) => {\r\n        const step = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const points = [];\r\n        for (let h = -Math.PI; h < Math.PI + step / 2.0; h += step) {\r\n            const v = computeSunLocation(radius, h, d, latitude);\r\n            if (v.z > -0.1) {\r\n                points.push(v);\r\n            }\r\n        }\r\n        return points;\r\n    };\r\n\r\n    const pointArraySunPaths = useMemo(() => {\r\n        const dMin = computeDeclinationAngle(new Date(2021, 11, 22));\r\n        const dMax = computeDeclinationAngle(new Date(2021, 5, 22));\r\n        const delta = (dMax - dMin) / nRibLines;\r\n        const arr = [];\r\n        for (let i = 0; i <= nRibLines; i++) {\r\n            arr.push(getSunPathPointsByDate(dMin + i * delta));\r\n        }\r\n        return arr;\r\n    }, [latitude, radius]);\r\n\r\n    const sunPosition = useMemo(() => {\r\n        return computeSunLocation(radius, hourAngle, declinationAngle, latitude);\r\n    }, [latitude, declinationAngle, hourAngle, radius]);\r\n\r\n    const sunbeltGeometry = useMemo(() => {\r\n        const declinationStep = 2.0 * TILT_ANGLE / DECLINATION_DIVISIONS;\r\n        const hourStep = Util.TWO_PI / HOUR_DIVISIONS;\r\n        const geometry = new BufferGeometry();\r\n        let verticesCount = 0;\r\n        const vertices: Vector3[] = [];\r\n        const indices = [];\r\n        for (let d = -TILT_ANGLE; d < TILT_ANGLE - declinationStep / 2.0; d += declinationStep) {\r\n            for (let h = -Math.PI; h < Math.PI - hourStep / 2.0; h += hourStep) {\r\n                let h2 = h + hourStep;\r\n                let d2 = d + declinationStep;\r\n                if (h2 > Math.PI) {\r\n                    h2 = Math.PI;\r\n                }\r\n                if (d2 > TILT_ANGLE) {\r\n                    d2 = TILT_ANGLE;\r\n                }\r\n                const v1 = computeSunLocation(radius, h, d, latitude);\r\n                const v2 = computeSunLocation(radius, h2, d, latitude);\r\n                const v3 = computeSunLocation(radius, h2, d2, latitude);\r\n                const v4 = computeSunLocation(radius, h, d2, latitude);\r\n                if (v1.z >= 0 || v2.z >= 0 || v3.z >= 0 || v4.z >= 0) {\r\n                    vertices.push(v1, v2, v3, v4);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 1);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount);\r\n                    indices.push(verticesCount + 2);\r\n                    indices.push(verticesCount + 3);\r\n                    verticesCount += 4;\r\n                }\r\n            }\r\n        }\r\n        geometry.setFromPoints(vertices);\r\n        geometry.setIndex(new BufferAttribute(new Uint16Array(indices), 1));\r\n        return geometry;\r\n    }, [latitude, radius]);\r\n\r\n    return (\r\n        <mesh rotation={new Euler(-Math.PI / 2, 0, 0)}>\r\n            {/* draw base */}\r\n            <mesh>\r\n                <bufferGeometry attach='geometry'>\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"position\"]}\r\n                        count={basePositions.length / 3}\r\n                        array={basePositions}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"normal\"]}\r\n                        count={baseNormals.length / 3}\r\n                        array={baseNormals}\r\n                        itemSize={3}\r\n                    />\r\n                    <bufferAttribute\r\n                        attachObject={[\"attributes\", \"color\"]}\r\n                        count={baseColors.length / 3}\r\n                        array={baseColors}\r\n                        itemSize={3}\r\n                    />\r\n                </bufferGeometry>\r\n                <meshBasicMaterial side={DoubleSide}\r\n                                   vertexColors={true}\r\n                                   polygonOffset={true}\r\n                                   polygonOffsetFactor={-0.7}\r\n                                   polygonOffsetUnits={-2}/>\r\n            </mesh>\r\n            <lineSegments\r\n                args={[new BufferGeometry().setFromPoints(tickPoints),\r\n                    new MeshBasicMaterial({color: 0x000000})]}/>\r\n            {/* draw sun path*/}\r\n            <mesh>\r\n                {sunPathPoints.length > 3 && <Line lineWidth={2} points={sunPathPoints} color={'yellow'}/>}\r\n                {pointArraySunPaths\r\n                    .filter(a => a.length > 3)\r\n                    .map((a, index) => {\r\n                        return <Line key={index}\r\n                                     opacity={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     lineWidth={index === 0 || index === nRibLines ? 1 : 0.5}\r\n                                     points={a}\r\n                                     color={'#999'}/>;\r\n                    })\r\n                }\r\n                <mesh\r\n                    args={[sunbeltGeometry,\r\n                        new MeshBasicMaterial({\r\n                            side: DoubleSide,\r\n                            color: new Color(1, 1, 0),\r\n                            transparent: true,\r\n                            opacity: 0.5,\r\n                            clippingPlanes: [new Plane(Util.UNIT_VECTOR_POS_Y, 0)]\r\n                        })\r\n                    ]}\r\n                />\r\n                <mesh\r\n                    position={sunPosition}\r\n                    args={[new SphereGeometry(0.25, 20, 20),\r\n                        new MeshBasicMaterial({color: 0xffffff00})\r\n                    ]}\r\n                />\r\n            </mesh>\r\n        </mesh>\r\n    );\r\n\r\n};\r\n\r\nexport default Heliodon;\r\n","export default __webpack_public_path__ + \"static/media/aladdin-logo.96b59d24.png\";","export default __webpack_public_path__ + \"static/media/ifi-logo.eb360016.png\";","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nexport const SYMBOLS = [\r\n    'circle',\r\n    'square',\r\n    'triangle up',\r\n    'triangle down',\r\n    'triangle right',\r\n    'triangle left',\r\n    'star',\r\n    'diamond',\r\n    'hexagon'\r\n];\r\n\r\nexport enum Direction {\r\n    DOWN, UP, LEFT, RIGHT\r\n}\r\n\r\nconst strokeWidth = 1;\r\n\r\nexport const CircleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <circle cx=\"0\" cy=\"0\" r=\"3\"\r\n                        style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const SquareSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <rect x=\"-3\" y=\"-3\" width=\"6\" height=\"6\"\r\n                      style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const TriangleSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols, direction} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        let pointsString;\r\n        switch (direction) {\r\n            case Direction.UP:\r\n                pointsString = \"-4,2.5,4,2.5,0,-3.5\";\r\n                break;\r\n            case Direction.LEFT:\r\n                pointsString = \"2.5,4,2.5,-4,-3.5,0\";\r\n                break;\r\n            case Direction.RIGHT:\r\n                pointsString = \"-2.5,4,-2.5,-4,3.5,0\";\r\n                break;\r\n            default:\r\n                pointsString = \"-4,-2.5,4,-2.5,0,3.5\";\r\n        }\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points={pointsString}\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const DiamondSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // strokeWidth needs to be halved as the view box is too small\r\n        return (\r\n            <svg x={cx - 10 * scale} y={cy - 10 * scale} width={20 * scale} height={20 * scale} viewBox=\"-10 -10 20 20\">\r\n                <polygon points=\"-3,0,0,5,3,0,0,-5\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const StarSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        // we need to scale down by 50% first before applying the scale factor as the original svg is too large\r\n        const s = 0.05 * scale;\r\n        return (\r\n            // strokeWidth needs to be doubled as the view box is too large\r\n            <svg x={cx - 100 * s} y={cy - 100 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon points=\"100,10 40,180 190,60 10,60 160,180\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: stroke, strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const HexagonSymbol = (props: any) => {\r\n    const {cx, cy, opacity, stroke, index, points, scale, numberOfSymbols} = props;\r\n    const interval = Math.round(points.length / numberOfSymbols);\r\n    if (cx && cy && index > 0 && index % interval === 0) {\r\n        const s = 0.02 * scale;\r\n        return (\r\n            <svg x={cx - 150 * s} y={cy - 150 * s} width={300 * s} height={300 * s} viewBox=\"0 0 300 300\">\r\n                <polygon className=\"hex\" points=\"300,150 225,280 75,280 0,150 75,20 225,20\"\r\n                         style={{opacity: opacity, stroke: stroke, fill: 'white', strokeWidth: strokeWidth}}/>\r\n            </svg>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const createSymbol = (type: string, size: number, count: number, opacity: number) => {\r\n    switch (type) {\r\n        case 'circle':\r\n            return <CircleSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'square':\r\n            return <SquareSymbol scale={size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'triangle up':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.UP} opacity={opacity}/>;\r\n        case 'triangle down':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.DOWN} opacity={opacity}/>;\r\n        case 'triangle right':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.RIGHT} opacity={opacity}/>;\r\n        case 'triangle left':\r\n            return <TriangleSymbol scale={1.1 * size} numberOfSymbols={count} direction={Direction.LEFT} opacity={opacity}/>;\r\n        case 'star':\r\n            return <StarSymbol scale={1.25 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'diamond':\r\n            return <DiamondSymbol scale={1.1 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n        case 'hexagon':\r\n            return <HexagonSymbol scale={1.3 * size} numberOfSymbols={count} opacity={opacity}/>;\r\n    }\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Menu, Dropdown, Checkbox} from 'antd';\r\nimport {ReactComponent as MenuSVG} from './assets/menu.svg';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst StyledMenuSVG = styled(MenuSVG)`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  height: 40px;\r\n  width: 40px;\r\n  transition: 0.5s;\r\n  fill: brown;\r\n\r\n  &:hover {\r\n    fill: white;\r\n  }\r\n`;\r\n\r\nconst MainMenu = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n\r\n    // @ts-ignore\r\n    const onChangeShowGroundPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showGroundPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onChangeShowWeatherPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showWeatherPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onChangeShowHeliodonPanel = (e) => {\r\n        setCommonStore((state) => {\r\n            state.showHeliodonPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <Menu.Item key={'ground-panel-check-box'}>\r\n                <Checkbox checked={showGroundPanel} onChange={onChangeShowGroundPanel}>\r\n                    Ground Settings\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <Menu.Item key={'heliodon-panel-check-box'}>\r\n                <Checkbox checked={showHeliodonPanel} onChange={onChangeShowHeliodonPanel}>\r\n                    Heliodon Settings\r\n                </Checkbox>\r\n            </Menu.Item>\r\n            <Menu.Item key={'weather-panel-check-box'}>\r\n                <Checkbox checked={showWeatherPanel} onChange={onChangeShowWeatherPanel}>\r\n                    Weather Data\r\n                </Checkbox>\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <Dropdown overlay={menu} trigger={['click']}>\r\n            <StyledMenuSVG/>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default MainMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {memo, useCallback, useState} from \"react\";\r\nimport {GoogleMap} from '@react-google-maps/api';\r\nimport {useStore} from \"./stores/common\";\r\n\r\nexport interface MapsProp {\r\n\r\n    setLatitude?: (value: number) => void;\r\n    setLongitude?: (value: number) => void;\r\n    setZoom?: (value: number) => void;\r\n    setTilt?: (value: number) => void;\r\n    setType?: (value: string) => void;\r\n\r\n}\r\n\r\nconst containerStyle = {\r\n    border: '1px solid',\r\n    width: '400px',\r\n    height: '400px'\r\n};\r\n\r\nconst Maps = ({\r\n                  setLatitude,\r\n                  setLongitude,\r\n                  setZoom,\r\n                  setTilt,\r\n                  setType,\r\n              }: MapsProp) => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const zoom = useStore(state => state.mapZoom);\r\n    const type = useStore(state => state.mapType);\r\n    const tilt = useStore(state => state.mapTilt);\r\n    const [map, setMap] = useState<google.maps.Map | null>(null);\r\n\r\n    const onLoad = useCallback((map: google.maps.Map) => {\r\n        setMap(map);\r\n    }, []);\r\n\r\n    const onUnmount = useCallback(function callback(map) {\r\n        setMap(null);\r\n    }, []);\r\n\r\n    const onCenterChanged = () => {\r\n        if (map) {\r\n            const center = map.getCenter();\r\n            const lat = center.lat();\r\n            if (lat !== latitude) {\r\n                setLatitude?.(lat);\r\n            }\r\n            const lng = center.lng();\r\n            if (lng !== longitude) {\r\n                setLongitude?.(lng);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onZoomChanged = () => {\r\n        if (map) {\r\n            const z = map.getZoom();\r\n            if (z !== zoom) {\r\n                setZoom?.(z);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onTiltChanged = () => {\r\n        if (map) {\r\n            const t = map.getTilt();\r\n            if (t !== tilt) {\r\n                setTilt?.(t);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onMapTypeIdChanged = () => {\r\n        if (map) {\r\n            const typeId = map.getMapTypeId();\r\n            if (typeId !== type) {\r\n                setType?.(typeId);\r\n            }\r\n        }\r\n    };\r\n\r\n    const latLng = {lat: latitude, lng: longitude};\r\n\r\n    return (\r\n        <GoogleMap\r\n            mapContainerStyle={containerStyle}\r\n            mapTypeId={type}\r\n            center={latLng}\r\n            zoom={zoom}\r\n            tilt={tilt}\r\n            onLoad={onLoad}\r\n            onUnmount={onUnmount}\r\n            onCenterChanged={onCenterChanged}\r\n            onZoomChanged={onZoomChanged}\r\n            onTiltChanged={onTiltChanged}\r\n            onMapTypeIdChanged={onMapTypeIdChanged}\r\n        >\r\n            { /* Child components, such as markers, info windows, etc. */}\r\n            <></>\r\n        </GoogleMap>\r\n    );\r\n};\r\n\r\nexport default memo(Maps);\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {Spin} from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nexport default styled(Spin)`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  z-index: 999;\r\n`;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useRef} from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch} from \"antd\";\r\nimport {CompactPicker} from 'react-color';\r\nimport Maps from \"./maps\";\r\nimport {StandaloneSearchBox, useJsApiLoader} from \"@react-google-maps/api\";\r\nimport {Libraries} from \"@react-google-maps/api/dist/utils/make-load-script-url\";\r\nimport Spinner from './components/spinner';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst libraries = ['places'] as Libraries;\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 420px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface GroundPanelProps {\r\n    grid: boolean;\r\n    groundImage: boolean;\r\n    groundColor: string;\r\n    setGrid?: (on: boolean) => void;\r\n    setGroundImage?: (on: boolean) => void;\r\n    setGroundColor?: (color: string) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeLongitude?: (longitude: number) => void;\r\n    changeMapZoom?: (zoom: number) => void;\r\n    changeMapTilt?: (tilt: number) => void;\r\n    changeMapType?: (type: string) => void;\r\n}\r\n\r\nconst GroundPanel = ({\r\n                         grid,\r\n                         groundImage,\r\n                         groundColor,\r\n                         setGrid,\r\n                         setGroundImage,\r\n                         setGroundColor,\r\n                         changeLatitude,\r\n                         changeLongitude,\r\n                         changeMapZoom,\r\n                         changeMapTilt,\r\n                         changeMapType,\r\n                     }: GroundPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n    const address = useStore(state => state.address);\r\n    const searchBox = useRef<google.maps.places.SearchBox>();\r\n\r\n    const {isLoaded, loadError} = useJsApiLoader({\r\n        id: 'google-map-script',\r\n        googleMapsApiKey: process.env.REACT_APP_MAPS_API_KEY as string,\r\n        libraries: libraries\r\n    });\r\n\r\n    const onPlacesChanged = () => {\r\n        const places = searchBox.current?.getPlaces();\r\n        if (places && places.length > 0) {\r\n            setCommonStore((state) => {\r\n                const geometry = places[0].geometry;\r\n                if (geometry) {\r\n                    state.latitude = geometry.location.lat();\r\n                    state.longitude = geometry.location.lng();\r\n                }\r\n                state.address = places[0].formatted_address as string;\r\n            });\r\n        }\r\n    };\r\n\r\n    const onLoad = (s: google.maps.places.SearchBox) => {\r\n        searchBox.current = s;\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <ColumnWrapper>\r\n                <Header>\r\n                    <span>Ground Settings</span>\r\n                    <span style={{cursor: 'pointer'}} onClick={() => {\r\n                        setCommonStore((state) => {\r\n                            state.showGroundPanel = false;\r\n                        });\r\n                    }}>Close</span>\r\n                </Header>\r\n                <Space direction={'vertical'}>\r\n                    <Space style={{padding: '20px'}} align={'center'} size={20}>\r\n                        <Space direction={'vertical'}>\r\n                            <Space>\r\n                                <Space style={{width: '40px'}}>Grid:</Space>\r\n                                <Switch title={'Show ground grid'}\r\n                                        checked={grid}\r\n                                        onChange={(checked) => {\r\n                                            setGrid?.(checked);\r\n                                        }}\r\n                                />\r\n                            </Space>\r\n                            <Space>\r\n                                <Space style={{width: '40px'}}>Image:</Space>\r\n                                <Switch title={'Show ground image'}\r\n                                        checked={groundImage}\r\n                                        onChange={(checked) => {\r\n                                            setGroundImage?.(checked);\r\n                                        }}\r\n                                />\r\n                            </Space>\r\n                        </Space>\r\n                        <div>Ground Color<br/>\r\n                            <CompactPicker color={groundColor} onChangeComplete={(colorResult) => {\r\n                                setGroundColor?.(colorResult.hex);\r\n                            }}/>\r\n                        </div>\r\n                    </Space>\r\n                    {isLoaded &&\r\n                    <Space>\r\n                        <div>\r\n                            <StandaloneSearchBox onLoad={onLoad}\r\n                                                 onPlacesChanged={onPlacesChanged}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder={address}\r\n                                    style={{\r\n                                        boxSizing: `border-box`,\r\n                                        border: `1px solid transparent`,\r\n                                        width: `400px`,\r\n                                        height: `32px`,\r\n                                        padding: `0 12px`,\r\n                                        borderRadius: `3px`,\r\n                                        boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n                                        fontSize: `14px`,\r\n                                        outline: `none`,\r\n                                        textOverflow: `ellipses`,\r\n                                        position: \"relative\"\r\n                                    }}\r\n                                />\r\n                            </StandaloneSearchBox>\r\n                        </div>\r\n                    </Space>\r\n                    }\r\n                    {isLoaded ?\r\n                        <Space>\r\n                            <div>\r\n                                <Maps setLatitude={changeLatitude}\r\n                                      setLongitude={changeLongitude}\r\n                                      setZoom={changeMapZoom}\r\n                                      setTilt={changeMapTilt}\r\n                                      setType={changeMapType}\r\n                                />\r\n                                Coordinates: ({latitude.toFixed(4)}°, {longitude.toFixed(4)}°),\r\n                                Zoom: {mapZoom}\r\n                            </div>\r\n                        </Space>\r\n                        :\r\n                        <Spinner/>\r\n                    }\r\n                    {loadError &&\r\n                    <Space>\r\n                        <div>Map cannot be loaded right now, sorry.</div>\r\n                    </Space>\r\n                    }\r\n                </Space>\r\n            </ColumnWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default GroundPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useRef} from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport styled from 'styled-components';\r\nimport {Space, Switch, Slider, DatePicker, TimePicker} from \"antd\";\r\nimport moment from 'moment';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 640px;\r\n  padding: 0;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface HeliodonPanelProps {\r\n    heliodon: boolean;\r\n    latitude: number;\r\n    date: Date;\r\n    animateSun?: boolean;\r\n    setHeliodon?: (on: boolean) => void;\r\n    setSunAnimation?: (on: boolean) => void;\r\n    changeLatitude?: (latitude: number) => void;\r\n    changeDate?: (date: Date) => void;\r\n    changeTime?: (date: Date) => void;\r\n}\r\n\r\nconst HeliodonPanel = ({\r\n                           heliodon,\r\n                           latitude,\r\n                           date,\r\n                           animateSun,\r\n                           setHeliodon,\r\n                           setSunAnimation,\r\n                           changeLatitude,\r\n                           changeDate,\r\n                           changeTime,\r\n                       }: HeliodonPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const requestRef = useRef<number>(0);\r\n    const previousFrameTime = useRef<number>(-1);\r\n\r\n    useEffect(() => {\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => {\r\n            cancelAnimationFrame(requestRef.current);\r\n        }\r\n    }, [animateSun]);\r\n\r\n    const animate = () => {\r\n        if (animateSun) {\r\n            requestRef.current = requestAnimationFrame(animate);\r\n            const currentFrameTime = Date.now();\r\n            if (currentFrameTime - previousFrameTime.current > 100) {\r\n                const day = date.getDate();\r\n                date.setHours(date.getHours(), date.getMinutes() + 15);\r\n                date.setDate(day)\r\n                changeTime?.(date);\r\n                previousFrameTime.current = currentFrameTime;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <ColumnWrapper>\r\n                <Header>\r\n                    <span>Heliodon Settings</span>\r\n                    <span style={{cursor: 'pointer'}} onClick={() => {\r\n                        setCommonStore((state) => {\r\n                            state.showHeliodonPanel = false;\r\n                        });\r\n                    }}>Close</span>\r\n                </Header>\r\n                <Space style={{padding: '20px'}} align={'baseline'} size={20}>\r\n                    <div>\r\n                        Show<br/>\r\n                        <Switch checked={heliodon} onChange={(checked) => {\r\n                            setHeliodon?.(checked);\r\n                        }}/>\r\n                    </div>\r\n                    <div>\r\n                        Animate<br/>\r\n                        <Switch checked={animateSun} onChange={(checked) => {\r\n                            setSunAnimation?.(checked);\r\n                        }}/>\r\n                    </div>\r\n                    <div>\r\n                        Date<br/>\r\n                        <DatePicker value={moment(date)}\r\n                                    onChange={(moment) => {\r\n                                        if (moment) changeDate?.(moment.toDate());\r\n                                    }}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        Time<br/>\r\n                        <TimePicker value={moment(date, 'HH:mm')}\r\n                                    format={'HH:mm'}\r\n                                    onChange={(moment) => {\r\n                                        if (moment) changeTime?.(moment.toDate());\r\n                                    }}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        Latitude: {latitude.toFixed(4)}°\r\n                        <Slider\r\n                            style={{width: '150px'}}\r\n                            marks={{'-90': '-90°', 0: '0°', 90: '90°'}}\r\n                            min={-90}\r\n                            max={90}\r\n                            tooltipVisible={false}\r\n                            defaultValue={latitude}\r\n                            onChange={(value: number) => {\r\n                                changeLatitude?.(value);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Space>\r\n            </ColumnWrapper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default HeliodonPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nexport const VERSION = '0.0.1';\r\n\r\nexport const isProd = process.env.NODE_ENV === 'production';\r\n\r\nexport const HOME_URL: string = isProd ? 'https://aladdin.intofuture.org' : 'http://aladdin.dev';\r\n\r\nexport const PRESET_COLORS = [\r\n    '#8884d8',\r\n    '#f97356',\r\n    '#1bc32c',\r\n    '#c6502d',\r\n    '#82ca9d',\r\n    '#3eaec0',\r\n    '#627682',\r\n    '#445111'\r\n];\r\n\r\nexport const MONTHS = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec'\r\n];\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport {message} from \"antd\";\r\n\r\nexport const visitIFI = () => {\r\n    window.open(\"https://intofuture.org\", '_blank');\r\n};\r\n\r\nexport const getMapImage = (size: number, lat: number, lng: number, zoom: number) => {\r\n    return \"https://maps.googleapis.com/maps/api/staticmap?maptype=satellite&center=\" + lat + \",\" + lng\r\n        + \"&zoom=\" + zoom + \"&size=\" + size + \"x\" + size + \"&scale=2&key=\" + process.env.REACT_APP_MAPS_API_KEY;\r\n}\r\n\r\nexport const showSuccess = (msg: string) => {\r\n    message.success({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showInfo = (msg: string) => {\r\n    message.info({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showWarning = (msg: string) => {\r\n    message.warning({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const showError = (msg: string) => {\r\n    message.error({\r\n        content: msg,\r\n        className: 'custom-class',\r\n        style: {\r\n            marginTop: '20vh',\r\n        },\r\n        onClick: () => {\r\n            message.destroy();\r\n        }\r\n    });\r\n};\r\n\r\nexport const fahrenheitToCelsius = (temp: number) => {\r\n    return ((temp - 32) * 5) / 9;\r\n};\r\n\r\nexport const celsiusToFahrenheit = (temp: number) => {\r\n    return temp * (9 / 5) + 32;\r\n};\r\n\r\nexport const openInNewTab = (url: string) => {\r\n    const win = window.open(url, '_blank');\r\n    if (win) {\r\n        win.focus();\r\n    }\r\n};\r\n\r\nexport const extractText = (html: string) => {\r\n    return new DOMParser().parseFromString(html, \"text/html\").documentElement.textContent;\r\n};\r\n\r\nexport const containedInDOMRect = (rect: DOMRect, x: number, y: number, margin: number) => {\r\n    return x > rect.x - margin && x < rect.x + rect.width + margin\r\n        && y > rect.y - margin && y < rect.y + rect.height + margin;\r\n};\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport CookieConsent from \"react-cookie-consent\";\r\n\r\nconst AcceptCookie = () => {\r\n    return <CookieConsent\r\n        location=\"bottom\"\r\n        buttonText=\"Accept\"\r\n        cookieName=\"AladdinCookieName\"\r\n        style={{background: \"#2B373B\", textAlign: 'center', zIndex: 99999}}\r\n        buttonStyle={{color: \"#4e503b\", fontSize: \"12px\"}}\r\n        expires={150}\r\n    >\r\n        By clicking Accept, you agree to our use of cookies to improve your experience with Aladdin.\r\n    </CookieConsent>;\r\n};\r\n\r\nexport default AcceptCookie;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from \"react\";\r\nimport {useTexture} from \"@react-three/drei\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {DoubleSide} from \"three\";\r\nimport {getMapImage} from \"../helpers\";\r\n\r\nconst GroundImage = () => {\r\n\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const mapZoom = useStore(state => state.mapZoom);\r\n\r\n    const texture = useTexture(getMapImage(640, latitude, longitude, mapZoom));\r\n\r\n    return (\r\n        <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\r\n            <planeBufferGeometry args={[100, 100]}/>\r\n            <meshStandardMaterial attach=\"material\" side={DoubleSide} map={texture} opacity={1}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default GroundImage;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React from 'react';\r\nimport {useStore} from \"./stores/common\";\r\nimport {Menu, Checkbox, Radio} from 'antd';\r\nimport {ClickObjectType, Theme} from \"./types\";\r\nimport 'antd/dist/antd.css';\r\n\r\nconst {SubMenu} = Menu;\r\n\r\nconst radioStyle = {\r\n    display: 'block',\r\n    height: '30px',\r\n    paddingLeft: '10px',\r\n    lineHeight: '30px',\r\n};\r\n\r\nconst ContextMenu = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const heliodon = useStore(state => state.heliodon);\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const theme = useStore(state => state.theme);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n    const clickObjectType = useStore(state => state.clickObjectType);\r\n\r\n    //@ts-ignore\r\n    const selectTheme = (e) => {\r\n        setCommonStore(state => {\r\n            state.theme = e.target.value;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeAxes = (e) => {\r\n        setCommonStore(state => {\r\n            state.axes = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeShowWeatherPanel = (e) => {\r\n        setCommonStore(state => {\r\n            state.showWeatherPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeShowHeliodonPanel = (e) => {\r\n        setCommonStore(state => {\r\n            state.showHeliodonPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeGrid = (e) => {\r\n        setCommonStore(state => {\r\n            state.grid = e.target.checked;\r\n        });\r\n    };\r\n\r\n    //@ts-ignore\r\n    const changeShowGroundPanel = (e) => {\r\n        setCommonStore(state => {\r\n            state.showGroundPanel = e.target.checked;\r\n        });\r\n    };\r\n\r\n    switch (clickObjectType) {\r\n        case ClickObjectType.sky:\r\n            return (\r\n                <Menu>\r\n                    <Menu.Item key={'axes'}>\r\n                        <Checkbox checked={axes} onChange={changeAxes}>\r\n                            Axes\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'heliodon-settings'}>\r\n                        <Checkbox checked={showHeliodonPanel} onChange={changeShowHeliodonPanel}>\r\n                            Heliodon Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'weather-data'}>\r\n                        <Checkbox checked={showWeatherPanel} onChange={changeShowWeatherPanel}>\r\n                            Weather Data\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    {<SubMenu key={'theme'} title={'Theme'}>\r\n                        <Radio.Group onChange={selectTheme} value={theme} style={{height: '105px'}}>\r\n                            <Radio style={radioStyle} value={Theme.default}>Default</Radio>\r\n                            <Radio style={radioStyle} value={Theme.desert}>Desert</Radio>\r\n                            <Radio style={radioStyle} value={Theme.grassland}>Grassland</Radio>\r\n                        </Radio.Group>\r\n                    </SubMenu>}\r\n                </Menu>);\r\n        default:\r\n            return (\r\n                <Menu>\r\n                    <Menu.Item key={'ground-grid'}>\r\n                        <Checkbox checked={grid} onChange={changeGrid}>\r\n                            Grid\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                    <Menu.Item key={'ground-settings'}>\r\n                        <Checkbox checked={showGroundPanel} onChange={changeShowGroundPanel}>\r\n                            Ground Settings\r\n                        </Checkbox>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            );\r\n    }\r\n\r\n};\r\n\r\nexport default ContextMenu;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useEffect, useMemo, useState} from 'react';\r\nimport {\r\n    CartesianGrid,\r\n    Label,\r\n    Legend,\r\n    Line,\r\n    LineChart,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis,\r\n} from 'recharts';\r\nimport {createSymbol, SYMBOLS} from \"./symbols\";\r\nimport {MONTHS, PRESET_COLORS} from \"../constants\";\r\nimport {GraphType, RechartsDatumEntry} from \"../types\";\r\nimport {useStore} from \"../stores/common\";\r\nimport {Util} from \"../util\";\r\n\r\nexport interface LinePlotProps {\r\n    type: GraphType;\r\n    dataSource: RechartsDatumEntry[];\r\n    height: number;\r\n    labelX?: string,\r\n    labelY?: string,\r\n    unitX?: string;\r\n    unitY?: string;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst LinePlot = ({\r\n                      type,\r\n                      dataSource,\r\n                      height,\r\n                      labelX,\r\n                      labelY,\r\n                      unitX,\r\n                      unitY,\r\n                      ...rest\r\n                  }: LinePlotProps) => {\r\n\r\n    const [lineCount, setLineCount] = useState<number>(0);\r\n    const [horizontalGridLines, setHorizontalGridLines] = useState<boolean>(true);\r\n    const [verticalGridLines, setVerticalGridLines] = useState<boolean>(true);\r\n    const [legendDataKey, setLegendDataKey] = useState<string | null>(null);\r\n    const [lineWidth, setLineWidth] = useState<number>(2);\r\n    const [symbolCount, setSymbolCount] = useState<number>(25);\r\n    const [symbolSize, setSymbolSize] = useState<number>(1);\r\n    const now = useStore(state => state.date);\r\n\r\n    //init\r\n    useEffect(() => {\r\n        if (!dataSource) {\r\n            return;\r\n        }\r\n        const len = Array.isArray(dataSource) ? Object.keys(dataSource[0]).length - 1 : Object.keys(dataSource).length - 1;\r\n        if (lineCount !== len) {\r\n            setLineCount(len);\r\n        }\r\n    }, [dataSource]);\r\n\r\n    const getLines = useMemo(() => {\r\n        const lines = [];\r\n        let defaultSymbol;\r\n        for (let i = 0; i < lineCount; i++) {\r\n            let name = '';\r\n            switch (type) {\r\n                case GraphType.monthlyTemperatures:\r\n                    name = i === 0 ? `Low` : 'High';\r\n                    break;\r\n                case GraphType.sunshineHours:\r\n                    name = 'Sunshine';\r\n                    break;\r\n                case GraphType.hourlyTemperatures:\r\n                    name = 'Temperature';\r\n                    break;\r\n            }\r\n            const opacity = legendDataKey === null ? 1 : (legendDataKey === name ? 1 : 0.25);\r\n            const symbol = createSymbol(\r\n                SYMBOLS[i],\r\n                symbolSize,\r\n                symbolCount,\r\n                opacity\r\n            );\r\n            if (i === 0) defaultSymbol = symbol;\r\n            lines.push(\r\n                <Line\r\n                    key={i}\r\n                    type=\"monotone\"\r\n                    name={name}\r\n                    dataKey={name}\r\n                    stroke={PRESET_COLORS[i]}\r\n                    opacity={opacity}\r\n                    strokeWidth={lineWidth}\r\n                    dot={symbolCount > 0 ? (symbol ? symbol : defaultSymbol) : false}\r\n                    isAnimationActive={false}\r\n                />,\r\n            );\r\n        }\r\n        return lines;\r\n    }, [lineCount, lineWidth, symbolCount, symbolSize, legendDataKey]);\r\n\r\n    // @ts-ignore\r\n    const onMouseDown = (e) => {\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseEnterLegend = (o) => {\r\n        setLegendDataKey(o.dataKey);\r\n    };\r\n\r\n    // @ts-ignore\r\n    const onMouseLeaveLegend = (o) => {\r\n        setLegendDataKey(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {dataSource && (\r\n                // need two div wrappers to disable the responsiveness of ResponsiveContainer\r\n                <div id={'line-plot-' + labelX + '-' + labelY}\r\n                     style={{width: '100%', height: `${height}%`, position: 'relative'}}>\r\n                    <div\r\n                        style={{\r\n                            userSelect: 'none',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0\r\n                        }}\r\n                    >\r\n                        <ResponsiveContainer width=\"100%\" height={`100%`}>\r\n                            <LineChart\r\n                                data={dataSource}\r\n                                onMouseDown={onMouseDown}\r\n                                margin={{\r\n                                    top: 5,\r\n                                    right: 30,\r\n                                    left: 20,\r\n                                    bottom: 30,\r\n                                }}>\r\n                                <Tooltip formatter={(value: number) => value.toFixed(2) + ' ' + unitY}/>\r\n                                <CartesianGrid\r\n                                    vertical={verticalGridLines}\r\n                                    horizontal={horizontalGridLines}\r\n                                    stroke={\"rgba(128, 128, 128, 0.3)\"}\r\n                                />\r\n                                <ReferenceLine\r\n                                    x={MONTHS[Math.floor(Util.daysIntoYear(now) / 365 * 12)]}\r\n                                    stroke=\"orange\"\r\n                                    strokeWidth={2}\r\n                                />\r\n                                <XAxis dataKey={labelX}>\r\n                                    <Label\r\n                                        value={labelX + (unitX ? ' (' + unitX + ')' : '')}\r\n                                        offset={0}\r\n                                        position=\"bottom\"\r\n                                    />\r\n                                </XAxis>\r\n                                <YAxis domain={['dataMin - 5', 'auto']}>\r\n                                    <Label\r\n                                        dx={-15}\r\n                                        value={labelY + (unitY ? ' (' + unitY + ')' : '')}\r\n                                        offset={0}\r\n                                        angle={-90}\r\n                                        position=\"center\"\r\n                                    />\r\n                                </YAxis>\r\n                                {getLines}\r\n                                {lineCount > 1 &&\r\n                                <Legend iconType='plainline'\r\n                                        verticalAlign='top'\r\n                                        height={36}\r\n                                        onMouseLeave={onMouseLeaveLegend}\r\n                                        onMouseEnter={onMouseEnterLegend}/>}\r\n                            </LineChart>\r\n                        </ResponsiveContainer>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LinePlot;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n */\r\n\r\nimport React, {useMemo} from 'react';\r\nimport LinePlot from './components/linePlot';\r\nimport {GraphType} from \"./types\";\r\nimport styled from \"styled-components\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {MONTHS} from \"./constants\";\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px;\r\n  z-index: 9;\r\n`;\r\n\r\nconst ColumnWrapper = styled.div`\r\n  background-color: #f8f8f8;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 500px;\r\n  height: 500px;\r\n  padding-bottom: 10px;\r\n  border: 2px solid gainsboro;\r\n  border-radius: 10px 10px 10px 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  border-radius: 10px 10px 0 0;\r\n  width: 100%;\r\n  height: 24px;\r\n  padding: 10px;\r\n  background-color: #e8e8e8;\r\n  color: #888;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  svg.icon {\r\n    height: 16px;\r\n    width: 16px;\r\n    padding: 8px;\r\n    fill: #666;\r\n  }\r\n`;\r\n\r\nexport interface WeatherPanelProps {\r\n\r\n    city: string | null;\r\n    graphs: GraphType[];\r\n\r\n    [key: string]: any;\r\n\r\n}\r\n\r\nconst WeatherPanel = ({\r\n                          city,\r\n                          graphs,\r\n                          ...rest\r\n                      }: WeatherPanelProps) => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const getWeather = useStore(state => state.getWeather);\r\n\r\n    const responsiveHeight = useMemo(() => {\r\n        return graphs ? Math.floor(100 / graphs.length) : 100;\r\n    }, [graphs]);\r\n\r\n    const getData = useMemo(() => {\r\n        if (!graphs) {\r\n            return;\r\n        }\r\n        const result: any = {};\r\n        if (city) {\r\n            const weather = getWeather(city);\r\n            if (weather) {\r\n                graphs.forEach(g => {\r\n                    result[g] = [];\r\n                    switch (g) {\r\n                        case GraphType.monthlyTemperatures:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Low: weather.lowestTemperatures[i],\r\n                                        High: weather.highestTemperatures[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                        case GraphType.sunshineHours:\r\n                            for (let i = 0; i < 12; i++) {\r\n                                result[g].push(\r\n                                    {\r\n                                        Month: MONTHS[i],\r\n                                        Sunshine: weather.sunshineHours[i]\r\n                                    }\r\n                                );\r\n                            }\r\n                            break;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return result;\r\n    }, [graphs, city]);\r\n\r\n    const yNames = ['Temperature', 'Temperature', 'Sunshine'];\r\n    const yUnits = ['°C', '°C', 'Hours'];\r\n\r\n    return (\r\n        <Container>\r\n            <ColumnWrapper>\r\n                <Header>\r\n                    <span>Weather</span>\r\n                    <span style={{cursor: 'pointer'}} onClick={() => {\r\n                        setCommonStore((state) => {\r\n                            state.showWeatherPanel = false;\r\n                        });\r\n                    }}>Close</span>\r\n                </Header>\r\n                <>\r\n                    {graphs.map(g => {\r\n                        return (\r\n                            <LinePlot\r\n                                key={g}\r\n                                type={g}\r\n                                dataSource={getData[g]}\r\n                                height={responsiveHeight}\r\n                                labelX={'Month'}\r\n                                labelY={yNames[g]}\r\n                                unitY={yUnits[g]}\r\n                                {...rest}\r\n                            />\r\n                        );\r\n                    })}\r\n                    <div>\r\n                        <span>{city}</span>\r\n                    </div>\r\n                </>\r\n            </ColumnWrapper>\r\n        </Container>\r\n    );\r\n\r\n};\r\n\r\nexport default WeatherPanel;\r\n","/*\r\n * @Copyright 2021. Institute for Future Intelligence, Inc.\r\n *\r\n * @author Charles Xie\r\n */\r\n\r\nimport React, {Suspense, useEffect, useMemo, useState} from 'react';\r\nimport './App.css';\r\nimport {Canvas} from '@react-three/fiber';\r\nimport OrbitController from \"./orbitController\";\r\nimport Sky from \"./views/sky\";\r\nimport Axes from \"./views/axes\";\r\nimport Compass from \"./views/compass\";\r\nimport Scene from \"./scene\";\r\nimport Ground from \"./views/ground\";\r\nimport {useStore} from \"./stores/common\";\r\nimport {Euler, Vector3} from \"three\";\r\nimport Heliodon from \"./views/heliodon\";\r\nimport {Util} from \"./util\";\r\nimport {computeDeclinationAngle, computeHourAngle, computeSunLocation} from \"./views/sunTools\";\r\nimport aladdinLogo from './assets/aladdin-logo.png';\r\nimport ifiLogo from './assets/ifi-logo.png';\r\nimport MainMenu from \"./mainMenu\";\r\nimport GroundPanel from \"./groundPanel\";\r\nimport HeliodonPanel from \"./heliodonPanel\";\r\nimport {VERSION} from \"./constants\";\r\nimport {visitIFI} from \"./helpers\";\r\nimport AcceptCookie from \"./acceptCookie\";\r\nimport GroundImage from \"./views/groundImage\";\r\nimport {Dropdown} from \"antd\";\r\nimport ContextMenu from \"./contextMenu\";\r\nimport WeatherPanel from \"./weatherPanel\";\r\nimport {GraphType} from \"./types\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    const setCommonStore = useStore(state => state.set);\r\n    const worlds = useStore(state => state.worlds);\r\n    const getWorld = useStore(state => state.getWorld);\r\n    const createNewWorld = useStore(state => state.createNewWorld);\r\n    const loadWeatherData = useStore(state => state.loadWeatherData);\r\n    const getClosestCity = useStore(state => state.getClosestCity);\r\n\r\n    const showGroundPanel = useStore(state => state.showGroundPanel);\r\n    const showHeliodonPanel = useStore(state => state.showHeliodonPanel);\r\n    const showWeatherPanel = useStore(state => state.showWeatherPanel);\r\n\r\n    const axes = useStore(state => state.axes);\r\n    const grid = useStore(state => state.grid);\r\n    const groundImage = useStore(state => state.groundImage);\r\n    const groundColor = useStore(state => state.groundColor);\r\n    const theme = useStore(state => state.theme);\r\n    const heliodon = useStore(state => state.heliodon);\r\n    const latitude = useStore(state => state.latitude);\r\n    const longitude = useStore(state => state.longitude);\r\n    const weatherData = useStore(state => state.weatherData);\r\n    const now = new Date(useStore(state => state.date));\r\n\r\n    const [hourAngle, setHourAngle] = useState<number>(0);\r\n    const [declinationAngle, setDeclinationAngle] = useState<number>(0);\r\n    const [sunlightDirection, setSunlightDirection] = useState<Vector3>(new Vector3(0, 2, 2));\r\n    const [animateSun, setAnimateSun] = useState<boolean>(false);\r\n    const [city, setCity] = useState<string | null>('Boston MA, USA');\r\n\r\n    const world = worlds['default']; // currently we have only one world, which is default\r\n    const radius = 10;\r\n\r\n    useEffect(() => {\r\n        const defaultWorld = getWorld('default');\r\n        if (!defaultWorld) {\r\n            createNewWorld();\r\n        }\r\n        loadWeatherData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setSunlightDirection(computeSunLocation(radius, hourAngle, declinationAngle, Util.toRadians(latitude))\r\n            .applyEuler(new Euler(-Math.PI / 2, 0, 0)));\r\n    }, [latitude, hourAngle, declinationAngle]);\r\n\r\n    useEffect(() => {\r\n        setCity(getClosestCity(latitude, longitude));\r\n    }, [latitude, longitude, weatherData]);\r\n\r\n    const nowString = now.toString();\r\n    useMemo(() => {\r\n        setHourAngle(computeHourAngle(now));\r\n        setDeclinationAngle(computeDeclinationAngle(now));\r\n    }, [nowString]);\r\n\r\n    const cameraPosition = new Vector3(0, 0, 5);\r\n    if (world) {\r\n        cameraPosition.set(world.cameraPosition.x, world.cameraPosition.y, world.cameraPosition.z);\r\n    }\r\n\r\n    console.log('x')\r\n\r\n    const setGrid = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.grid = on;\r\n        });\r\n    };\r\n\r\n    const setGroundImage = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.groundImage = on;\r\n        });\r\n    };\r\n\r\n    const setGroundColor = (color: string) => {\r\n        setCommonStore(state => {\r\n            state.groundColor = color;\r\n        });\r\n    };\r\n\r\n    const setHeliodon = (on: boolean) => {\r\n        setCommonStore(state => {\r\n            state.heliodon = on;\r\n        });\r\n    };\r\n\r\n    // animation state should not be persisted\r\n    const setSunAnimation = (on: boolean) => {\r\n        setAnimateSun(on);\r\n    };\r\n\r\n    const changeDate = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setFullYear(date.getFullYear());\r\n        d.setMonth(date.getMonth());\r\n        d.setDate(date.getDate());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeTime = (date: Date) => {\r\n        const d = new Date(now);\r\n        d.setHours(date.getHours(), date.getMinutes());\r\n        setCommonStore(state => {\r\n            state.date = d.toString();\r\n        });\r\n    };\r\n\r\n    const changeLatitude = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n        });\r\n    };\r\n\r\n    const changeLatitudeAndRemoveAddress = (latitude: number) => {\r\n        setCommonStore(state => {\r\n            state.latitude = latitude;\r\n            state.address = '';\r\n        });\r\n    };\r\n\r\n    const changeLongitude = (longitude: number) => {\r\n        setCommonStore(state => {\r\n            state.longitude = longitude;\r\n        });\r\n    };\r\n\r\n    const changeMapZoom = (zoom: number) => {\r\n        setCommonStore(state => {\r\n            state.mapZoom = zoom;\r\n        });\r\n    };\r\n\r\n    const changeMapTilt = (tilt: number) => {\r\n        setCommonStore(state => {\r\n            state.mapTilt = tilt;\r\n        });\r\n    };\r\n\r\n    const changeMapType = (type: string) => {\r\n        setCommonStore(state => {\r\n            state.mapType = type;\r\n        });\r\n    };\r\n\r\n    const sunAboveHorizon = sunlightDirection.y > 0;\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div style={{\r\n                backgroundColor: 'lightblue',\r\n                height: '72px',\r\n                paddingTop: '10px',\r\n                fontSize: '30px'\r\n            }}>\r\n                <img alt='Aladdin Logo' src={aladdinLogo} height='50px' style={{verticalAlign: 'middle'}}/>\r\n                <span style={{paddingLeft: '20px', verticalAlign: 'middle'}}>Aladdin</span>\r\n            </div>\r\n            <div style={{\r\n                position: 'absolute',\r\n                bottom: '10px',\r\n                left: '10px',\r\n                zIndex: 999,\r\n                fontSize: '12px',\r\n                color: 'white'\r\n            }}>\r\n                <img alt='IFI Logo'\r\n                     src={ifiLogo}\r\n                     height='40px'\r\n                     style={{verticalAlign: 'bottom', cursor: 'pointer'}}\r\n                     title={'Go to Institute for Future Intelligence'}\r\n                     onClick={visitIFI}/>\r\n                &nbsp;&nbsp; Institute for Future Intelligence, &copy;{new Date().getFullYear()}. Version {VERSION}\r\n            </div>\r\n            <MainMenu/>\r\n            {showGroundPanel &&\r\n            <GroundPanel grid={grid}\r\n                         groundImage={groundImage}\r\n                         groundColor={groundColor}\r\n                         setGrid={setGrid}\r\n                         setGroundImage={setGroundImage}\r\n                         setGroundColor={setGroundColor}\r\n                         changeLatitude={changeLatitude}\r\n                         changeLongitude={changeLongitude}\r\n                         changeMapZoom={changeMapZoom}\r\n                         changeMapTilt={changeMapTilt}\r\n                         changeMapType={changeMapType}\r\n            />}\r\n            {showHeliodonPanel &&\r\n            <HeliodonPanel latitude={latitude}\r\n                           date={now}\r\n                           heliodon={heliodon}\r\n                           animateSun={animateSun}\r\n                           changeDate={changeDate}\r\n                           changeTime={changeTime}\r\n                           changeLatitude={changeLatitudeAndRemoveAddress}\r\n                           setHeliodon={setHeliodon}\r\n                           setSunAnimation={setSunAnimation}\r\n            />}\r\n            {showWeatherPanel &&\r\n            <WeatherPanel city={city}\r\n                          graphs={[GraphType.monthlyTemperatures, GraphType.sunshineHours]}\r\n            />}\r\n            <Dropdown key={'canvas-context-menu'} overlay={<ContextMenu/>} trigger={['contextMenu']}>\r\n                <div>\r\n                    <Canvas shadows={true}\r\n                            camera={{\r\n                                position: cameraPosition,\r\n                                fov: 90\r\n                            }}\r\n                            style={{height: 'calc(100vh - 70px)', backgroundColor: 'black'}}>\r\n                        <Suspense fallback={null}>\r\n                            <OrbitController/>\r\n                            <ambientLight intensity={0.25}/>\r\n                            <directionalLight\r\n                                color='white'\r\n                                position={[sunlightDirection.x, sunlightDirection.y, sunlightDirection.z]}\r\n                                intensity={sunAboveHorizon ? 0.5 : 0}\r\n                                castShadow\r\n                                shadow-mapSize-height={512}\r\n                                shadow-mapSize-width={512}\r\n                            />\r\n                            {grid && <gridHelper args={[500, 100, 'gray', 'gray']}/>}\r\n                            <Compass/>\r\n                            {/*<Sample/>*/}\r\n                            {axes && <Axes/>}\r\n                            <Ground/>\r\n                            {groundImage && <GroundImage/>}\r\n                            <Sky theme={theme} night={!sunAboveHorizon}/>\r\n                            {heliodon &&\r\n                            <Heliodon\r\n                                hourAngle={hourAngle}\r\n                                declinationAngle={declinationAngle}\r\n                                radius={radius}\r\n                                date={now}\r\n                                latitude={Util.toRadians(latitude)}\r\n                            />}\r\n                            {world && <Scene world={world}/>}\r\n                        </Suspense>\r\n                    </Canvas>\r\n                </div>\r\n            </Dropdown>\r\n            <AcceptCookie/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n * @Copyright 2021. Institute for Future Intelligence, Inc.\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}